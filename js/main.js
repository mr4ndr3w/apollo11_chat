! function(e, t) {
    "object" == typeof module && "object" == typeof module.exports ? module.exports = e.document ? t(e, !0) : function(e) {
        if (!e.document) throw new Error("jQuery requires a window with a document");
        return t(e)
    } : t(e)
}("undefined" != typeof window ? window : this, function(T, e) {
    function t(e, t) {
        return t.toUpperCase()
    }
    var n = [],
        C = T.document,
        u = n.slice,
        g = n.concat,
        a = n.push,
        r = n.indexOf,
        i = {},
        o = i.toString,
        p = i.hasOwnProperty,
        m = {},
        s = "2.2.4",
        x = function(e, t) {
            return new x.fn.init(e, t)
        },
        l = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
        c = /^-ms-/,
        f = /-([\da-z])/gi;

    function d(e) {
        var t = !!e && "length" in e && e.length,
            n = x.type(e);
        return "function" !== n && !x.isWindow(e) && ("array" === n || 0 === t || "number" == typeof t && 0 < t && t - 1 in e)
    }
    x.fn = x.prototype = {
        jquery: s,
        constructor: x,
        selector: "",
        length: 0,
        toArray: function() {
            return u.call(this)
        },
        get: function(e) {
            return null != e ? e < 0 ? this[e + this.length] : this[e] : u.call(this)
        },
        pushStack: function(e) {
            var t = x.merge(this.constructor(), e);
            return t.prevObject = this, t.context = this.context, t
        },
        each: function(e) {
            return x.each(this, e)
        },
        map: function(n) {
            return this.pushStack(x.map(this, function(e, t) {
                return n.call(e, t, e)
            }))
        },
        slice: function() {
            return this.pushStack(u.apply(this, arguments))
        },
        first: function() {
            return this.eq(0)
        },
        last: function() {
            return this.eq(-1)
        },
        eq: function(e) {
            var t = this.length,
                n = +e + (e < 0 ? t : 0);
            return this.pushStack(0 <= n && n < t ? [this[n]] : [])
        },
        end: function() {
            return this.prevObject || this.constructor()
        },
        push: a,
        sort: n.sort,
        splice: n.splice
    }, x.extend = x.fn.extend = function() {
        var e, t, n, i, r, o, s = arguments[0] || {},
            a = 1,
            l = arguments.length,
            c = !1;
        for ("boolean" == typeof s && (c = s, s = arguments[a] || {}, a++), "object" == typeof s || x.isFunction(s) || (s = {}), a === l && (s = this, a--); a < l; a++)
            if (null != (e = arguments[a]))
                for (t in e) n = s[t], s !== (i = e[t]) && (c && i && (x.isPlainObject(i) || (r = x.isArray(i))) ? (o = r ? (r = !1, n && x.isArray(n) ? n : []) : n && x.isPlainObject(n) ? n : {}, s[t] = x.extend(c, o, i)) : void 0 !== i && (s[t] = i));
        return s
    }, x.extend({
        expando: "jQuery" + (s + Math.random()).replace(/\D/g, ""),
        isReady: !0,
        error: function(e) {
            throw new Error(e)
        },
        noop: function() {},
        isFunction: function(e) {
            return "function" === x.type(e)
        },
        isArray: Array.isArray,
        isWindow: function(e) {
            return null != e && e === e.window
        },
        isNumeric: function(e) {
            var t = e && e.toString();
            return !x.isArray(e) && 0 <= t - parseFloat(t) + 1
        },
        isPlainObject: function(e) {
            var t;
            if ("object" !== x.type(e) || e.nodeType || x.isWindow(e)) return !1;
            if (e.constructor && !p.call(e, "constructor") && !p.call(e.constructor.prototype || {}, "isPrototypeOf")) return !1;
            for (t in e);
            return void 0 === t || p.call(e, t)
        },
        isEmptyObject: function(e) {
            var t;
            for (t in e) return !1;
            return !0
        },
        type: function(e) {
            return null == e ? e + "" : "object" == typeof e || "function" == typeof e ? i[o.call(e)] || "object" : typeof e
        },
        globalEval: function(e) {
            var t, n = eval;
            (e = x.trim(e)) && (1 === e.indexOf("use strict") ? ((t = C.createElement("script")).text = e, C.head.appendChild(t).parentNode.removeChild(t)) : n(e))
        },
        camelCase: function(e) {
            return e.replace(c, "ms-").replace(f, t)
        },
        nodeName: function(e, t) {
            return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase()
        },
        each: function(e, t) {
            var n, i = 0;
            if (d(e))
                for (n = e.length; i < n && !1 !== t.call(e[i], i, e[i]); i++);
            else
                for (i in e)
                    if (!1 === t.call(e[i], i, e[i])) break;
            return e
        },
        trim: function(e) {
            return null == e ? "" : (e + "").replace(l, "")
        },
        makeArray: function(e, t) {
            var n = t || [];
            return null != e && (d(Object(e)) ? x.merge(n, "string" == typeof e ? [e] : e) : a.call(n, e)), n
        },
        inArray: function(e, t, n) {
            return null == t ? -1 : r.call(t, e, n)
        },
        merge: function(e, t) {
            for (var n = +t.length, i = 0, r = e.length; i < n; i++) e[r++] = t[i];
            return e.length = r, e
        },
        grep: function(e, t, n) {
            for (var i = [], r = 0, o = e.length, s = !n; r < o; r++) !t(e[r], r) != s && i.push(e[r]);
            return i
        },
        map: function(e, t, n) {
            var i, r, o = 0,
                s = [];
            if (d(e))
                for (i = e.length; o < i; o++) null != (r = t(e[o], o, n)) && s.push(r);
            else
                for (o in e) null != (r = t(e[o], o, n)) && s.push(r);
            return g.apply([], s)
        },
        guid: 1,
        proxy: function(e, t) {
            var n, i, r;
            if ("string" == typeof t && (n = e[t], t = e, e = n), x.isFunction(e)) return i = u.call(arguments, 2), (r = function() {
                return e.apply(t || this, i.concat(u.call(arguments)))
            }).guid = e.guid = e.guid || x.guid++, r
        },
        now: Date.now,
        support: m
    }), "function" == typeof Symbol && (x.fn[Symbol.iterator] = n[Symbol.iterator]), x.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(e, t) {
        i["[object " + t + "]"] = t.toLowerCase()
    });
    var h = function(n) {
        function f(e, t, n) {
            var i = "0x" + t - 65536;
            return i != i || n ? t : i < 0 ? String.fromCharCode(65536 + i) : String.fromCharCode(i >> 10 | 55296, 1023 & i | 56320)
        }

        function r() {
            E()
        }
        var e, p, b, o, s, g, d, m, w, l, c, E, T, a, C, v, u, h, y, x = "sizzle" + +new Date,
            _ = n.document,
            S = 0,
            i = 0,
            A = re(),
            D = re(),
            k = re(),
            N = function(e, t) {
                return e === t && (c = !0), 0
            },
            I = {}.hasOwnProperty,
            t = [],
            O = t.pop,
            j = t.push,
            L = t.push,
            P = t.slice,
            H = function(e, t) {
                for (var n = 0, i = e.length; n < i; n++)
                    if (e[n] === t) return n;
                return -1
            },
            q = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
            R = "[\\x20\\t\\r\\n\\f]",
            F = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
            M = "\\[" + R + "*(" + F + ")(?:" + R + "*([*^$|!~]?=)" + R + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + F + "))|)" + R + "*\\]",
            W = ":(" + F + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + M + ")*)|.*)\\)|)",
            B = new RegExp(R + "+", "g"),
            U = new RegExp("^" + R + "+|((?:^|[^\\\\])(?:\\\\.)*)" + R + "+$", "g"),
            $ = new RegExp("^" + R + "*," + R + "*"),
            z = new RegExp("^" + R + "*([>+~]|" + R + ")" + R + "*"),
            K = new RegExp("=" + R + "*([^\\]'\"]*?)" + R + "*\\]", "g"),
            Q = new RegExp(W),
            V = new RegExp("^" + F + "$"),
            X = {
                ID: new RegExp("^#(" + F + ")"),
                CLASS: new RegExp("^\\.(" + F + ")"),
                TAG: new RegExp("^(" + F + "|[*])"),
                ATTR: new RegExp("^" + M),
                PSEUDO: new RegExp("^" + W),
                CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + R + "*(even|odd|(([+-]|)(\\d*)n|)" + R + "*(?:([+-]|)" + R + "*(\\d+)|))" + R + "*\\)|)", "i"),
                bool: new RegExp("^(?:" + q + ")$", "i"),
                needsContext: new RegExp("^" + R + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + R + "*((?:-\\d)?\\d*)" + R + "*\\)|)(?=[^-]|$)", "i")
            },
            Y = /^(?:input|select|textarea|button)$/i,
            G = /^h\d$/i,
            J = /^[^{]+\{\s*\[native \w/,
            Z = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
            ee = /[+~]/,
            te = /'|\\/g,
            ne = new RegExp("\\\\([\\da-f]{1,6}" + R + "?|(" + R + ")|.)", "ig");
        try {
            L.apply(t = P.call(_.childNodes), _.childNodes), t[_.childNodes.length].nodeType
        } catch (e) {
            L = {
                apply: t.length ? function(e, t) {
                    j.apply(e, P.call(t))
                } : function(e, t) {
                    for (var n = e.length, i = 0; e[n++] = t[i++];);
                    e.length = n - 1
                }
            }
        }

        function ie(e, t, n, i) {
            var r, o, s, a, l, c, u, f, d = t && t.ownerDocument,
                h = t ? t.nodeType : 9;
            if (n = n || [], "string" != typeof e || !e || 1 !== h && 9 !== h && 11 !== h) return n;
            if (!i && ((t ? t.ownerDocument || t : _) !== T && E(t), t = t || T, C)) {
                if (11 !== h && (c = Z.exec(e)))
                    if (r = c[1]) {
                        if (9 === h) {
                            if (!(s = t.getElementById(r))) return n;
                            if (s.id === r) return n.push(s), n
                        } else if (d && (s = d.getElementById(r)) && y(t, s) && s.id === r) return n.push(s), n
                    } else {
                        if (c[2]) return L.apply(n, t.getElementsByTagName(e)), n;
                        if ((r = c[3]) && p.getElementsByClassName && t.getElementsByClassName) return L.apply(n, t.getElementsByClassName(r)), n
                    } if (p.qsa && !k[e + " "] && (!v || !v.test(e))) {
                    if (1 !== h) d = t, f = e;
                    else if ("object" !== t.nodeName.toLowerCase()) {
                        for ((a = t.getAttribute("id")) ? a = a.replace(te, "\\$&") : t.setAttribute("id", a = x), o = (u = g(e)).length, l = V.test(a) ? "#" + a : "[id='" + a + "']"; o--;) u[o] = l + " " + pe(u[o]);
                        f = u.join(","), d = ee.test(e) && de(t.parentNode) || t
                    }
                    if (f) try {
                        return L.apply(n, d.querySelectorAll(f)), n
                    } catch (e) {} finally {
                        a === x && t.removeAttribute("id")
                    }
                }
            }
            return m(e.replace(U, "$1"), t, n, i)
        }

        function re() {
            var i = [];
            return function e(t, n) {
                return i.push(t + " ") > b.cacheLength && delete e[i.shift()], e[t + " "] = n
            }
        }

        function oe(e) {
            return e[x] = !0, e
        }

        function se(e) {
            var t = T.createElement("div");
            try {
                return !!e(t)
            } catch (e) {
                return !1
            } finally {
                t.parentNode && t.parentNode.removeChild(t), t = null
            }
        }

        function ae(e, t) {
            for (var n = e.split("|"), i = n.length; i--;) b.attrHandle[n[i]] = t
        }

        function le(e, t) {
            var n = t && e,
                i = n && 1 === e.nodeType && 1 === t.nodeType && (~t.sourceIndex || 1 << 31) - (~e.sourceIndex || 1 << 31);
            if (i) return i;
            if (n)
                for (; n = n.nextSibling;)
                    if (n === t) return -1;
            return e ? 1 : -1
        }

        function ce(t) {
            return function(e) {
                return "input" === e.nodeName.toLowerCase() && e.type === t
            }
        }

        function ue(n) {
            return function(e) {
                var t = e.nodeName.toLowerCase();
                return ("input" === t || "button" === t) && e.type === n
            }
        }

        function fe(s) {
            return oe(function(o) {
                return o = +o, oe(function(e, t) {
                    for (var n, i = s([], e.length, o), r = i.length; r--;) e[n = i[r]] && (e[n] = !(t[n] = e[n]))
                })
            })
        }

        function de(e) {
            return e && void 0 !== e.getElementsByTagName && e
        }
        for (e in p = ie.support = {}, s = ie.isXML = function(e) {
                var t = e && (e.ownerDocument || e).documentElement;
                return !!t && "HTML" !== t.nodeName
            }, E = ie.setDocument = function(e) {
                var t, n, i = e ? e.ownerDocument || e : _;
                return i !== T && 9 === i.nodeType && i.documentElement && (a = (T = i).documentElement, C = !s(T), (n = T.defaultView) && n.top !== n && (n.addEventListener ? n.addEventListener("unload", r, !1) : n.attachEvent && n.attachEvent("onunload", r)), p.attributes = se(function(e) {
                    return e.className = "i", !e.getAttribute("className")
                }), p.getElementsByTagName = se(function(e) {
                    return e.appendChild(T.createComment("")), !e.getElementsByTagName("*").length
                }), p.getElementsByClassName = J.test(T.getElementsByClassName), p.getById = se(function(e) {
                    return a.appendChild(e).id = x, !T.getElementsByName || !T.getElementsByName(x).length
                }), p.getById ? (b.find.ID = function(e, t) {
                    if (void 0 !== t.getElementById && C) {
                        var n = t.getElementById(e);
                        return n ? [n] : []
                    }
                }, b.filter.ID = function(e) {
                    var t = e.replace(ne, f);
                    return function(e) {
                        return e.getAttribute("id") === t
                    }
                }) : (delete b.find.ID, b.filter.ID = function(e) {
                    var n = e.replace(ne, f);
                    return function(e) {
                        var t = void 0 !== e.getAttributeNode && e.getAttributeNode("id");
                        return t && t.value === n
                    }
                }), b.find.TAG = p.getElementsByTagName ? function(e, t) {
                    return void 0 !== t.getElementsByTagName ? t.getElementsByTagName(e) : p.qsa ? t.querySelectorAll(e) : void 0
                } : function(e, t) {
                    var n, i = [],
                        r = 0,
                        o = t.getElementsByTagName(e);
                    if ("*" !== e) return o;
                    for (; n = o[r++];) 1 === n.nodeType && i.push(n);
                    return i
                }, b.find.CLASS = p.getElementsByClassName && function(e, t) {
                    if (void 0 !== t.getElementsByClassName && C) return t.getElementsByClassName(e)
                }, u = [], v = [], (p.qsa = J.test(T.querySelectorAll)) && (se(function(e) {
                    a.appendChild(e).innerHTML = "<a id='" + x + "'></a><select id='" + x + "-\r\\' msallowcapture=''><option selected=''></option></select>", e.querySelectorAll("[msallowcapture^='']").length && v.push("[*^$]=" + R + "*(?:''|\"\")"), e.querySelectorAll("[selected]").length || v.push("\\[" + R + "*(?:value|" + q + ")"), e.querySelectorAll("[id~=" + x + "-]").length || v.push("~="), e.querySelectorAll(":checked").length || v.push(":checked"), e.querySelectorAll("a#" + x + "+*").length || v.push(".#.+[+~]")
                }), se(function(e) {
                    var t = T.createElement("input");
                    t.setAttribute("type", "hidden"), e.appendChild(t).setAttribute("name", "D"), e.querySelectorAll("[name=d]").length && v.push("name" + R + "*[*^$|!~]?="), e.querySelectorAll(":enabled").length || v.push(":enabled", ":disabled"), e.querySelectorAll("*,:x"), v.push(",.*:")
                })), (p.matchesSelector = J.test(h = a.matches || a.webkitMatchesSelector || a.mozMatchesSelector || a.oMatchesSelector || a.msMatchesSelector)) && se(function(e) {
                    p.disconnectedMatch = h.call(e, "div"), h.call(e, "[s!='']:x"), u.push("!=", W)
                }), v = v.length && new RegExp(v.join("|")), u = u.length && new RegExp(u.join("|")), t = J.test(a.compareDocumentPosition), y = t || J.test(a.contains) ? function(e, t) {
                    var n = 9 === e.nodeType ? e.documentElement : e,
                        i = t && t.parentNode;
                    return e === i || !(!i || 1 !== i.nodeType || !(n.contains ? n.contains(i) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(i)))
                } : function(e, t) {
                    if (t)
                        for (; t = t.parentNode;)
                            if (t === e) return !0;
                    return !1
                }, N = t ? function(e, t) {
                    if (e === t) return c = !0, 0;
                    var n = !e.compareDocumentPosition - !t.compareDocumentPosition;
                    return n || (1 & (n = (e.ownerDocument || e) === (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1) || !p.sortDetached && t.compareDocumentPosition(e) === n ? e === T || e.ownerDocument === _ && y(_, e) ? -1 : t === T || t.ownerDocument === _ && y(_, t) ? 1 : l ? H(l, e) - H(l, t) : 0 : 4 & n ? -1 : 1)
                } : function(e, t) {
                    if (e === t) return c = !0, 0;
                    var n, i = 0,
                        r = e.parentNode,
                        o = t.parentNode,
                        s = [e],
                        a = [t];
                    if (!r || !o) return e === T ? -1 : t === T ? 1 : r ? -1 : o ? 1 : l ? H(l, e) - H(l, t) : 0;
                    if (r === o) return le(e, t);
                    for (n = e; n = n.parentNode;) s.unshift(n);
                    for (n = t; n = n.parentNode;) a.unshift(n);
                    for (; s[i] === a[i];) i++;
                    return i ? le(s[i], a[i]) : s[i] === _ ? -1 : a[i] === _ ? 1 : 0
                }), T
            }, ie.matches = function(e, t) {
                return ie(e, null, null, t)
            }, ie.matchesSelector = function(e, t) {
                if ((e.ownerDocument || e) !== T && E(e), t = t.replace(K, "='$1']"), p.matchesSelector && C && !k[t + " "] && (!u || !u.test(t)) && (!v || !v.test(t))) try {
                    var n = h.call(e, t);
                    if (n || p.disconnectedMatch || e.document && 11 !== e.document.nodeType) return n
                } catch (e) {}
                return 0 < ie(t, T, null, [e]).length
            }, ie.contains = function(e, t) {
                return (e.ownerDocument || e) !== T && E(e), y(e, t)
            }, ie.attr = function(e, t) {
                (e.ownerDocument || e) !== T && E(e);
                var n = b.attrHandle[t.toLowerCase()],
                    i = n && I.call(b.attrHandle, t.toLowerCase()) ? n(e, t, !C) : void 0;
                return void 0 !== i ? i : p.attributes || !C ? e.getAttribute(t) : (i = e.getAttributeNode(t)) && i.specified ? i.value : null
            }, ie.error = function(e) {
                throw new Error("Syntax error, unrecognized expression: " + e)
            }, ie.uniqueSort = function(e) {
                var t, n = [],
                    i = 0,
                    r = 0;
                if (c = !p.detectDuplicates, l = !p.sortStable && e.slice(0), e.sort(N), c) {
                    for (; t = e[r++];) t === e[r] && (i = n.push(r));
                    for (; i--;) e.splice(n[i], 1)
                }
                return l = null, e
            }, o = ie.getText = function(e) {
                var t, n = "",
                    i = 0,
                    r = e.nodeType;
                if (r) {
                    if (1 === r || 9 === r || 11 === r) {
                        if ("string" == typeof e.textContent) return e.textContent;
                        for (e = e.firstChild; e; e = e.nextSibling) n += o(e)
                    } else if (3 === r || 4 === r) return e.nodeValue
                } else
                    for (; t = e[i++];) n += o(t);
                return n
            }, (b = ie.selectors = {
                cacheLength: 50,
                createPseudo: oe,
                match: X,
                attrHandle: {},
                find: {},
                relative: {
                    ">": {
                        dir: "parentNode",
                        first: !0
                    },
                    " ": {
                        dir: "parentNode"
                    },
                    "+": {
                        dir: "previousSibling",
                        first: !0
                    },
                    "~": {
                        dir: "previousSibling"
                    }
                },
                preFilter: {
                    ATTR: function(e) {
                        return e[1] = e[1].replace(ne, f), e[3] = (e[3] || e[4] || e[5] || "").replace(ne, f), "~=" === e[2] && (e[3] = " " + e[3] + " "), e.slice(0, 4)
                    },
                    CHILD: function(e) {
                        return e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3) ? (e[3] || ie.error(e[0]), e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && ie.error(e[0]), e
                    },
                    PSEUDO: function(e) {
                        var t, n = !e[6] && e[2];
                        return X.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || "" : n && Q.test(n) && (t = g(n, !0)) && (t = n.indexOf(")", n.length - t) - n.length) && (e[0] = e[0].slice(0, t), e[2] = n.slice(0, t)), e.slice(0, 3))
                    }
                },
                filter: {
                    TAG: function(e) {
                        var t = e.replace(ne, f).toLowerCase();
                        return "*" === e ? function() {
                            return !0
                        } : function(e) {
                            return e.nodeName && e.nodeName.toLowerCase() === t
                        }
                    },
                    CLASS: function(e) {
                        var t = A[e + " "];
                        return t || (t = new RegExp("(^|" + R + ")" + e + "(" + R + "|$)")) && A(e, function(e) {
                            return t.test("string" == typeof e.className && e.className || void 0 !== e.getAttribute && e.getAttribute("class") || "")
                        })
                    },
                    ATTR: function(n, i, r) {
                        return function(e) {
                            var t = ie.attr(e, n);
                            return null == t ? "!=" === i : !i || (t += "", "=" === i ? t === r : "!=" === i ? t !== r : "^=" === i ? r && 0 === t.indexOf(r) : "*=" === i ? r && -1 < t.indexOf(r) : "$=" === i ? r && t.slice(-r.length) === r : "~=" === i ? -1 < (" " + t.replace(B, " ") + " ").indexOf(r) : "|=" === i && (t === r || t.slice(0, r.length + 1) === r + "-"))
                        }
                    },
                    CHILD: function(p, e, t, g, m) {
                        var v = "nth" !== p.slice(0, 3),
                            y = "last" !== p.slice(-4),
                            _ = "of-type" === e;
                        return 1 === g && 0 === m ? function(e) {
                            return !!e.parentNode
                        } : function(e, t, n) {
                            var i, r, o, s, a, l, c = v != y ? "nextSibling" : "previousSibling",
                                u = e.parentNode,
                                f = _ && e.nodeName.toLowerCase(),
                                d = !n && !_,
                                h = !1;
                            if (u) {
                                if (v) {
                                    for (; c;) {
                                        for (s = e; s = s[c];)
                                            if (_ ? s.nodeName.toLowerCase() === f : 1 === s.nodeType) return !1;
                                        l = c = "only" === p && !l && "nextSibling"
                                    }
                                    return !0
                                }
                                if (l = [y ? u.firstChild : u.lastChild], y && d) {
                                    for (h = (a = (i = (r = (o = (s = u)[x] || (s[x] = {}))[s.uniqueID] || (o[s.uniqueID] = {}))[p] || [])[0] === S && i[1]) && i[2], s = a && u.childNodes[a]; s = ++a && s && s[c] || (h = a = 0) || l.pop();)
                                        if (1 === s.nodeType && ++h && s === e) {
                                            r[p] = [S, a, h];
                                            break
                                        }
                                } else if (d && (h = a = (i = (r = (o = (s = e)[x] || (s[x] = {}))[s.uniqueID] || (o[s.uniqueID] = {}))[p] || [])[0] === S && i[1]), !1 === h)
                                    for (;
                                        (s = ++a && s && s[c] || (h = a = 0) || l.pop()) && ((_ ? s.nodeName.toLowerCase() !== f : 1 !== s.nodeType) || !++h || (d && ((r = (o = s[x] || (s[x] = {}))[s.uniqueID] || (o[s.uniqueID] = {}))[p] = [S, h]), s !== e)););
                                return (h -= m) === g || h % g == 0 && 0 <= h / g
                            }
                        }
                    },
                    PSEUDO: function(e, o) {
                        var t, s = b.pseudos[e] || b.setFilters[e.toLowerCase()] || ie.error("unsupported pseudo: " + e);
                        return s[x] ? s(o) : 1 < s.length ? (t = [e, e, "", o], b.setFilters.hasOwnProperty(e.toLowerCase()) ? oe(function(e, t) {
                            for (var n, i = s(e, o), r = i.length; r--;) e[n = H(e, i[r])] = !(t[n] = i[r])
                        }) : function(e) {
                            return s(e, 0, t)
                        }) : s
                    }
                },
                pseudos: {
                    not: oe(function(e) {
                        var i = [],
                            r = [],
                            a = d(e.replace(U, "$1"));
                        return a[x] ? oe(function(e, t, n, i) {
                            for (var r, o = a(e, null, i, []), s = e.length; s--;)(r = o[s]) && (e[s] = !(t[s] = r))
                        }) : function(e, t, n) {
                            return i[0] = e, a(i, null, n, r), i[0] = null, !r.pop()
                        }
                    }),
                    has: oe(function(t) {
                        return function(e) {
                            return 0 < ie(t, e).length
                        }
                    }),
                    contains: oe(function(t) {
                        return t = t.replace(ne, f),
                            function(e) {
                                return -1 < (e.textContent || e.innerText || o(e)).indexOf(t)
                            }
                    }),
                    lang: oe(function(n) {
                        return V.test(n || "") || ie.error("unsupported lang: " + n), n = n.replace(ne, f).toLowerCase(),
                            function(e) {
                                var t;
                                do {
                                    if (t = C ? e.lang : e.getAttribute("xml:lang") || e.getAttribute("lang")) return (t = t.toLowerCase()) === n || 0 === t.indexOf(n + "-")
                                } while ((e = e.parentNode) && 1 === e.nodeType);
                                return !1
                            }
                    }),
                    target: function(e) {
                        var t = n.location && n.location.hash;
                        return t && t.slice(1) === e.id
                    },
                    root: function(e) {
                        return e === a
                    },
                    focus: function(e) {
                        return e === T.activeElement && (!T.hasFocus || T.hasFocus()) && !!(e.type || e.href || ~e.tabIndex)
                    },
                    enabled: function(e) {
                        return !1 === e.disabled
                    },
                    disabled: function(e) {
                        return !0 === e.disabled
                    },
                    checked: function(e) {
                        var t = e.nodeName.toLowerCase();
                        return "input" === t && !!e.checked || "option" === t && !!e.selected
                    },
                    selected: function(e) {
                        return e.parentNode && e.parentNode.selectedIndex, !0 === e.selected
                    },
                    empty: function(e) {
                        for (e = e.firstChild; e; e = e.nextSibling)
                            if (e.nodeType < 6) return !1;
                        return !0
                    },
                    parent: function(e) {
                        return !b.pseudos.empty(e)
                    },
                    header: function(e) {
                        return G.test(e.nodeName)
                    },
                    input: function(e) {
                        return Y.test(e.nodeName)
                    },
                    button: function(e) {
                        var t = e.nodeName.toLowerCase();
                        return "input" === t && "button" === e.type || "button" === t
                    },
                    text: function(e) {
                        var t;
                        return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (t = e.getAttribute("type")) || "text" === t.toLowerCase())
                    },
                    first: fe(function() {
                        return [0]
                    }),
                    last: fe(function(e, t) {
                        return [t - 1]
                    }),
                    eq: fe(function(e, t, n) {
                        return [n < 0 ? n + t : n]
                    }),
                    even: fe(function(e, t) {
                        for (var n = 0; n < t; n += 2) e.push(n);
                        return e
                    }),
                    odd: fe(function(e, t) {
                        for (var n = 1; n < t; n += 2) e.push(n);
                        return e
                    }),
                    lt: fe(function(e, t, n) {
                        for (var i = n < 0 ? n + t : n; 0 <= --i;) e.push(i);
                        return e
                    }),
                    gt: fe(function(e, t, n) {
                        for (var i = n < 0 ? n + t : n; ++i < t;) e.push(i);
                        return e
                    })
                }
            }).pseudos.nth = b.pseudos.eq, {
                radio: !0,
                checkbox: !0,
                file: !0,
                password: !0,
                image: !0
            }) b.pseudos[e] = ce(e);
        for (e in {
                submit: !0,
                reset: !0
            }) b.pseudos[e] = ue(e);

        function he() {}

        function pe(e) {
            for (var t = 0, n = e.length, i = ""; t < n; t++) i += e[t].value;
            return i
        }

        function ge(a, e, t) {
            var l = e.dir,
                c = t && "parentNode" === l,
                u = i++;
            return e.first ? function(e, t, n) {
                for (; e = e[l];)
                    if (1 === e.nodeType || c) return a(e, t, n)
            } : function(e, t, n) {
                var i, r, o, s = [S, u];
                if (n) {
                    for (; e = e[l];)
                        if ((1 === e.nodeType || c) && a(e, t, n)) return !0
                } else
                    for (; e = e[l];)
                        if (1 === e.nodeType || c) {
                            if ((i = (r = (o = e[x] || (e[x] = {}))[e.uniqueID] || (o[e.uniqueID] = {}))[l]) && i[0] === S && i[1] === u) return s[2] = i[2];
                            if ((r[l] = s)[2] = a(e, t, n)) return !0
                        }
            }
        }

        function me(r) {
            return 1 < r.length ? function(e, t, n) {
                for (var i = r.length; i--;)
                    if (!r[i](e, t, n)) return !1;
                return !0
            } : r[0]
        }

        function ve(e, t, n, i, r) {
            for (var o, s = [], a = 0, l = e.length, c = null != t; a < l; a++)(o = e[a]) && (n && !n(o, i, r) || (s.push(o), c && t.push(a)));
            return s
        }

        function ye(h, p, g, m, v, e) {
            return m && !m[x] && (m = ye(m)), v && !v[x] && (v = ye(v, e)), oe(function(e, t, n, i) {
                var r, o, s, a = [],
                    l = [],
                    c = t.length,
                    u = e || function(e, t, n) {
                        for (var i = 0, r = t.length; i < r; i++) ie(e, t[i], n);
                        return n
                    }(p || "*", n.nodeType ? [n] : n, []),
                    f = !h || !e && p ? u : ve(u, a, h, n, i),
                    d = g ? v || (e ? h : c || m) ? [] : t : f;
                if (g && g(f, d, n, i), m)
                    for (r = ve(d, l), m(r, [], n, i), o = r.length; o--;)(s = r[o]) && (d[l[o]] = !(f[l[o]] = s));
                if (e) {
                    if (v || h) {
                        if (v) {
                            for (r = [], o = d.length; o--;)(s = d[o]) && r.push(f[o] = s);
                            v(null, d = [], r, i)
                        }
                        for (o = d.length; o--;)(s = d[o]) && -1 < (r = v ? H(e, s) : a[o]) && (e[r] = !(t[r] = s))
                    }
                } else d = ve(d === t ? d.splice(c, d.length) : d), v ? v(null, t, d, i) : L.apply(t, d)
            })
        }

        function _e(e) {
            for (var r, t, n, i = e.length, o = b.relative[e[0].type], s = o || b.relative[" "], a = o ? 1 : 0, l = ge(function(e) {
                    return e === r
                }, s, !0), c = ge(function(e) {
                    return -1 < H(r, e)
                }, s, !0), u = [function(e, t, n) {
                    var i = !o && (n || t !== w) || ((r = t).nodeType ? l : c)(e, t, n);
                    return r = null, i
                }]; a < i; a++)
                if (t = b.relative[e[a].type]) u = [ge(me(u), t)];
                else {
                    if ((t = b.filter[e[a].type].apply(null, e[a].matches))[x]) {
                        for (n = ++a; n < i && !b.relative[e[n].type]; n++);
                        return ye(1 < a && me(u), 1 < a && pe(e.slice(0, a - 1).concat({
                            value: " " === e[a - 2].type ? "*" : ""
                        })).replace(U, "$1"), t, a < n && _e(e.slice(a, n)), n < i && _e(e = e.slice(n)), n < i && pe(e))
                    }
                    u.push(t)
                } return me(u)
        }

        function be(m, v) {
            function e(e, t, n, i, r) {
                var o, s, a, l = 0,
                    c = "0",
                    u = e && [],
                    f = [],
                    d = w,
                    h = e || _ && b.find.TAG("*", r),
                    p = S += null == d ? 1 : Math.random() || .1,
                    g = h.length;
                for (r && (w = t === T || t || r); c !== g && null != (o = h[c]); c++) {
                    if (_ && o) {
                        for (s = 0, t || o.ownerDocument === T || (E(o), n = !C); a = m[s++];)
                            if (a(o, t || T, n)) {
                                i.push(o);
                                break
                            } r && (S = p)
                    }
                    y && ((o = !a && o) && l--, e && u.push(o))
                }
                if (l += c, y && c !== l) {
                    for (s = 0; a = v[s++];) a(u, f, t, n);
                    if (e) {
                        if (0 < l)
                            for (; c--;) u[c] || f[c] || (f[c] = O.call(i));
                        f = ve(f)
                    }
                    L.apply(i, f), r && !e && 0 < f.length && 1 < l + v.length && ie.uniqueSort(i)
                }
                return r && (S = p, w = d), u
            }
            var y = 0 < v.length,
                _ = 0 < m.length;
            return y ? oe(e) : e
        }
        return he.prototype = b.filters = b.pseudos, b.setFilters = new he, g = ie.tokenize = function(e, t) {
            var n, i, r, o, s, a, l, c = D[e + " "];
            if (c) return t ? 0 : c.slice(0);
            for (s = e, a = [], l = b.preFilter; s;) {
                for (o in n && !(i = $.exec(s)) || (i && (s = s.slice(i[0].length) || s), a.push(r = [])), n = !1, (i = z.exec(s)) && (n = i.shift(), r.push({
                        value: n,
                        type: i[0].replace(U, " ")
                    }), s = s.slice(n.length)), b.filter) !(i = X[o].exec(s)) || l[o] && !(i = l[o](i)) || (n = i.shift(), r.push({
                    value: n,
                    type: o,
                    matches: i
                }), s = s.slice(n.length));
                if (!n) break
            }
            return t ? s.length : s ? ie.error(e) : D(e, a).slice(0)
        }, d = ie.compile = function(e, t) {
            var n, i = [],
                r = [],
                o = k[e + " "];
            if (!o) {
                for (n = (t = t || g(e)).length; n--;)(o = _e(t[n]))[x] ? i.push(o) : r.push(o);
                (o = k(e, be(r, i))).selector = e
            }
            return o
        }, m = ie.select = function(e, t, n, i) {
            var r, o, s, a, l, c = "function" == typeof e && e,
                u = !i && g(e = c.selector || e);
            if (n = n || [], 1 === u.length) {
                if (2 < (o = u[0] = u[0].slice(0)).length && "ID" === (s = o[0]).type && p.getById && 9 === t.nodeType && C && b.relative[o[1].type]) {
                    if (!(t = (b.find.ID(s.matches[0].replace(ne, f), t) || [])[0])) return n;
                    c && (t = t.parentNode), e = e.slice(o.shift().value.length)
                }
                for (r = X.needsContext.test(e) ? 0 : o.length; r-- && (s = o[r], !b.relative[a = s.type]);)
                    if ((l = b.find[a]) && (i = l(s.matches[0].replace(ne, f), ee.test(o[0].type) && de(t.parentNode) || t))) {
                        if (o.splice(r, 1), !(e = i.length && pe(o))) return L.apply(n, i), n;
                        break
                    }
            }
            return (c || d(e, u))(i, t, !C, n, !t || ee.test(e) && de(t.parentNode) || t), n
        }, p.sortStable = x.split("").sort(N).join("") === x, p.detectDuplicates = !!c, E(), p.sortDetached = se(function(e) {
            return 1 & e.compareDocumentPosition(T.createElement("div"))
        }), se(function(e) {
            return e.innerHTML = "<a href='#'></a>", "#" === e.firstChild.getAttribute("href")
        }) || ae("type|href|height|width", function(e, t, n) {
            if (!n) return e.getAttribute(t, "type" === t.toLowerCase() ? 1 : 2)
        }), p.attributes && se(function(e) {
            return e.innerHTML = "<input/>", e.firstChild.setAttribute("value", ""), "" === e.firstChild.getAttribute("value")
        }) || ae("value", function(e, t, n) {
            if (!n && "input" === e.nodeName.toLowerCase()) return e.defaultValue
        }), se(function(e) {
            return null == e.getAttribute("disabled")
        }) || ae(q, function(e, t, n) {
            var i;
            if (!n) return !0 === e[t] ? t.toLowerCase() : (i = e.getAttributeNode(t)) && i.specified ? i.value : null
        }), ie
    }(T);
    x.find = h, x.expr = h.selectors, x.expr[":"] = x.expr.pseudos, x.uniqueSort = x.unique = h.uniqueSort, x.text = h.getText, x.isXMLDoc = h.isXML, x.contains = h.contains;

    function v(e, t, n) {
        for (var i = [], r = void 0 !== n;
            (e = e[t]) && 9 !== e.nodeType;)
            if (1 === e.nodeType) {
                if (r && x(e).is(n)) break;
                i.push(e)
            } return i
    }

    function y(e, t) {
        for (var n = []; e; e = e.nextSibling) 1 === e.nodeType && e !== t && n.push(e);
        return n
    }
    var _ = x.expr.match.needsContext,
        b = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,
        w = /^.[^:#\[\.,]*$/;

    function E(e, n, i) {
        if (x.isFunction(n)) return x.grep(e, function(e, t) {
            return !!n.call(e, t, e) !== i
        });
        if (n.nodeType) return x.grep(e, function(e) {
            return e === n !== i
        });
        if ("string" == typeof n) {
            if (w.test(n)) return x.filter(n, e, i);
            n = x.filter(n, e)
        }
        return x.grep(e, function(e) {
            return -1 < r.call(n, e) !== i
        })
    }
    x.filter = function(e, t, n) {
        var i = t[0];
        return n && (e = ":not(" + e + ")"), 1 === t.length && 1 === i.nodeType ? x.find.matchesSelector(i, e) ? [i] : [] : x.find.matches(e, x.grep(t, function(e) {
            return 1 === e.nodeType
        }))
    }, x.fn.extend({
        find: function(e) {
            var t, n = this.length,
                i = [],
                r = this;
            if ("string" != typeof e) return this.pushStack(x(e).filter(function() {
                for (t = 0; t < n; t++)
                    if (x.contains(r[t], this)) return !0
            }));
            for (t = 0; t < n; t++) x.find(e, r[t], i);
            return (i = this.pushStack(1 < n ? x.unique(i) : i)).selector = this.selector ? this.selector + " " + e : e, i
        },
        filter: function(e) {
            return this.pushStack(E(this, e || [], !1))
        },
        not: function(e) {
            return this.pushStack(E(this, e || [], !0))
        },
        is: function(e) {
            return !!E(this, "string" == typeof e && _.test(e) ? x(e) : e || [], !1).length
        }
    });
    var S, A = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;
    (x.fn.init = function(e, t, n) {
        var i, r;
        if (!e) return this;
        if (n = n || S, "string" != typeof e) return e.nodeType ? (this.context = this[0] = e, this.length = 1, this) : x.isFunction(e) ? void 0 !== n.ready ? n.ready(e) : e(x) : (void 0 !== e.selector && (this.selector = e.selector, this.context = e.context), x.makeArray(e, this));
        if (!(i = "<" === e[0] && ">" === e[e.length - 1] && 3 <= e.length ? [null, e, null] : A.exec(e)) || !i[1] && t) return !t || t.jquery ? (t || n).find(e) : this.constructor(t).find(e);
        if (i[1]) {
            if (t = t instanceof x ? t[0] : t, x.merge(this, x.parseHTML(i[1], t && t.nodeType ? t.ownerDocument || t : C, !0)), b.test(i[1]) && x.isPlainObject(t))
                for (i in t) x.isFunction(this[i]) ? this[i](t[i]) : this.attr(i, t[i]);
            return this
        }
        return (r = C.getElementById(i[2])) && r.parentNode && (this.length = 1, this[0] = r), this.context = C, this.selector = e, this
    }).prototype = x.fn, S = x(C);
    var D = /^(?:parents|prev(?:Until|All))/,
        k = {
            children: !0,
            contents: !0,
            next: !0,
            prev: !0
        };

    function N(e, t) {
        for (;
            (e = e[t]) && 1 !== e.nodeType;);
        return e
    }
    x.fn.extend({
        has: function(e) {
            var t = x(e, this),
                n = t.length;
            return this.filter(function() {
                for (var e = 0; e < n; e++)
                    if (x.contains(this, t[e])) return !0
            })
        },
        closest: function(e, t) {
            for (var n, i = 0, r = this.length, o = [], s = _.test(e) || "string" != typeof e ? x(e, t || this.context) : 0; i < r; i++)
                for (n = this[i]; n && n !== t; n = n.parentNode)
                    if (n.nodeType < 11 && (s ? -1 < s.index(n) : 1 === n.nodeType && x.find.matchesSelector(n, e))) {
                        o.push(n);
                        break
                    } return this.pushStack(1 < o.length ? x.uniqueSort(o) : o)
        },
        index: function(e) {
            return e ? "string" == typeof e ? r.call(x(e), this[0]) : r.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1
        },
        add: function(e, t) {
            return this.pushStack(x.uniqueSort(x.merge(this.get(), x(e, t))))
        },
        addBack: function(e) {
            return this.add(null == e ? this.prevObject : this.prevObject.filter(e))
        }
    }), x.each({
        parent: function(e) {
            var t = e.parentNode;
            return t && 11 !== t.nodeType ? t : null
        },
        parents: function(e) {
            return v(e, "parentNode")
        },
        parentsUntil: function(e, t, n) {
            return v(e, "parentNode", n)
        },
        next: function(e) {
            return N(e, "nextSibling")
        },
        prev: function(e) {
            return N(e, "previousSibling")
        },
        nextAll: function(e) {
            return v(e, "nextSibling")
        },
        prevAll: function(e) {
            return v(e, "previousSibling")
        },
        nextUntil: function(e, t, n) {
            return v(e, "nextSibling", n)
        },
        prevUntil: function(e, t, n) {
            return v(e, "previousSibling", n)
        },
        siblings: function(e) {
            return y((e.parentNode || {}).firstChild, e)
        },
        children: function(e) {
            return y(e.firstChild)
        },
        contents: function(e) {
            return e.contentDocument || x.merge([], e.childNodes)
        }
    }, function(i, r) {
        x.fn[i] = function(e, t) {
            var n = x.map(this, r, e);
            return "Until" !== i.slice(-5) && (t = e), t && "string" == typeof t && (n = x.filter(t, n)), 1 < this.length && (k[i] || x.uniqueSort(n), D.test(i) && n.reverse()), this.pushStack(n)
        }
    });
    var I, O = /\S+/g;

    function j() {
        C.removeEventListener("DOMContentLoaded", j), T.removeEventListener("load", j), x.ready()
    }
    x.Callbacks = function(i) {
        var e, n;
        i = "string" == typeof i ? (e = i, n = {}, x.each(e.match(O) || [], function(e, t) {
            n[t] = !0
        }), n) : x.extend({}, i);

        function r() {
            for (a = i.once, s = o = !0; c.length; u = -1)
                for (t = c.shift(); ++u < l.length;) !1 === l[u].apply(t[0], t[1]) && i.stopOnFalse && (u = l.length, t = !1);
            i.memory || (t = !1), o = !1, a && (l = t ? [] : "")
        }
        var o, t, s, a, l = [],
            c = [],
            u = -1,
            f = {
                add: function() {
                    return l && (t && !o && (u = l.length - 1, c.push(t)), function n(e) {
                        x.each(e, function(e, t) {
                            x.isFunction(t) ? i.unique && f.has(t) || l.push(t) : t && t.length && "string" !== x.type(t) && n(t)
                        })
                    }(arguments), t && !o && r()), this
                },
                remove: function() {
                    return x.each(arguments, function(e, t) {
                        for (var n; - 1 < (n = x.inArray(t, l, n));) l.splice(n, 1), n <= u && u--
                    }), this
                },
                has: function(e) {
                    return e ? -1 < x.inArray(e, l) : 0 < l.length
                },
                empty: function() {
                    return l = l && [], this
                },
                disable: function() {
                    return a = c = [], l = t = "", this
                },
                disabled: function() {
                    return !l
                },
                lock: function() {
                    return a = c = [], t || (l = t = ""), this
                },
                locked: function() {
                    return !!a
                },
                fireWith: function(e, t) {
                    return a || (t = [e, (t = t || []).slice ? t.slice() : t], c.push(t), o || r()), this
                },
                fire: function() {
                    return f.fireWith(this, arguments), this
                },
                fired: function() {
                    return !!s
                }
            };
        return f
    }, x.extend({
        Deferred: function(e) {
            var o = [
                    ["resolve", "done", x.Callbacks("once memory"), "resolved"],
                    ["reject", "fail", x.Callbacks("once memory"), "rejected"],
                    ["notify", "progress", x.Callbacks("memory")]
                ],
                r = "pending",
                s = {
                    state: function() {
                        return r
                    },
                    always: function() {
                        return a.done(arguments).fail(arguments), this
                    },
                    then: function() {
                        var r = arguments;
                        return x.Deferred(function(i) {
                            x.each(o, function(e, t) {
                                var n = x.isFunction(r[e]) && r[e];
                                a[t[1]](function() {
                                    var e = n && n.apply(this, arguments);
                                    e && x.isFunction(e.promise) ? e.promise().progress(i.notify).done(i.resolve).fail(i.reject) : i[t[0] + "With"](this === s ? i.promise() : this, n ? [e] : arguments)
                                })
                            }), r = null
                        }).promise()
                    },
                    promise: function(e) {
                        return null != e ? x.extend(e, s) : s
                    }
                },
                a = {};
            return s.pipe = s.then, x.each(o, function(e, t) {
                var n = t[2],
                    i = t[3];
                s[t[1]] = n.add, i && n.add(function() {
                    r = i
                }, o[1 ^ e][2].disable, o[2][2].lock), a[t[0]] = function() {
                    return a[t[0] + "With"](this === a ? s : this, arguments), this
                }, a[t[0] + "With"] = n.fireWith
            }), s.promise(a), e && e.call(a, a), a
        },
        when: function(e) {
            function t(t, n, i) {
                return function(e) {
                    n[t] = this, i[t] = 1 < arguments.length ? u.call(arguments) : e, i === r ? c.notifyWith(n, i) : --l || c.resolveWith(n, i)
                }
            }
            var r, n, i, o = 0,
                s = u.call(arguments),
                a = s.length,
                l = 1 !== a || e && x.isFunction(e.promise) ? a : 0,
                c = 1 === l ? e : x.Deferred();
            if (1 < a)
                for (r = new Array(a), n = new Array(a), i = new Array(a); o < a; o++) s[o] && x.isFunction(s[o].promise) ? s[o].promise().progress(t(o, n, r)).done(t(o, i, s)).fail(c.reject) : --l;
            return l || c.resolveWith(i, s), c.promise()
        }
    }), x.fn.ready = function(e) {
        return x.ready.promise().done(e), this
    }, x.extend({
        isReady: !1,
        readyWait: 1,
        holdReady: function(e) {
            e ? x.readyWait++ : x.ready(!0)
        },
        ready: function(e) {
            (!0 === e ? --x.readyWait : x.isReady) || (x.isReady = !0) !== e && 0 < --x.readyWait || (I.resolveWith(C, [x]), x.fn.triggerHandler && (x(C).triggerHandler("ready"), x(C).off("ready")))
        }
    }), x.ready.promise = function(e) {
        return I || (I = x.Deferred(), "complete" === C.readyState || "loading" !== C.readyState && !C.documentElement.doScroll ? T.setTimeout(x.ready) : (C.addEventListener("DOMContentLoaded", j), T.addEventListener("load", j))), I.promise(e)
    }, x.ready.promise();

    function L(e) {
        return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType
    }
    var P = function(e, t, n, i, r, o, s) {
        var a = 0,
            l = e.length,
            c = null == n;
        if ("object" === x.type(n))
            for (a in r = !0, n) P(e, t, a, n[a], !0, o, s);
        else if (void 0 !== i && (r = !0, x.isFunction(i) || (s = !0), c && (t = s ? (t.call(e, i), null) : (c = t, function(e, t, n) {
                return c.call(x(e), n)
            })), t))
            for (; a < l; a++) t(e[a], n, s ? i : i.call(e[a], a, t(e[a], n)));
        return r ? e : c ? t.call(e) : l ? t(e[0], n) : o
    };

    function H() {
        this.expando = x.expando + H.uid++
    }
    H.uid = 1, H.prototype = {
        register: function(e, t) {
            var n = t || {};
            return e.nodeType ? e[this.expando] = n : Object.defineProperty(e, this.expando, {
                value: n,
                writable: !0,
                configurable: !0
            }), e[this.expando]
        },
        cache: function(e) {
            if (!L(e)) return {};
            var t = e[this.expando];
            return t || (t = {}, L(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, {
                value: t,
                configurable: !0
            }))), t
        },
        set: function(e, t, n) {
            var i, r = this.cache(e);
            if ("string" == typeof t) r[t] = n;
            else
                for (i in t) r[i] = t[i];
            return r
        },
        get: function(e, t) {
            return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][t]
        },
        access: function(e, t, n) {
            var i;
            return void 0 === t || t && "string" == typeof t && void 0 === n ? void 0 !== (i = this.get(e, t)) ? i : this.get(e, x.camelCase(t)) : (this.set(e, t, n), void 0 !== n ? n : t)
        },
        remove: function(e, t) {
            var n, i, r, o = e[this.expando];
            if (void 0 !== o) {
                if (void 0 === t) this.register(e);
                else {
                    n = (i = x.isArray(t) ? t.concat(t.map(x.camelCase)) : (r = x.camelCase(t), t in o ? [t, r] : (i = r) in o ? [i] : i.match(O) || [])).length;
                    for (; n--;) delete o[i[n]]
                }
                void 0 !== t && !x.isEmptyObject(o) || (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando])
            }
        },
        hasData: function(e) {
            var t = e[this.expando];
            return void 0 !== t && !x.isEmptyObject(t)
        }
    };
    var q = new H,
        R = new H,
        F = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        M = /[A-Z]/g;

    function W(e, t, n) {
        var i;
        if (void 0 === n && 1 === e.nodeType)
            if (i = "data-" + t.replace(M, "-$&").toLowerCase(), "string" == typeof(n = e.getAttribute(i))) {
                try {
                    n = "true" === n || "false" !== n && ("null" === n ? null : +n + "" === n ? +n : F.test(n) ? x.parseJSON(n) : n)
                } catch (e) {}
                R.set(e, t, n)
            } else n = void 0;
        return n
    }
    x.extend({
        hasData: function(e) {
            return R.hasData(e) || q.hasData(e)
        },
        data: function(e, t, n) {
            return R.access(e, t, n)
        },
        removeData: function(e, t) {
            R.remove(e, t)
        },
        _data: function(e, t, n) {
            return q.access(e, t, n)
        },
        _removeData: function(e, t) {
            q.remove(e, t)
        }
    }), x.fn.extend({
        data: function(i, e) {
            var t, n, r, o = this[0],
                s = o && o.attributes;
            if (void 0 !== i) return "object" == typeof i ? this.each(function() {
                R.set(this, i)
            }) : P(this, function(t) {
                var e, n;
                if (o && void 0 === t) return void 0 !== (e = R.get(o, i) || R.get(o, i.replace(M, "-$&").toLowerCase())) ? e : (n = x.camelCase(i), void 0 !== (e = R.get(o, n)) || void 0 !== (e = W(o, n, void 0)) ? e : void 0);
                n = x.camelCase(i), this.each(function() {
                    var e = R.get(this, n);
                    R.set(this, n, t), -1 < i.indexOf("-") && void 0 !== e && R.set(this, i, t)
                })
            }, null, e, 1 < arguments.length, null, !0);
            if (this.length && (r = R.get(o), 1 === o.nodeType && !q.get(o, "hasDataAttrs"))) {
                for (t = s.length; t--;) s[t] && 0 === (n = s[t].name).indexOf("data-") && (n = x.camelCase(n.slice(5)), W(o, n, r[n]));
                q.set(o, "hasDataAttrs", !0)
            }
            return r
        },
        removeData: function(e) {
            return this.each(function() {
                R.remove(this, e)
            })
        }
    }), x.extend({
        queue: function(e, t, n) {
            var i;
            if (e) return t = (t || "fx") + "queue", i = q.get(e, t), n && (!i || x.isArray(n) ? i = q.access(e, t, x.makeArray(n)) : i.push(n)), i || []
        },
        dequeue: function(e, t) {
            t = t || "fx";
            var n = x.queue(e, t),
                i = n.length,
                r = n.shift(),
                o = x._queueHooks(e, t);
            "inprogress" === r && (r = n.shift(), i--), r && ("fx" === t && n.unshift("inprogress"), delete o.stop, r.call(e, function() {
                x.dequeue(e, t)
            }, o)), !i && o && o.empty.fire()
        },
        _queueHooks: function(e, t) {
            var n = t + "queueHooks";
            return q.get(e, n) || q.access(e, n, {
                empty: x.Callbacks("once memory").add(function() {
                    q.remove(e, [t + "queue", n])
                })
            })
        }
    }), x.fn.extend({
        queue: function(t, n) {
            var e = 2;
            return "string" != typeof t && (n = t, t = "fx", e--), arguments.length < e ? x.queue(this[0], t) : void 0 === n ? this : this.each(function() {
                var e = x.queue(this, t, n);
                x._queueHooks(this, t), "fx" === t && "inprogress" !== e[0] && x.dequeue(this, t)
            })
        },
        dequeue: function(e) {
            return this.each(function() {
                x.dequeue(this, e)
            })
        },
        clearQueue: function(e) {
            return this.queue(e || "fx", [])
        },
        promise: function(e, t) {
            function n() {
                --r || o.resolveWith(s, [s])
            }
            var i, r = 1,
                o = x.Deferred(),
                s = this,
                a = this.length;
            for ("string" != typeof e && (t = e, e = void 0), e = e || "fx"; a--;)(i = q.get(s[a], e + "queueHooks")) && i.empty && (r++, i.empty.add(n));
            return n(), o.promise(t)
        }
    });

    function B(e, t) {
        return e = t || e, "none" === x.css(e, "display") || !x.contains(e.ownerDocument, e)
    }
    var U = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
        $ = new RegExp("^(?:([+-])=|)(" + U + ")([a-z%]*)$", "i"),
        z = ["Top", "Right", "Bottom", "Left"];

    function K(e, t, n, i) {
        var r, o = 1,
            s = 20,
            a = i ? function() {
                return i.cur()
            } : function() {
                return x.css(e, t, "")
            },
            l = a(),
            c = n && n[3] || (x.cssNumber[t] ? "" : "px"),
            u = (x.cssNumber[t] || "px" !== c && +l) && $.exec(x.css(e, t));
        if (u && u[3] !== c)
            for (c = c || u[3], n = n || [], u = +l || 1; u /= o = o || ".5", x.style(e, t, u + c), o !== (o = a() / l) && 1 !== o && --s;);
        return n && (u = +u || +l || 0, r = n[1] ? u + (n[1] + 1) * n[2] : +n[2], i && (i.unit = c, i.start = u, i.end = r)), r
    }
    var Q = /^(?:checkbox|radio)$/i,
        V = /<([\w:-]+)/,
        X = /^$|\/(?:java|ecma)script/i,
        Y = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            thead: [1, "<table>", "</table>"],
            col: [2, "<table><colgroup>", "</colgroup></table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            _default: [0, "", ""]
        };

    function G(e, t) {
        var n = void 0 !== e.getElementsByTagName ? e.getElementsByTagName(t || "*") : void 0 !== e.querySelectorAll ? e.querySelectorAll(t || "*") : [];
        return void 0 === t || t && x.nodeName(e, t) ? x.merge([e], n) : n
    }

    function J(e, t) {
        for (var n = 0, i = e.length; n < i; n++) q.set(e[n], "globalEval", !t || q.get(t[n], "globalEval"))
    }
    Y.optgroup = Y.option, Y.tbody = Y.tfoot = Y.colgroup = Y.caption = Y.thead, Y.th = Y.td;
    var Z, ee, te = /<|&#?\w+;/;

    function ne(e, t, n, i, r) {
        for (var o, s, a, l, c, u, f = t.createDocumentFragment(), d = [], h = 0, p = e.length; h < p; h++)
            if ((o = e[h]) || 0 === o)
                if ("object" === x.type(o)) x.merge(d, o.nodeType ? [o] : o);
                else if (te.test(o)) {
            for (s = s || f.appendChild(t.createElement("div")), a = (V.exec(o) || ["", ""])[1].toLowerCase(), l = Y[a] || Y._default, s.innerHTML = l[1] + x.htmlPrefilter(o) + l[2], u = l[0]; u--;) s = s.lastChild;
            x.merge(d, s.childNodes), (s = f.firstChild).textContent = ""
        } else d.push(t.createTextNode(o));
        for (f.textContent = "", h = 0; o = d[h++];)
            if (i && -1 < x.inArray(o, i)) r && r.push(o);
            else if (c = x.contains(o.ownerDocument, o), s = G(f.appendChild(o), "script"), c && J(s), n)
            for (u = 0; o = s[u++];) X.test(o.type || "") && n.push(o);
        return f
    }
    Z = C.createDocumentFragment().appendChild(C.createElement("div")), (ee = C.createElement("input")).setAttribute("type", "radio"), ee.setAttribute("checked", "checked"), ee.setAttribute("name", "t"), Z.appendChild(ee), m.checkClone = Z.cloneNode(!0).cloneNode(!0).lastChild.checked, Z.innerHTML = "<textarea>x</textarea>", m.noCloneChecked = !!Z.cloneNode(!0).lastChild.defaultValue;
    var ie = /^key/,
        re = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
        oe = /^([^.]*)(?:\.(.+)|)/;

    function se() {
        return !0
    }

    function ae() {
        return !1
    }

    function le() {
        try {
            return C.activeElement
        } catch (e) {}
    }

    function ce(e, t, n, i, r, o) {
        var s, a;
        if ("object" == typeof t) {
            for (a in "string" != typeof n && (i = i || n, n = void 0), t) ce(e, a, n, i, t[a], o);
            return e
        }
        if (null == i && null == r ? (r = n, i = n = void 0) : null == r && ("string" == typeof n ? (r = i, i = void 0) : (r = i, i = n, n = void 0)), !1 === r) r = ae;
        else if (!r) return e;
        return 1 === o && (s = r, (r = function(e) {
            return x().off(e), s.apply(this, arguments)
        }).guid = s.guid || (s.guid = x.guid++)), e.each(function() {
            x.event.add(this, t, r, i, n)
        })
    }
    x.event = {
        global: {},
        add: function(t, e, n, i, r) {
            var o, s, a, l, c, u, f, d, h, p, g, m = q.get(t);
            if (m)
                for (n.handler && (n = (o = n).handler, r = o.selector), n.guid || (n.guid = x.guid++), (l = m.events) || (l = m.events = {}), (s = m.handle) || (s = m.handle = function(e) {
                        return void 0 !== x && x.event.triggered !== e.type ? x.event.dispatch.apply(t, arguments) : void 0
                    }), c = (e = (e || "").match(O) || [""]).length; c--;) h = g = (a = oe.exec(e[c]) || [])[1], p = (a[2] || "").split(".").sort(), h && (f = x.event.special[h] || {}, h = (r ? f.delegateType : f.bindType) || h, f = x.event.special[h] || {}, u = x.extend({
                    type: h,
                    origType: g,
                    data: i,
                    handler: n,
                    guid: n.guid,
                    selector: r,
                    needsContext: r && x.expr.match.needsContext.test(r),
                    namespace: p.join(".")
                }, o), (d = l[h]) || ((d = l[h] = []).delegateCount = 0, f.setup && !1 !== f.setup.call(t, i, p, s) || t.addEventListener && t.addEventListener(h, s)), f.add && (f.add.call(t, u), u.handler.guid || (u.handler.guid = n.guid)), r ? d.splice(d.delegateCount++, 0, u) : d.push(u), x.event.global[h] = !0)
        },
        remove: function(e, t, n, i, r) {
            var o, s, a, l, c, u, f, d, h, p, g, m = q.hasData(e) && q.get(e);
            if (m && (l = m.events)) {
                for (c = (t = (t || "").match(O) || [""]).length; c--;)
                    if (h = g = (a = oe.exec(t[c]) || [])[1], p = (a[2] || "").split(".").sort(), h) {
                        for (f = x.event.special[h] || {}, d = l[h = (i ? f.delegateType : f.bindType) || h] || [], a = a[2] && new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"), s = o = d.length; o--;) u = d[o], !r && g !== u.origType || n && n.guid !== u.guid || a && !a.test(u.namespace) || i && i !== u.selector && ("**" !== i || !u.selector) || (d.splice(o, 1), u.selector && d.delegateCount--, f.remove && f.remove.call(e, u));
                        s && !d.length && (f.teardown && !1 !== f.teardown.call(e, p, m.handle) || x.removeEvent(e, h, m.handle), delete l[h])
                    } else
                        for (h in l) x.event.remove(e, h + t[c], n, i, !0);
                x.isEmptyObject(l) && q.remove(e, "handle events")
            }
        },
        dispatch: function(e) {
            e = x.event.fix(e);
            var t, n, i, r, o, s, a = u.call(arguments),
                l = (q.get(this, "events") || {})[e.type] || [],
                c = x.event.special[e.type] || {};
            if ((a[0] = e).delegateTarget = this, !c.preDispatch || !1 !== c.preDispatch.call(this, e)) {
                for (s = x.event.handlers.call(this, e, l), t = 0;
                    (r = s[t++]) && !e.isPropagationStopped();)
                    for (e.currentTarget = r.elem, n = 0;
                        (o = r.handlers[n++]) && !e.isImmediatePropagationStopped();) e.rnamespace && !e.rnamespace.test(o.namespace) || (e.handleObj = o, e.data = o.data, void 0 !== (i = ((x.event.special[o.origType] || {}).handle || o.handler).apply(r.elem, a)) && !1 === (e.result = i) && (e.preventDefault(), e.stopPropagation()));
                return c.postDispatch && c.postDispatch.call(this, e), e.result
            }
        },
        handlers: function(e, t) {
            var n, i, r, o, s = [],
                a = t.delegateCount,
                l = e.target;
            if (a && l.nodeType && ("click" !== e.type || isNaN(e.button) || e.button < 1))
                for (; l !== this; l = l.parentNode || this)
                    if (1 === l.nodeType && (!0 !== l.disabled || "click" !== e.type)) {
                        for (i = [], n = 0; n < a; n++) void 0 === i[r = (o = t[n]).selector + " "] && (i[r] = o.needsContext ? -1 < x(r, this).index(l) : x.find(r, this, null, [l]).length), i[r] && i.push(o);
                        i.length && s.push({
                            elem: l,
                            handlers: i
                        })
                    } return a < t.length && s.push({
                elem: this,
                handlers: t.slice(a)
            }), s
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(e, t) {
                return null == e.which && (e.which = null != t.charCode ? t.charCode : t.keyCode), e
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(e, t) {
                var n, i, r, o = t.button;
                return null == e.pageX && null != t.clientX && (i = (n = e.target.ownerDocument || C).documentElement, r = n.body, e.pageX = t.clientX + (i && i.scrollLeft || r && r.scrollLeft || 0) - (i && i.clientLeft || r && r.clientLeft || 0), e.pageY = t.clientY + (i && i.scrollTop || r && r.scrollTop || 0) - (i && i.clientTop || r && r.clientTop || 0)), e.which || void 0 === o || (e.which = 1 & o ? 1 : 2 & o ? 3 : 4 & o ? 2 : 0), e
            }
        },
        fix: function(e) {
            if (e[x.expando]) return e;
            var t, n, i, r = e.type,
                o = e,
                s = this.fixHooks[r];
            for (s || (this.fixHooks[r] = s = re.test(r) ? this.mouseHooks : ie.test(r) ? this.keyHooks : {}), i = s.props ? this.props.concat(s.props) : this.props, e = new x.Event(o), t = i.length; t--;) e[n = i[t]] = o[n];
            return e.target || (e.target = C), 3 === e.target.nodeType && (e.target = e.target.parentNode), s.filter ? s.filter(e, o) : e
        },
        special: {
            load: {
                noBubble: !0
            },
            focus: {
                trigger: function() {
                    if (this !== le() && this.focus) return this.focus(), !1
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === le() && this.blur) return this.blur(), !1
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    if ("checkbox" === this.type && this.click && x.nodeName(this, "input")) return this.click(), !1
                },
                _default: function(e) {
                    return x.nodeName(e.target, "a")
                }
            },
            beforeunload: {
                postDispatch: function(e) {
                    void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result)
                }
            }
        }
    }, x.removeEvent = function(e, t, n) {
        e.removeEventListener && e.removeEventListener(t, n)
    }, x.Event = function(e, t) {
        if (!(this instanceof x.Event)) return new x.Event(e, t);
        e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? se : ae) : this.type = e, t && x.extend(this, t), this.timeStamp = e && e.timeStamp || x.now(), this[x.expando] = !0
    }, x.Event.prototype = {
        constructor: x.Event,
        isDefaultPrevented: ae,
        isPropagationStopped: ae,
        isImmediatePropagationStopped: ae,
        isSimulated: !1,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = se, e && !this.isSimulated && e.preventDefault()
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = se, e && !this.isSimulated && e.stopPropagation()
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = se, e && !this.isSimulated && e.stopImmediatePropagation(), this.stopPropagation()
        }
    }, x.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(e, r) {
        x.event.special[e] = {
            delegateType: r,
            bindType: r,
            handle: function(e) {
                var t, n = e.relatedTarget,
                    i = e.handleObj;
                return n && (n === this || x.contains(this, n)) || (e.type = i.origType, t = i.handler.apply(this, arguments), e.type = r), t
            }
        }
    }), x.fn.extend({
        on: function(e, t, n, i) {
            return ce(this, e, t, n, i)
        },
        one: function(e, t, n, i) {
            return ce(this, e, t, n, i, 1)
        },
        off: function(e, t, n) {
            var i, r;
            if (e && e.preventDefault && e.handleObj) return i = e.handleObj, x(e.delegateTarget).off(i.namespace ? i.origType + "." + i.namespace : i.origType, i.selector, i.handler), this;
            if ("object" != typeof e) return !1 !== t && "function" != typeof t || (n = t, t = void 0), !1 === n && (n = ae), this.each(function() {
                x.event.remove(this, e, n, t)
            });
            for (r in e) this.off(r, t, e[r]);
            return this
        }
    });
    var ue = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
        fe = /<script|<style|<link/i,
        de = /checked\s*(?:[^=]|=\s*.checked.)/i,
        he = /^true\/(.*)/,
        pe = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

    function ge(e, t) {
        return x.nodeName(e, "table") && x.nodeName(11 !== t.nodeType ? t : t.firstChild, "tr") ? e.getElementsByTagName("tbody")[0] || e.appendChild(e.ownerDocument.createElement("tbody")) : e
    }

    function me(e) {
        return e.type = (null !== e.getAttribute("type")) + "/" + e.type, e
    }

    function ve(e) {
        var t = he.exec(e.type);
        return t ? e.type = t[1] : e.removeAttribute("type"), e
    }

    function ye(e, t) {
        var n, i, r, o, s, a, l, c;
        if (1 === t.nodeType) {
            if (q.hasData(e) && (o = q.access(e), s = q.set(t, o), c = o.events))
                for (r in delete s.handle, s.events = {}, c)
                    for (n = 0, i = c[r].length; n < i; n++) x.event.add(t, r, c[r][n]);
            R.hasData(e) && (a = R.access(e), l = x.extend({}, a), R.set(t, l))
        }
    }

    function _e(n, i, r, o) {
        i = g.apply([], i);
        var e, t, s, a, l, c, u = 0,
            f = n.length,
            d = f - 1,
            h = i[0],
            p = x.isFunction(h);
        if (p || 1 < f && "string" == typeof h && !m.checkClone && de.test(h)) return n.each(function(e) {
            var t = n.eq(e);
            p && (i[0] = h.call(this, e, t.html())), _e(t, i, r, o)
        });
        if (f && (t = (e = ne(i, n[0].ownerDocument, !1, n, o)).firstChild, 1 === e.childNodes.length && (e = t), t || o)) {
            for (a = (s = x.map(G(e, "script"), me)).length; u < f; u++) l = e, u !== d && (l = x.clone(l, !0, !0), a && x.merge(s, G(l, "script"))), r.call(n[u], l, u);
            if (a)
                for (c = s[s.length - 1].ownerDocument, x.map(s, ve), u = 0; u < a; u++) l = s[u], X.test(l.type || "") && !q.access(l, "globalEval") && x.contains(c, l) && (l.src ? x._evalUrl && x._evalUrl(l.src) : x.globalEval(l.textContent.replace(pe, "")))
        }
        return n
    }

    function be(e, t, n) {
        for (var i, r = t ? x.filter(t, e) : e, o = 0; null != (i = r[o]); o++) n || 1 !== i.nodeType || x.cleanData(G(i)), i.parentNode && (n && x.contains(i.ownerDocument, i) && J(G(i, "script")), i.parentNode.removeChild(i));
        return e
    }
    x.extend({
        htmlPrefilter: function(e) {
            return e.replace(ue, "<$1></$2>")
        },
        clone: function(e, t, n) {
            var i, r, o, s, a, l, c, u = e.cloneNode(!0),
                f = x.contains(e.ownerDocument, e);
            if (!(m.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || x.isXMLDoc(e)))
                for (s = G(u), i = 0, r = (o = G(e)).length; i < r; i++) a = o[i], l = s[i], "input" === (c = l.nodeName.toLowerCase()) && Q.test(a.type) ? l.checked = a.checked : "input" !== c && "textarea" !== c || (l.defaultValue = a.defaultValue);
            if (t)
                if (n)
                    for (o = o || G(e), s = s || G(u), i = 0, r = o.length; i < r; i++) ye(o[i], s[i]);
                else ye(e, u);
            return 0 < (s = G(u, "script")).length && J(s, !f && G(e, "script")), u
        },
        cleanData: function(e) {
            for (var t, n, i, r = x.event.special, o = 0; void 0 !== (n = e[o]); o++)
                if (L(n)) {
                    if (t = n[q.expando]) {
                        if (t.events)
                            for (i in t.events) r[i] ? x.event.remove(n, i) : x.removeEvent(n, i, t.handle);
                        n[q.expando] = void 0
                    }
                    n[R.expando] && (n[R.expando] = void 0)
                }
        }
    }), x.fn.extend({
        domManip: _e,
        detach: function(e) {
            return be(this, e, !0)
        },
        remove: function(e) {
            return be(this, e)
        },
        text: function(e) {
            return P(this, function(e) {
                return void 0 === e ? x.text(this) : this.empty().each(function() {
                    1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = e)
                })
            }, null, e, arguments.length)
        },
        append: function() {
            return _e(this, arguments, function(e) {
                1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || ge(this, e).appendChild(e)
            })
        },
        prepend: function() {
            return _e(this, arguments, function(e) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var t = ge(this, e);
                    t.insertBefore(e, t.firstChild)
                }
            })
        },
        before: function() {
            return _e(this, arguments, function(e) {
                this.parentNode && this.parentNode.insertBefore(e, this)
            })
        },
        after: function() {
            return _e(this, arguments, function(e) {
                this.parentNode && this.parentNode.insertBefore(e, this.nextSibling)
            })
        },
        empty: function() {
            for (var e, t = 0; null != (e = this[t]); t++) 1 === e.nodeType && (x.cleanData(G(e, !1)), e.textContent = "");
            return this
        },
        clone: function(e, t) {
            return e = null != e && e, t = null == t ? e : t, this.map(function() {
                return x.clone(this, e, t)
            })
        },
        html: function(e) {
            return P(this, function(e) {
                var t = this[0] || {},
                    n = 0,
                    i = this.length;
                if (void 0 === e && 1 === t.nodeType) return t.innerHTML;
                if ("string" == typeof e && !fe.test(e) && !Y[(V.exec(e) || ["", ""])[1].toLowerCase()]) {
                    e = x.htmlPrefilter(e);
                    try {
                        for (; n < i; n++) 1 === (t = this[n] || {}).nodeType && (x.cleanData(G(t, !1)), t.innerHTML = e);
                        t = 0
                    } catch (e) {}
                }
                t && this.empty().append(e)
            }, null, e, arguments.length)
        },
        replaceWith: function() {
            var n = [];
            return _e(this, arguments, function(e) {
                var t = this.parentNode;
                x.inArray(this, n) < 0 && (x.cleanData(G(this)), t && t.replaceChild(e, this))
            }, n)
        }
    }), x.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(e, s) {
        x.fn[e] = function(e) {
            for (var t, n = [], i = x(e), r = i.length - 1, o = 0; o <= r; o++) t = o === r ? this : this.clone(!0), x(i[o])[s](t), a.apply(n, t.get());
            return this.pushStack(n)
        }
    });
    var we, Ee = {
        HTML: "block",
        BODY: "block"
    };

    function Te(e, t) {
        var n = x(t.createElement(e)).appendTo(t.body),
            i = x.css(n[0], "display");
        return n.detach(), i
    }

    function Ce(e) {
        var t = C,
            n = Ee[e];
        return n || ("none" !== (n = Te(e, t)) && n || ((t = (we = (we || x("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement))[0].contentDocument).write(), t.close(), n = Te(e, t), we.detach()), Ee[e] = n), n
    }

    function xe(e, t, n, i) {
        var r, o, s = {};
        for (o in t) s[o] = e.style[o], e.style[o] = t[o];
        for (o in r = n.apply(e, i || []), t) e.style[o] = s[o];
        return r
    }
    var Se, Ae, De, ke, Ne, Ie, Oe = /^margin/,
        je = new RegExp("^(" + U + ")(?!px)[a-z%]+$", "i"),
        Le = function(e) {
            var t = e.ownerDocument.defaultView;
            return t && t.opener || (t = T), t.getComputedStyle(e)
        },
        Pe = C.documentElement;

    function He() {
        Ie.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%", Ie.innerHTML = "", Pe.appendChild(Ne);
        var e = T.getComputedStyle(Ie);
        Se = "1%" !== e.top, ke = "2px" === e.marginLeft, Ae = "4px" === e.width, Ie.style.marginRight = "50%", De = "4px" === e.marginRight, Pe.removeChild(Ne)
    }

    function qe(e, t, n) {
        var i, r, o, s, a = e.style;
        return "" !== (s = (n = n || Le(e)) ? n.getPropertyValue(t) || n[t] : void 0) && void 0 !== s || x.contains(e.ownerDocument, e) || (s = x.style(e, t)), n && !m.pixelMarginRight() && je.test(s) && Oe.test(t) && (i = a.width, r = a.minWidth, o = a.maxWidth, a.minWidth = a.maxWidth = a.width = s, s = n.width, a.width = i, a.minWidth = r, a.maxWidth = o), void 0 !== s ? s + "" : s
    }

    function Re(e, t) {
        return {
            get: function() {
                if (!e()) return (this.get = t).apply(this, arguments);
                delete this.get
            }
        }
    }
    Ne = C.createElement("div"), (Ie = C.createElement("div")).style && (Ie.style.backgroundClip = "content-box", Ie.cloneNode(!0).style.backgroundClip = "", m.clearCloneStyle = "content-box" === Ie.style.backgroundClip, Ne.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute", Ne.appendChild(Ie), x.extend(m, {
        pixelPosition: function() {
            return He(), Se
        },
        boxSizingReliable: function() {
            return null == Ae && He(), Ae
        },
        pixelMarginRight: function() {
            return null == Ae && He(), De
        },
        reliableMarginLeft: function() {
            return null == Ae && He(), ke
        },
        reliableMarginRight: function() {
            var e, t = Ie.appendChild(C.createElement("div"));
            return t.style.cssText = Ie.style.cssText = "-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", t.style.marginRight = t.style.width = "0", Ie.style.width = "1px", Pe.appendChild(Ne), e = !parseFloat(T.getComputedStyle(t).marginRight), Pe.removeChild(Ne), Ie.removeChild(t), e
        }
    }));
    var Fe = /^(none|table(?!-c[ea]).+)/,
        Me = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        },
        We = {
            letterSpacing: "0",
            fontWeight: "400"
        },
        Be = ["Webkit", "O", "Moz", "ms"],
        Ue = C.createElement("div").style;

    function $e(e) {
        if (e in Ue) return e;
        for (var t = e[0].toUpperCase() + e.slice(1), n = Be.length; n--;)
            if ((e = Be[n] + t) in Ue) return e
    }

    function ze(e, t, n) {
        var i = $.exec(t);
        return i ? Math.max(0, i[2] - (n || 0)) + (i[3] || "px") : t
    }

    function Ke(e, t, n, i, r) {
        for (var o = n === (i ? "border" : "content") ? 4 : "width" === t ? 1 : 0, s = 0; o < 4; o += 2) "margin" === n && (s += x.css(e, n + z[o], !0, r)), i ? ("content" === n && (s -= x.css(e, "padding" + z[o], !0, r)), "margin" !== n && (s -= x.css(e, "border" + z[o] + "Width", !0, r))) : (s += x.css(e, "padding" + z[o], !0, r), "padding" !== n && (s += x.css(e, "border" + z[o] + "Width", !0, r)));
        return s
    }

    function Qe(e, t, n) {
        var i = !0,
            r = "width" === t ? e.offsetWidth : e.offsetHeight,
            o = Le(e),
            s = "border-box" === x.css(e, "boxSizing", !1, o);
        if (r <= 0 || null == r) {
            if (((r = qe(e, t, o)) < 0 || null == r) && (r = e.style[t]), je.test(r)) return r;
            i = s && (m.boxSizingReliable() || r === e.style[t]), r = parseFloat(r) || 0
        }
        return r + Ke(e, t, n || (s ? "border" : "content"), i, o) + "px"
    }

    function Ve(e, t) {
        for (var n, i, r, o = [], s = 0, a = e.length; s < a; s++)(i = e[s]).style && (o[s] = q.get(i, "olddisplay"), n = i.style.display, t ? (o[s] || "none" !== n || (i.style.display = ""), "" === i.style.display && B(i) && (o[s] = q.access(i, "olddisplay", Ce(i.nodeName)))) : (r = B(i), "none" === n && r || q.set(i, "olddisplay", r ? n : x.css(i, "display"))));
        for (s = 0; s < a; s++)(i = e[s]).style && (t && "none" !== i.style.display && "" !== i.style.display || (i.style.display = t ? o[s] || "" : "none"));
        return e
    }

    function Xe(e, t, n, i, r) {
        return new Xe.prototype.init(e, t, n, i, r)
    }
    x.extend({
        cssHooks: {
            opacity: {
                get: function(e, t) {
                    if (t) {
                        var n = qe(e, "opacity");
                        return "" === n ? "1" : n
                    }
                }
            }
        },
        cssNumber: {
            animationIterationCount: !0,
            columnCount: !0,
            fillOpacity: !0,
            flexGrow: !0,
            flexShrink: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {
            float: "cssFloat"
        },
        style: function(e, t, n, i) {
            if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {
                var r, o, s, a = x.camelCase(t),
                    l = e.style;
                if (t = x.cssProps[a] || (x.cssProps[a] = $e(a) || a), s = x.cssHooks[t] || x.cssHooks[a], void 0 === n) return s && "get" in s && void 0 !== (r = s.get(e, !1, i)) ? r : l[t];
                "string" === (o = typeof n) && (r = $.exec(n)) && r[1] && (n = K(e, t, r), o = "number"), null != n && n == n && ("number" === o && (n += r && r[3] || (x.cssNumber[a] ? "" : "px")), m.clearCloneStyle || "" !== n || 0 !== t.indexOf("background") || (l[t] = "inherit"), s && "set" in s && void 0 === (n = s.set(e, n, i)) || (l[t] = n))
            }
        },
        css: function(e, t, n, i) {
            var r, o, s, a = x.camelCase(t);
            return t = x.cssProps[a] || (x.cssProps[a] = $e(a) || a), (s = x.cssHooks[t] || x.cssHooks[a]) && "get" in s && (r = s.get(e, !0, n)), void 0 === r && (r = qe(e, t, i)), "normal" === r && t in We && (r = We[t]), "" === n || n ? (o = parseFloat(r), !0 === n || isFinite(o) ? o || 0 : r) : r
        }
    }), x.each(["height", "width"], function(e, s) {
        x.cssHooks[s] = {
            get: function(e, t, n) {
                if (t) return Fe.test(x.css(e, "display")) && 0 === e.offsetWidth ? xe(e, Me, function() {
                    return Qe(e, s, n)
                }) : Qe(e, s, n)
            },
            set: function(e, t, n) {
                var i, r = n && Le(e),
                    o = n && Ke(e, s, n, "border-box" === x.css(e, "boxSizing", !1, r), r);
                return o && (i = $.exec(t)) && "px" !== (i[3] || "px") && (e.style[s] = t, t = x.css(e, s)), ze(0, t, o)
            }
        }
    }), x.cssHooks.marginLeft = Re(m.reliableMarginLeft, function(e, t) {
        if (t) return (parseFloat(qe(e, "marginLeft")) || e.getBoundingClientRect().left - xe(e, {
            marginLeft: 0
        }, function() {
            return e.getBoundingClientRect().left
        })) + "px"
    }), x.cssHooks.marginRight = Re(m.reliableMarginRight, function(e, t) {
        if (t) return xe(e, {
            display: "inline-block"
        }, qe, [e, "marginRight"])
    }), x.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(r, o) {
        x.cssHooks[r + o] = {
            expand: function(e) {
                for (var t = 0, n = {}, i = "string" == typeof e ? e.split(" ") : [e]; t < 4; t++) n[r + z[t] + o] = i[t] || i[t - 2] || i[0];
                return n
            }
        }, Oe.test(r) || (x.cssHooks[r + o].set = ze)
    }), x.fn.extend({
        css: function(e, t) {
            return P(this, function(e, t, n) {
                var i, r, o = {},
                    s = 0;
                if (x.isArray(t)) {
                    for (i = Le(e), r = t.length; s < r; s++) o[t[s]] = x.css(e, t[s], !1, i);
                    return o
                }
                return void 0 !== n ? x.style(e, t, n) : x.css(e, t)
            }, e, t, 1 < arguments.length)
        },
        show: function() {
            return Ve(this, !0)
        },
        hide: function() {
            return Ve(this)
        },
        toggle: function(e) {
            return "boolean" == typeof e ? e ? this.show() : this.hide() : this.each(function() {
                B(this) ? x(this).show() : x(this).hide()
            })
        }
    }), ((x.Tween = Xe).prototype = {
        constructor: Xe,
        init: function(e, t, n, i, r, o) {
            this.elem = e, this.prop = n, this.easing = r || x.easing._default, this.options = t, this.start = this.now = this.cur(), this.end = i, this.unit = o || (x.cssNumber[n] ? "" : "px")
        },
        cur: function() {
            var e = Xe.propHooks[this.prop];
            return e && e.get ? e.get(this) : Xe.propHooks._default.get(this)
        },
        run: function(e) {
            var t, n = Xe.propHooks[this.prop];
            return this.options.duration ? this.pos = t = x.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), n && n.set ? n.set(this) : Xe.propHooks._default.set(this), this
        }
    }).init.prototype = Xe.prototype, (Xe.propHooks = {
        _default: {
            get: function(e) {
                var t;
                return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (t = x.css(e.elem, e.prop, "")) && "auto" !== t ? t : 0
            },
            set: function(e) {
                x.fx.step[e.prop] ? x.fx.step[e.prop](e) : 1 !== e.elem.nodeType || null == e.elem.style[x.cssProps[e.prop]] && !x.cssHooks[e.prop] ? e.elem[e.prop] = e.now : x.style(e.elem, e.prop, e.now + e.unit)
            }
        }
    }).scrollTop = Xe.propHooks.scrollLeft = {
        set: function(e) {
            e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now)
        }
    }, x.easing = {
        linear: function(e) {
            return e
        },
        swing: function(e) {
            return .5 - Math.cos(e * Math.PI) / 2
        },
        _default: "swing"
    }, x.fx = Xe.prototype.init, x.fx.step = {};
    var Ye, Ge, Je, Ze, et, tt = /^(?:toggle|show|hide)$/,
        nt = /queueHooks$/;

    function it() {
        return T.setTimeout(function() {
            Ye = void 0
        }), Ye = x.now()
    }

    function rt(e, t) {
        var n, i = 0,
            r = {
                height: e
            };
        for (t = t ? 1 : 0; i < 4; i += 2 - t) r["margin" + (n = z[i])] = r["padding" + n] = e;
        return t && (r.opacity = r.width = e), r
    }

    function ot(e, t, n) {
        for (var i, r = (st.tweeners[t] || []).concat(st.tweeners["*"]), o = 0, s = r.length; o < s; o++)
            if (i = r[o].call(n, t, e)) return i
    }

    function st(o, e, t) {
        var n, s, i = 0,
            r = st.prefilters.length,
            a = x.Deferred().always(function() {
                delete l.elem
            }),
            l = function() {
                if (s) return !1;
                for (var e = Ye || it(), t = Math.max(0, c.startTime + c.duration - e), n = 1 - (t / c.duration || 0), i = 0, r = c.tweens.length; i < r; i++) c.tweens[i].run(n);
                return a.notifyWith(o, [c, n, t]), n < 1 && r ? t : (a.resolveWith(o, [c]), !1)
            },
            c = a.promise({
                elem: o,
                props: x.extend({}, e),
                opts: x.extend(!0, {
                    specialEasing: {},
                    easing: x.easing._default
                }, t),
                originalProperties: e,
                originalOptions: t,
                startTime: Ye || it(),
                duration: t.duration,
                tweens: [],
                createTween: function(e, t) {
                    var n = x.Tween(o, c.opts, e, t, c.opts.specialEasing[e] || c.opts.easing);
                    return c.tweens.push(n), n
                },
                stop: function(e) {
                    var t = 0,
                        n = e ? c.tweens.length : 0;
                    if (s) return this;
                    for (s = !0; t < n; t++) c.tweens[t].run(1);
                    return e ? (a.notifyWith(o, [c, 1, 0]), a.resolveWith(o, [c, e])) : a.rejectWith(o, [c, e]), this
                }
            }),
            u = c.props;
        for (! function(e, t) {
                var n, i, r, o, s;
                for (n in e)
                    if (r = t[i = x.camelCase(n)], o = e[n], x.isArray(o) && (r = o[1], o = e[n] = o[0]), n !== i && (e[i] = o, delete e[n]), (s = x.cssHooks[i]) && "expand" in s)
                        for (n in o = s.expand(o), delete e[i], o) n in e || (e[n] = o[n], t[n] = r);
                    else t[i] = r
            }(u, c.opts.specialEasing); i < r; i++)
            if (n = st.prefilters[i].call(c, o, u, c.opts)) return x.isFunction(n.stop) && (x._queueHooks(c.elem, c.opts.queue).stop = x.proxy(n.stop, n)), n;
        return x.map(u, ot, c), x.isFunction(c.opts.start) && c.opts.start.call(o, c), x.fx.timer(x.extend(l, {
            elem: o,
            anim: c,
            queue: c.opts.queue
        })), c.progress(c.opts.progress).done(c.opts.done, c.opts.complete).fail(c.opts.fail).always(c.opts.always)
    }
    x.Animation = x.extend(st, {
        tweeners: {
            "*": [function(e, t) {
                var n = this.createTween(e, t);
                return K(n.elem, e, $.exec(t), n), n
            }]
        },
        tweener: function(e, t) {
            for (var n, i = 0, r = (e = x.isFunction(e) ? (t = e, ["*"]) : e.match(O)).length; i < r; i++) n = e[i], st.tweeners[n] = st.tweeners[n] || [], st.tweeners[n].unshift(t)
        },
        prefilters: [function(t, e, n) {
            var i, r, o, s, a, l, c, u = this,
                f = {},
                d = t.style,
                h = t.nodeType && B(t),
                p = q.get(t, "fxshow");
            for (i in n.queue || (null == (a = x._queueHooks(t, "fx")).unqueued && (a.unqueued = 0, l = a.empty.fire, a.empty.fire = function() {
                    a.unqueued || l()
                }), a.unqueued++, u.always(function() {
                    u.always(function() {
                        a.unqueued--, x.queue(t, "fx").length || a.empty.fire()
                    })
                })), 1 === t.nodeType && ("height" in e || "width" in e) && (n.overflow = [d.overflow, d.overflowX, d.overflowY], "inline" === ("none" === (c = x.css(t, "display")) ? q.get(t, "olddisplay") || Ce(t.nodeName) : c) && "none" === x.css(t, "float") && (d.display = "inline-block")), n.overflow && (d.overflow = "hidden", u.always(function() {
                    d.overflow = n.overflow[0], d.overflowX = n.overflow[1], d.overflowY = n.overflow[2]
                })), e)
                if (r = e[i], tt.exec(r)) {
                    if (delete e[i], o = o || "toggle" === r, r === (h ? "hide" : "show")) {
                        if ("show" !== r || !p || void 0 === p[i]) continue;
                        h = !0
                    }
                    f[i] = p && p[i] || x.style(t, i)
                } else c = void 0;
            if (x.isEmptyObject(f)) "inline" === ("none" === c ? Ce(t.nodeName) : c) && (d.display = c);
            else
                for (i in p ? "hidden" in p && (h = p.hidden) : p = q.access(t, "fxshow", {}), o && (p.hidden = !h), h ? x(t).show() : u.done(function() {
                        x(t).hide()
                    }), u.done(function() {
                        var e;
                        for (e in q.remove(t, "fxshow"), f) x.style(t, e, f[e])
                    }), f) s = ot(h ? p[i] : 0, i, u), i in p || (p[i] = s.start, h && (s.end = s.start, s.start = "width" === i || "height" === i ? 1 : 0))
        }],
        prefilter: function(e, t) {
            t ? st.prefilters.unshift(e) : st.prefilters.push(e)
        }
    }), x.speed = function(e, t, n) {
        var i = e && "object" == typeof e ? x.extend({}, e) : {
            complete: n || !n && t || x.isFunction(e) && e,
            duration: e,
            easing: n && t || t && !x.isFunction(t) && t
        };
        return i.duration = x.fx.off ? 0 : "number" == typeof i.duration ? i.duration : i.duration in x.fx.speeds ? x.fx.speeds[i.duration] : x.fx.speeds._default, null != i.queue && !0 !== i.queue || (i.queue = "fx"), i.old = i.complete, i.complete = function() {
            x.isFunction(i.old) && i.old.call(this), i.queue && x.dequeue(this, i.queue)
        }, i
    }, x.fn.extend({
        fadeTo: function(e, t, n, i) {
            return this.filter(B).css("opacity", 0).show().end().animate({
                opacity: t
            }, e, n, i)
        },
        animate: function(t, e, n, i) {
            function r() {
                var e = st(this, x.extend({}, t), s);
                (o || q.get(this, "finish")) && e.stop(!0)
            }
            var o = x.isEmptyObject(t),
                s = x.speed(e, n, i);
            return r.finish = r, o || !1 === s.queue ? this.each(r) : this.queue(s.queue, r)
        },
        stop: function(r, e, o) {
            function s(e) {
                var t = e.stop;
                delete e.stop, t(o)
            }
            return "string" != typeof r && (o = e, e = r, r = void 0), e && !1 !== r && this.queue(r || "fx", []), this.each(function() {
                var e = !0,
                    t = null != r && r + "queueHooks",
                    n = x.timers,
                    i = q.get(this);
                if (t) i[t] && i[t].stop && s(i[t]);
                else
                    for (t in i) i[t] && i[t].stop && nt.test(t) && s(i[t]);
                for (t = n.length; t--;) n[t].elem !== this || null != r && n[t].queue !== r || (n[t].anim.stop(o), e = !1, n.splice(t, 1));
                !e && o || x.dequeue(this, r)
            })
        },
        finish: function(s) {
            return !1 !== s && (s = s || "fx"), this.each(function() {
                var e, t = q.get(this),
                    n = t[s + "queue"],
                    i = t[s + "queueHooks"],
                    r = x.timers,
                    o = n ? n.length : 0;
                for (t.finish = !0, x.queue(this, s, []), i && i.stop && i.stop.call(this, !0), e = r.length; e--;) r[e].elem === this && r[e].queue === s && (r[e].anim.stop(!0), r.splice(e, 1));
                for (e = 0; e < o; e++) n[e] && n[e].finish && n[e].finish.call(this);
                delete t.finish
            })
        }
    }), x.each(["toggle", "show", "hide"], function(e, i) {
        var r = x.fn[i];
        x.fn[i] = function(e, t, n) {
            return null == e || "boolean" == typeof e ? r.apply(this, arguments) : this.animate(rt(i, !0), e, t, n)
        }
    }), x.each({
        slideDown: rt("show"),
        slideUp: rt("hide"),
        slideToggle: rt("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(e, i) {
        x.fn[e] = function(e, t, n) {
            return this.animate(i, e, t, n)
        }
    }), x.timers = [], x.fx.tick = function() {
        var e, t = 0,
            n = x.timers;
        for (Ye = x.now(); t < n.length; t++)(e = n[t])() || n[t] !== e || n.splice(t--, 1);
        n.length || x.fx.stop(), Ye = void 0
    }, x.fx.timer = function(e) {
        x.timers.push(e), e() ? x.fx.start() : x.timers.pop()
    }, x.fx.interval = 13, x.fx.start = function() {
        Ge = Ge || T.setInterval(x.fx.tick, x.fx.interval)
    }, x.fx.stop = function() {
        T.clearInterval(Ge), Ge = null
    }, x.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    }, x.fn.delay = function(i, e) {
        return i = x.fx && x.fx.speeds[i] || i, e = e || "fx", this.queue(e, function(e, t) {
            var n = T.setTimeout(e, i);
            t.stop = function() {
                T.clearTimeout(n)
            }
        })
    }, Je = C.createElement("input"), Ze = C.createElement("select"), et = Ze.appendChild(C.createElement("option")), Je.type = "checkbox", m.checkOn = "" !== Je.value, m.optSelected = et.selected, Ze.disabled = !0, m.optDisabled = !et.disabled, (Je = C.createElement("input")).value = "t", Je.type = "radio", m.radioValue = "t" === Je.value;
    var at, lt = x.expr.attrHandle;
    x.fn.extend({
        attr: function(e, t) {
            return P(this, x.attr, e, t, 1 < arguments.length)
        },
        removeAttr: function(e) {
            return this.each(function() {
                x.removeAttr(this, e)
            })
        }
    }), x.extend({
        attr: function(e, t, n) {
            var i, r, o = e.nodeType;
            if (3 !== o && 8 !== o && 2 !== o) return void 0 === e.getAttribute ? x.prop(e, t, n) : (1 === o && x.isXMLDoc(e) || (t = t.toLowerCase(), r = x.attrHooks[t] || (x.expr.match.bool.test(t) ? at : void 0)), void 0 !== n ? null === n ? void x.removeAttr(e, t) : r && "set" in r && void 0 !== (i = r.set(e, n, t)) ? i : (e.setAttribute(t, n + ""), n) : r && "get" in r && null !== (i = r.get(e, t)) ? i : null == (i = x.find.attr(e, t)) ? void 0 : i)
        },
        attrHooks: {
            type: {
                set: function(e, t) {
                    if (!m.radioValue && "radio" === t && x.nodeName(e, "input")) {
                        var n = e.value;
                        return e.setAttribute("type", t), n && (e.value = n), t
                    }
                }
            }
        },
        removeAttr: function(e, t) {
            var n, i, r = 0,
                o = t && t.match(O);
            if (o && 1 === e.nodeType)
                for (; n = o[r++];) i = x.propFix[n] || n, x.expr.match.bool.test(n) && (e[i] = !1), e.removeAttribute(n)
        }
    }), at = {
        set: function(e, t, n) {
            return !1 === t ? x.removeAttr(e, n) : e.setAttribute(n, n), n
        }
    }, x.each(x.expr.match.bool.source.match(/\w+/g), function(e, t) {
        var o = lt[t] || x.find.attr;
        lt[t] = function(e, t, n) {
            var i, r;
            return n || (r = lt[t], lt[t] = i, i = null != o(e, t, n) ? t.toLowerCase() : null, lt[t] = r), i
        }
    });
    var ct = /^(?:input|select|textarea|button)$/i,
        ut = /^(?:a|area)$/i;
    x.fn.extend({
        prop: function(e, t) {
            return P(this, x.prop, e, t, 1 < arguments.length)
        },
        removeProp: function(e) {
            return this.each(function() {
                delete this[x.propFix[e] || e]
            })
        }
    }), x.extend({
        prop: function(e, t, n) {
            var i, r, o = e.nodeType;
            if (3 !== o && 8 !== o && 2 !== o) return 1 === o && x.isXMLDoc(e) || (t = x.propFix[t] || t, r = x.propHooks[t]), void 0 !== n ? r && "set" in r && void 0 !== (i = r.set(e, n, t)) ? i : e[t] = n : r && "get" in r && null !== (i = r.get(e, t)) ? i : e[t]
        },
        propHooks: {
            tabIndex: {
                get: function(e) {
                    var t = x.find.attr(e, "tabindex");
                    return t ? parseInt(t, 10) : ct.test(e.nodeName) || ut.test(e.nodeName) && e.href ? 0 : -1
                }
            }
        },
        propFix: {
            for: "htmlFor",
            class: "className"
        }
    }), m.optSelected || (x.propHooks.selected = {
        get: function(e) {
            var t = e.parentNode;
            return t && t.parentNode && t.parentNode.selectedIndex, null
        },
        set: function(e) {
            var t = e.parentNode;
            t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex)
        }
    }), x.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
        x.propFix[this.toLowerCase()] = this
    });
    var ft = /[\t\r\n\f]/g;

    function dt(e) {
        return e.getAttribute && e.getAttribute("class") || ""
    }
    x.fn.extend({
        addClass: function(t) {
            var e, n, i, r, o, s, a, l = 0;
            if (x.isFunction(t)) return this.each(function(e) {
                x(this).addClass(t.call(this, e, dt(this)))
            });
            if ("string" == typeof t && t)
                for (e = t.match(O) || []; n = this[l++];)
                    if (r = dt(n), i = 1 === n.nodeType && (" " + r + " ").replace(ft, " ")) {
                        for (s = 0; o = e[s++];) i.indexOf(" " + o + " ") < 0 && (i += o + " ");
                        r !== (a = x.trim(i)) && n.setAttribute("class", a)
                    } return this
        },
        removeClass: function(t) {
            var e, n, i, r, o, s, a, l = 0;
            if (x.isFunction(t)) return this.each(function(e) {
                x(this).removeClass(t.call(this, e, dt(this)))
            });
            if (!arguments.length) return this.attr("class", "");
            if ("string" == typeof t && t)
                for (e = t.match(O) || []; n = this[l++];)
                    if (r = dt(n), i = 1 === n.nodeType && (" " + r + " ").replace(ft, " ")) {
                        for (s = 0; o = e[s++];)
                            for (; - 1 < i.indexOf(" " + o + " ");) i = i.replace(" " + o + " ", " ");
                        r !== (a = x.trim(i)) && n.setAttribute("class", a)
                    } return this
        },
        toggleClass: function(r, t) {
            var o = typeof r;
            return "boolean" == typeof t && "string" == o ? t ? this.addClass(r) : this.removeClass(r) : x.isFunction(r) ? this.each(function(e) {
                x(this).toggleClass(r.call(this, e, dt(this), t), t)
            }) : this.each(function() {
                var e, t, n, i;
                if ("string" == o)
                    for (t = 0, n = x(this), i = r.match(O) || []; e = i[t++];) n.hasClass(e) ? n.removeClass(e) : n.addClass(e);
                else void 0 !== r && "boolean" != o || ((e = dt(this)) && q.set(this, "__className__", e), this.setAttribute && this.setAttribute("class", e || !1 === r ? "" : q.get(this, "__className__") || ""))
            })
        },
        hasClass: function(e) {
            var t, n, i = 0;
            for (t = " " + e + " "; n = this[i++];)
                if (1 === n.nodeType && -1 < (" " + dt(n) + " ").replace(ft, " ").indexOf(t)) return !0;
            return !1
        }
    });
    var ht = /\r/g,
        pt = /[\x20\t\r\n\f]+/g;
    x.fn.extend({
        val: function(n) {
            var i, e, r, t = this[0];
            return arguments.length ? (r = x.isFunction(n), this.each(function(e) {
                var t;
                1 === this.nodeType && (null == (t = r ? n.call(this, e, x(this).val()) : n) ? t = "" : "number" == typeof t ? t += "" : x.isArray(t) && (t = x.map(t, function(e) {
                    return null == e ? "" : e + ""
                })), (i = x.valHooks[this.type] || x.valHooks[this.nodeName.toLowerCase()]) && "set" in i && void 0 !== i.set(this, t, "value") || (this.value = t))
            })) : t ? (i = x.valHooks[t.type] || x.valHooks[t.nodeName.toLowerCase()]) && "get" in i && void 0 !== (e = i.get(t, "value")) ? e : "string" == typeof(e = t.value) ? e.replace(ht, "") : null == e ? "" : e : void 0
        }
    }), x.extend({
        valHooks: {
            option: {
                get: function(e) {
                    var t = x.find.attr(e, "value");
                    return null != t ? t : x.trim(x.text(e)).replace(pt, " ")
                }
            },
            select: {
                get: function(e) {
                    for (var t, n, i = e.options, r = e.selectedIndex, o = "select-one" === e.type || r < 0, s = o ? null : [], a = o ? r + 1 : i.length, l = r < 0 ? a : o ? r : 0; l < a; l++)
                        if (((n = i[l]).selected || l === r) && (m.optDisabled ? !n.disabled : null === n.getAttribute("disabled")) && (!n.parentNode.disabled || !x.nodeName(n.parentNode, "optgroup"))) {
                            if (t = x(n).val(), o) return t;
                            s.push(t)
                        } return s
                },
                set: function(e, t) {
                    for (var n, i, r = e.options, o = x.makeArray(t), s = r.length; s--;)((i = r[s]).selected = -1 < x.inArray(x.valHooks.option.get(i), o)) && (n = !0);
                    return n || (e.selectedIndex = -1), o
                }
            }
        }
    }), x.each(["radio", "checkbox"], function() {
        x.valHooks[this] = {
            set: function(e, t) {
                if (x.isArray(t)) return e.checked = -1 < x.inArray(x(e).val(), t)
            }
        }, m.checkOn || (x.valHooks[this].get = function(e) {
            return null === e.getAttribute("value") ? "on" : e.value
        })
    });
    var gt = /^(?:focusinfocus|focusoutblur)$/;
    x.extend(x.event, {
        trigger: function(e, t, n, i) {
            var r, o, s, a, l, c, u, f = [n || C],
                d = p.call(e, "type") ? e.type : e,
                h = p.call(e, "namespace") ? e.namespace.split(".") : [];
            if (o = s = n = n || C, 3 !== n.nodeType && 8 !== n.nodeType && !gt.test(d + x.event.triggered) && (-1 < d.indexOf(".") && (d = (h = d.split(".")).shift(), h.sort()), l = d.indexOf(":") < 0 && "on" + d, (e = e[x.expando] ? e : new x.Event(d, "object" == typeof e && e)).isTrigger = i ? 2 : 3, e.namespace = h.join("."), e.rnamespace = e.namespace ? new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, e.result = void 0, e.target || (e.target = n), t = null == t ? [e] : x.makeArray(t, [e]), u = x.event.special[d] || {}, i || !u.trigger || !1 !== u.trigger.apply(n, t))) {
                if (!i && !u.noBubble && !x.isWindow(n)) {
                    for (a = u.delegateType || d, gt.test(a + d) || (o = o.parentNode); o; o = o.parentNode) f.push(o), s = o;
                    s === (n.ownerDocument || C) && f.push(s.defaultView || s.parentWindow || T)
                }
                for (r = 0;
                    (o = f[r++]) && !e.isPropagationStopped();) e.type = 1 < r ? a : u.bindType || d, (c = (q.get(o, "events") || {})[e.type] && q.get(o, "handle")) && c.apply(o, t), (c = l && o[l]) && c.apply && L(o) && (e.result = c.apply(o, t), !1 === e.result && e.preventDefault());
                return e.type = d, i || e.isDefaultPrevented() || u._default && !1 !== u._default.apply(f.pop(), t) || !L(n) || l && x.isFunction(n[d]) && !x.isWindow(n) && ((s = n[l]) && (n[l] = null), n[x.event.triggered = d](), x.event.triggered = void 0, s && (n[l] = s)), e.result
            }
        },
        simulate: function(e, t, n) {
            var i = x.extend(new x.Event, n, {
                type: e,
                isSimulated: !0
            });
            x.event.trigger(i, null, t)
        }
    }), x.fn.extend({
        trigger: function(e, t) {
            return this.each(function() {
                x.event.trigger(e, t, this)
            })
        },
        triggerHandler: function(e, t) {
            var n = this[0];
            if (n) return x.event.trigger(e, t, n, !0)
        }
    }), x.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(e, n) {
        x.fn[n] = function(e, t) {
            return 0 < arguments.length ? this.on(n, null, e, t) : this.trigger(n)
        }
    }), x.fn.extend({
        hover: function(e, t) {
            return this.mouseenter(e).mouseleave(t || e)
        }
    }), m.focusin = "onfocusin" in T, m.focusin || x.each({
        focus: "focusin",
        blur: "focusout"
    }, function(n, i) {
        function r(e) {
            x.event.simulate(i, e.target, x.event.fix(e))
        }
        x.event.special[i] = {
            setup: function() {
                var e = this.ownerDocument || this,
                    t = q.access(e, i);
                t || e.addEventListener(n, r, !0), q.access(e, i, (t || 0) + 1)
            },
            teardown: function() {
                var e = this.ownerDocument || this,
                    t = q.access(e, i) - 1;
                t ? q.access(e, i, t) : (e.removeEventListener(n, r, !0), q.remove(e, i))
            }
        }
    });
    var mt = T.location,
        vt = x.now(),
        yt = /\?/;
    x.parseJSON = function(e) {
        return JSON.parse(e + "")
    }, x.parseXML = function(e) {
        var t;
        if (!e || "string" != typeof e) return null;
        try {
            t = (new T.DOMParser).parseFromString(e, "text/xml")
        } catch (e) {
            t = void 0
        }
        return t && !t.getElementsByTagName("parsererror").length || x.error("Invalid XML: " + e), t
    };
    var _t = /#.*$/,
        bt = /([?&])_=[^&]*/,
        wt = /^(.*?):[ \t]*([^\r\n]*)$/gm,
        Et = /^(?:GET|HEAD)$/,
        Tt = /^\/\//,
        Ct = {},
        xt = {},
        St = "*/".concat("*"),
        At = C.createElement("a");

    function Dt(o) {
        return function(e, t) {
            "string" != typeof e && (t = e, e = "*");
            var n, i = 0,
                r = e.toLowerCase().match(O) || [];
            if (x.isFunction(t))
                for (; n = r[i++];) "+" === n[0] ? (n = n.slice(1) || "*", (o[n] = o[n] || []).unshift(t)) : (o[n] = o[n] || []).push(t)
        }
    }

    function kt(t, r, o, s) {
        var a = {},
            l = t === xt;

        function c(e) {
            var i;
            return a[e] = !0, x.each(t[e] || [], function(e, t) {
                var n = t(r, o, s);
                return "string" != typeof n || l || a[n] ? l ? !(i = n) : void 0 : (r.dataTypes.unshift(n), c(n), !1)
            }), i
        }
        return c(r.dataTypes[0]) || !a["*"] && c("*")
    }

    function Nt(e, t) {
        var n, i, r = x.ajaxSettings.flatOptions || {};
        for (n in t) void 0 !== t[n] && ((r[n] ? e : i = i || {})[n] = t[n]);
        return i && x.extend(!0, e, i), e
    }
    At.href = mt.href, x.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: mt.href,
            type: "GET",
            isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(mt.protocol),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": St,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": x.parseJSON,
                "text xml": x.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function(e, t) {
            return t ? Nt(Nt(e, x.ajaxSettings), t) : Nt(x.ajaxSettings, e)
        },
        ajaxPrefilter: Dt(Ct),
        ajaxTransport: Dt(xt),
        ajax: function(e, t) {
            "object" == typeof e && (t = e, e = void 0), t = t || {};
            var u, f, d, n, h, i, p, r, g = x.ajaxSetup({}, t),
                m = g.context || g,
                v = g.context && (m.nodeType || m.jquery) ? x(m) : x.event,
                y = x.Deferred(),
                _ = x.Callbacks("once memory"),
                b = g.statusCode || {},
                o = {},
                s = {},
                w = 0,
                a = "canceled",
                E = {
                    readyState: 0,
                    getResponseHeader: function(e) {
                        var t;
                        if (2 === w) {
                            if (!n)
                                for (n = {}; t = wt.exec(d);) n[t[1].toLowerCase()] = t[2];
                            t = n[e.toLowerCase()]
                        }
                        return null == t ? null : t
                    },
                    getAllResponseHeaders: function() {
                        return 2 === w ? d : null
                    },
                    setRequestHeader: function(e, t) {
                        var n = e.toLowerCase();
                        return w || (e = s[n] = s[n] || e, o[e] = t), this
                    },
                    overrideMimeType: function(e) {
                        return w || (g.mimeType = e), this
                    },
                    statusCode: function(e) {
                        var t;
                        if (e)
                            if (w < 2)
                                for (t in e) b[t] = [b[t], e[t]];
                            else E.always(e[E.status]);
                        return this
                    },
                    abort: function(e) {
                        var t = e || a;
                        return u && u.abort(t), l(0, t), this
                    }
                };
            if (y.promise(E).complete = _.add, E.success = E.done, E.error = E.fail, g.url = ((e || g.url || mt.href) + "").replace(_t, "").replace(Tt, mt.protocol + "//"), g.type = t.method || t.type || g.method || g.type, g.dataTypes = x.trim(g.dataType || "*").toLowerCase().match(O) || [""], null == g.crossDomain) {
                i = C.createElement("a");
                try {
                    i.href = g.url, i.href = i.href, g.crossDomain = At.protocol + "//" + At.host != i.protocol + "//" + i.host
                } catch (e) {
                    g.crossDomain = !0
                }
            }
            if (g.data && g.processData && "string" != typeof g.data && (g.data = x.param(g.data, g.traditional)), kt(Ct, g, t, E), 2 === w) return E;
            for (r in (p = x.event && g.global) && 0 == x.active++ && x.event.trigger("ajaxStart"), g.type = g.type.toUpperCase(), g.hasContent = !Et.test(g.type), f = g.url, g.hasContent || (g.data && (f = g.url += (yt.test(f) ? "&" : "?") + g.data, delete g.data), !1 === g.cache && (g.url = bt.test(f) ? f.replace(bt, "$1_=" + vt++) : f + (yt.test(f) ? "&" : "?") + "_=" + vt++)), g.ifModified && (x.lastModified[f] && E.setRequestHeader("If-Modified-Since", x.lastModified[f]), x.etag[f] && E.setRequestHeader("If-None-Match", x.etag[f])), (g.data && g.hasContent && !1 !== g.contentType || t.contentType) && E.setRequestHeader("Content-Type", g.contentType), E.setRequestHeader("Accept", g.dataTypes[0] && g.accepts[g.dataTypes[0]] ? g.accepts[g.dataTypes[0]] + ("*" !== g.dataTypes[0] ? ", " + St + "; q=0.01" : "") : g.accepts["*"]), g.headers) E.setRequestHeader(r, g.headers[r]);
            if (g.beforeSend && (!1 === g.beforeSend.call(m, E, g) || 2 === w)) return E.abort();
            for (r in a = "abort", {
                    success: 1,
                    error: 1,
                    complete: 1
                }) E[r](g[r]);
            if (u = kt(xt, g, t, E)) {
                if (E.readyState = 1, p && v.trigger("ajaxSend", [E, g]), 2 === w) return E;
                g.async && 0 < g.timeout && (h = T.setTimeout(function() {
                    E.abort("timeout")
                }, g.timeout));
                try {
                    w = 1, u.send(o, l)
                } catch (e) {
                    if (!(w < 2)) throw e;
                    l(-1, e)
                }
            } else l(-1, "No Transport");

            function l(e, t, n, i) {
                var r, o, s, a, l, c = t;
                2 !== w && (w = 2, h && T.clearTimeout(h), u = void 0, d = i || "", E.readyState = 0 < e ? 4 : 0, r = 200 <= e && e < 300 || 304 === e, n && (a = function(e, t, n) {
                    for (var i, r, o, s, a = e.contents, l = e.dataTypes;
                        "*" === l[0];) l.shift(), void 0 === i && (i = e.mimeType || t.getResponseHeader("Content-Type"));
                    if (i)
                        for (r in a)
                            if (a[r] && a[r].test(i)) {
                                l.unshift(r);
                                break
                            } if (l[0] in n) o = l[0];
                    else {
                        for (r in n) {
                            if (!l[0] || e.converters[r + " " + l[0]]) {
                                o = r;
                                break
                            }
                            s = s || r
                        }
                        o = o || s
                    }
                    if (o) return o !== l[0] && l.unshift(o), n[o]
                }(g, E, n)), a = function(e, t, n, i) {
                    var r, o, s, a, l, c = {},
                        u = e.dataTypes.slice();
                    if (u[1])
                        for (s in e.converters) c[s.toLowerCase()] = e.converters[s];
                    for (o = u.shift(); o;)
                        if (e.responseFields[o] && (n[e.responseFields[o]] = t), !l && i && e.dataFilter && (t = e.dataFilter(t, e.dataType)), l = o, o = u.shift())
                            if ("*" === o) o = l;
                            else if ("*" !== l && l !== o) {
                        if (!(s = c[l + " " + o] || c["* " + o]))
                            for (r in c)
                                if ((a = r.split(" "))[1] === o && (s = c[l + " " + a[0]] || c["* " + a[0]])) {
                                    !0 === s ? s = c[r] : !0 !== c[r] && (o = a[0], u.unshift(a[1]));
                                    break
                                } if (!0 !== s)
                            if (s && e.throws) t = s(t);
                            else try {
                                t = s(t)
                            } catch (e) {
                                return {
                                    state: "parsererror",
                                    error: s ? e : "No conversion from " + l + " to " + o
                                }
                            }
                    }
                    return {
                        state: "success",
                        data: t
                    }
                }(g, a, E, r), r ? (g.ifModified && ((l = E.getResponseHeader("Last-Modified")) && (x.lastModified[f] = l), (l = E.getResponseHeader("etag")) && (x.etag[f] = l)), 204 === e || "HEAD" === g.type ? c = "nocontent" : 304 === e ? c = "notmodified" : (c = a.state, o = a.data, r = !(s = a.error))) : (s = c, !e && c || (c = "error", e < 0 && (e = 0))), E.status = e, E.statusText = (t || c) + "", r ? y.resolveWith(m, [o, c, E]) : y.rejectWith(m, [E, c, s]), E.statusCode(b), b = void 0, p && v.trigger(r ? "ajaxSuccess" : "ajaxError", [E, g, r ? o : s]), _.fireWith(m, [E, c]), p && (v.trigger("ajaxComplete", [E, g]), --x.active || x.event.trigger("ajaxStop")))
            }
            return E
        },
        getJSON: function(e, t, n) {
            return x.get(e, t, n, "json")
        },
        getScript: function(e, t) {
            return x.get(e, void 0, t, "script")
        }
    }), x.each(["get", "post"], function(e, r) {
        x[r] = function(e, t, n, i) {
            return x.isFunction(t) && (i = i || n, n = t, t = void 0), x.ajax(x.extend({
                url: e,
                type: r,
                dataType: i,
                data: t,
                success: n
            }, x.isPlainObject(e) && e))
        }
    }), x._evalUrl = function(e) {
        return x.ajax({
            url: e,
            type: "GET",
            dataType: "script",
            async: !1,
            global: !1,
            throws: !0
        })
    }, x.fn.extend({
        wrapAll: function(t) {
            var e;
            return x.isFunction(t) ? this.each(function(e) {
                x(this).wrapAll(t.call(this, e))
            }) : (this[0] && (e = x(t, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && e.insertBefore(this[0]), e.map(function() {
                for (var e = this; e.firstElementChild;) e = e.firstElementChild;
                return e
            }).append(this)), this)
        },
        wrapInner: function(n) {
            return x.isFunction(n) ? this.each(function(e) {
                x(this).wrapInner(n.call(this, e))
            }) : this.each(function() {
                var e = x(this),
                    t = e.contents();
                t.length ? t.wrapAll(n) : e.append(n)
            })
        },
        wrap: function(t) {
            var n = x.isFunction(t);
            return this.each(function(e) {
                x(this).wrapAll(n ? t.call(this, e) : t)
            })
        },
        unwrap: function() {
            return this.parent().each(function() {
                x.nodeName(this, "body") || x(this).replaceWith(this.childNodes)
            }).end()
        }
    }), x.expr.filters.hidden = function(e) {
        return !x.expr.filters.visible(e)
    }, x.expr.filters.visible = function(e) {
        return 0 < e.offsetWidth || 0 < e.offsetHeight || 0 < e.getClientRects().length
    };
    var It = /%20/g,
        Ot = /\[\]$/,
        jt = /\r?\n/g,
        Lt = /^(?:submit|button|image|reset|file)$/i,
        Pt = /^(?:input|select|textarea|keygen)/i;

    function Ht(n, e, i, r) {
        var t;
        if (x.isArray(e)) x.each(e, function(e, t) {
            i || Ot.test(n) ? r(n, t) : Ht(n + "[" + ("object" == typeof t && null != t ? e : "") + "]", t, i, r)
        });
        else if (i || "object" !== x.type(e)) r(n, e);
        else
            for (t in e) Ht(n + "[" + t + "]", e[t], i, r)
    }
    x.param = function(e, t) {
        function n(e, t) {
            t = x.isFunction(t) ? t() : null == t ? "" : t, r[r.length] = encodeURIComponent(e) + "=" + encodeURIComponent(t)
        }
        var i, r = [];
        if (void 0 === t && (t = x.ajaxSettings && x.ajaxSettings.traditional), x.isArray(e) || e.jquery && !x.isPlainObject(e)) x.each(e, function() {
            n(this.name, this.value)
        });
        else
            for (i in e) Ht(i, e[i], t, n);
        return r.join("&").replace(It, "+")
    }, x.fn.extend({
        serialize: function() {
            return x.param(this.serializeArray())
        },
        serializeArray: function() {
            return this.map(function() {
                var e = x.prop(this, "elements");
                return e ? x.makeArray(e) : this
            }).filter(function() {
                var e = this.type;
                return this.name && !x(this).is(":disabled") && Pt.test(this.nodeName) && !Lt.test(e) && (this.checked || !Q.test(e))
            }).map(function(e, t) {
                var n = x(this).val();
                return null == n ? null : x.isArray(n) ? x.map(n, function(e) {
                    return {
                        name: t.name,
                        value: e.replace(jt, "\r\n")
                    }
                }) : {
                    name: t.name,
                    value: n.replace(jt, "\r\n")
                }
            }).get()
        }
    }), x.ajaxSettings.xhr = function() {
        try {
            return new T.XMLHttpRequest
        } catch (e) {}
    };
    var qt = {
            0: 200,
            1223: 204
        },
        Rt = x.ajaxSettings.xhr();
    m.cors = !!Rt && "withCredentials" in Rt, m.ajax = Rt = !!Rt, x.ajaxTransport(function(r) {
        var o, s;
        if (m.cors || Rt && !r.crossDomain) return {
            send: function(e, t) {
                var n, i = r.xhr();
                if (i.open(r.type, r.url, r.async, r.username, r.password), r.xhrFields)
                    for (n in r.xhrFields) i[n] = r.xhrFields[n];
                for (n in r.mimeType && i.overrideMimeType && i.overrideMimeType(r.mimeType), r.crossDomain || e["X-Requested-With"] || (e["X-Requested-With"] = "XMLHttpRequest"), e) i.setRequestHeader(n, e[n]);
                o = function(e) {
                    return function() {
                        o && (o = s = i.onload = i.onerror = i.onabort = i.onreadystatechange = null, "abort" === e ? i.abort() : "error" === e ? "number" != typeof i.status ? t(0, "error") : t(i.status, i.statusText) : t(qt[i.status] || i.status, i.statusText, "text" !== (i.responseType || "text") || "string" != typeof i.responseText ? {
                            binary: i.response
                        } : {
                            text: i.responseText
                        }, i.getAllResponseHeaders()))
                    }
                }, i.onload = o(), s = i.onerror = o("error"), void 0 !== i.onabort ? i.onabort = s : i.onreadystatechange = function() {
                    4 === i.readyState && T.setTimeout(function() {
                        o && s()
                    })
                }, o = o("abort");
                try {
                    i.send(r.hasContent && r.data || null)
                } catch (e) {
                    if (o) throw e
                }
            },
            abort: function() {
                o && o()
            }
        }
    }), x.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function(e) {
                return x.globalEval(e), e
            }
        }
    }), x.ajaxPrefilter("script", function(e) {
        void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = "GET")
    }), x.ajaxTransport("script", function(n) {
        var i, r;
        if (n.crossDomain) return {
            send: function(e, t) {
                i = x("<script>").prop({
                    charset: n.scriptCharset,
                    src: n.url
                }).on("load error", r = function(e) {
                    i.remove(), r = null, e && t("error" === e.type ? 404 : 200, e.type)
                }), C.head.appendChild(i[0])
            },
            abort: function() {
                r && r()
            }
        }
    });
    var Ft = [],
        Mt = /(=)\?(?=&|$)|\?\?/;
    x.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var e = Ft.pop() || x.expando + "_" + vt++;
            return this[e] = !0, e
        }
    }), x.ajaxPrefilter("json jsonp", function(e, t, n) {
        var i, r, o, s = !1 !== e.jsonp && (Mt.test(e.url) ? "url" : "string" == typeof e.data && 0 === (e.contentType || "").indexOf("application/x-www-form-urlencoded") && Mt.test(e.data) && "data");
        if (s || "jsonp" === e.dataTypes[0]) return i = e.jsonpCallback = x.isFunction(e.jsonpCallback) ? e.jsonpCallback() : e.jsonpCallback, s ? e[s] = e[s].replace(Mt, "$1" + i) : !1 !== e.jsonp && (e.url += (yt.test(e.url) ? "&" : "?") + e.jsonp + "=" + i), e.converters["script json"] = function() {
            return o || x.error(i + " was not called"), o[0]
        }, e.dataTypes[0] = "json", r = T[i], T[i] = function() {
            o = arguments
        }, n.always(function() {
            void 0 === r ? x(T).removeProp(i) : T[i] = r, e[i] && (e.jsonpCallback = t.jsonpCallback, Ft.push(i)), o && x.isFunction(r) && r(o[0]), o = r = void 0
        }), "script"
    }), x.parseHTML = function(e, t, n) {
        if (!e || "string" != typeof e) return null;
        "boolean" == typeof t && (n = t, t = !1), t = t || C;
        var i = b.exec(e),
            r = !n && [];
        return i ? [t.createElement(i[1])] : (i = ne([e], t, r), r && r.length && x(r).remove(), x.merge([], i.childNodes))
    };
    var Wt = x.fn.load;

    function Bt(e) {
        return x.isWindow(e) ? e : 9 === e.nodeType && e.defaultView
    }
    x.fn.load = function(e, t, n) {
        if ("string" != typeof e && Wt) return Wt.apply(this, arguments);
        var i, r, o, s = this,
            a = e.indexOf(" ");
        return -1 < a && (i = x.trim(e.slice(a)), e = e.slice(0, a)), x.isFunction(t) ? (n = t, t = void 0) : t && "object" == typeof t && (r = "POST"), 0 < s.length && x.ajax({
            url: e,
            type: r || "GET",
            dataType: "html",
            data: t
        }).done(function(e) {
            o = arguments, s.html(i ? x("<div>").append(x.parseHTML(e)).find(i) : e)
        }).always(n && function(e, t) {
            s.each(function() {
                n.apply(this, o || [e.responseText, t, e])
            })
        }), this
    }, x.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(e, t) {
        x.fn[t] = function(e) {
            return this.on(t, e)
        }
    }), x.expr.filters.animated = function(t) {
        return x.grep(x.timers, function(e) {
            return t === e.elem
        }).length
    }, x.offset = {
        setOffset: function(e, t, n) {
            var i, r, o, s, a, l, c = x.css(e, "position"),
                u = x(e),
                f = {};
            "static" === c && (e.style.position = "relative"), a = u.offset(), o = x.css(e, "top"), l = x.css(e, "left"), r = ("absolute" === c || "fixed" === c) && -1 < (o + l).indexOf("auto") ? (s = (i = u.position()).top, i.left) : (s = parseFloat(o) || 0, parseFloat(l) || 0), x.isFunction(t) && (t = t.call(e, n, x.extend({}, a))), null != t.top && (f.top = t.top - a.top + s), null != t.left && (f.left = t.left - a.left + r), "using" in t ? t.using.call(e, f) : u.css(f)
        }
    }, x.fn.extend({
        offset: function(t) {
            if (arguments.length) return void 0 === t ? this : this.each(function(e) {
                x.offset.setOffset(this, t, e)
            });
            var e, n, i = this[0],
                r = {
                    top: 0,
                    left: 0
                },
                o = i && i.ownerDocument;
            return o ? (e = o.documentElement, x.contains(e, i) ? (r = i.getBoundingClientRect(), n = Bt(o), {
                top: r.top + n.pageYOffset - e.clientTop,
                left: r.left + n.pageXOffset - e.clientLeft
            }) : r) : void 0
        },
        position: function() {
            if (this[0]) {
                var e, t, n = this[0],
                    i = {
                        top: 0,
                        left: 0
                    };
                return "fixed" === x.css(n, "position") ? t = n.getBoundingClientRect() : (e = this.offsetParent(), t = this.offset(), x.nodeName(e[0], "html") || (i = e.offset()), i.top += x.css(e[0], "borderTopWidth", !0), i.left += x.css(e[0], "borderLeftWidth", !0)), {
                    top: t.top - i.top - x.css(n, "marginTop", !0),
                    left: t.left - i.left - x.css(n, "marginLeft", !0)
                }
            }
        },
        offsetParent: function() {
            return this.map(function() {
                for (var e = this.offsetParent; e && "static" === x.css(e, "position");) e = e.offsetParent;
                return e || Pe
            })
        }
    }), x.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(t, r) {
        var o = "pageYOffset" === r;
        x.fn[t] = function(e) {
            return P(this, function(e, t, n) {
                var i = Bt(e);
                if (void 0 === n) return i ? i[r] : e[t];
                i ? i.scrollTo(o ? i.pageXOffset : n, o ? n : i.pageYOffset) : e[t] = n
            }, t, e, arguments.length)
        }
    }), x.each(["top", "left"], function(e, n) {
        x.cssHooks[n] = Re(m.pixelPosition, function(e, t) {
            if (t) return t = qe(e, n), je.test(t) ? x(e).position()[n] + "px" : t
        })
    }), x.each({
        Height: "height",
        Width: "width"
    }, function(o, s) {
        x.each({
            padding: "inner" + o,
            content: s,
            "": "outer" + o
        }, function(i, e) {
            x.fn[e] = function(e, t) {
                var n = arguments.length && (i || "boolean" != typeof e),
                    r = i || (!0 === e || !0 === t ? "margin" : "border");
                return P(this, function(e, t, n) {
                    var i;
                    return x.isWindow(e) ? e.document.documentElement["client" + o] : 9 === e.nodeType ? (i = e.documentElement, Math.max(e.body["scroll" + o], i["scroll" + o], e.body["offset" + o], i["offset" + o], i["client" + o])) : void 0 === n ? x.css(e, t, r) : x.style(e, t, n, r)
                }, s, n ? e : void 0, n, null)
            }
        })
    }), x.fn.extend({
        bind: function(e, t, n) {
            return this.on(e, null, t, n)
        },
        unbind: function(e, t) {
            return this.off(e, null, t)
        },
        delegate: function(e, t, n, i) {
            return this.on(t, e, n, i)
        },
        undelegate: function(e, t, n) {
            return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n)
        },
        size: function() {
            return this.length
        }
    }), x.fn.andSelf = x.fn.addBack, "function" == typeof define && define.amd && define("jquery", [], function() {
        return x
    });
    var Ut = T.jQuery,
        $t = T.$;
    return x.noConflict = function(e) {
        return T.$ === x && (T.$ = $t), e && T.jQuery === x && (T.jQuery = Ut), x
    }, e || (T.jQuery = T.$ = x), x
}),
function(e, t) {
    "object" == typeof exports && "undefined" != typeof module ? t(exports, require("jquery"), require("popper.js")) : "function" == typeof define && define.amd ? define(["exports", "jquery", "popper.js"], t) : t((e = e || self).bootstrap = {}, e.jQuery, e.Popper)
}(this, function(e, p, f) {
    "use strict";

    function i(e, t) {
        for (var n = 0; n < t.length; n++) {
            var i = t[n];
            i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)
        }
    }

    function o(e, t, n) {
        return t && i(e.prototype, t), n && i(e, n), e
    }

    function t(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
            var i = Object.getOwnPropertySymbols(t);
            e && (i = i.filter(function(e) {
                return Object.getOwnPropertyDescriptor(t, e).enumerable
            })), n.push.apply(n, i)
        }
        return n
    }

    function s(r) {
        for (var e = 1; e < arguments.length; e++) {
            var o = null != arguments[e] ? arguments[e] : {};
            e % 2 ? t(Object(o), !0).forEach(function(e) {
                var t, n, i;
                t = r, i = o[n = e], n in t ? Object.defineProperty(t, n, {
                    value: i,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : t[n] = i
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(r, Object.getOwnPropertyDescriptors(o)) : t(Object(o)).forEach(function(e) {
                Object.defineProperty(r, e, Object.getOwnPropertyDescriptor(o, e))
            })
        }
        return r
    }
    p = p && p.hasOwnProperty("default") ? p.default : p, f = f && f.hasOwnProperty("default") ? f.default : f;
    var n = "transitionend";
    var g = {
        TRANSITION_END: "bsTransitionEnd",
        getUID: function(e) {
            for (; e += ~~(1e6 * Math.random()), document.getElementById(e););
            return e
        },
        getSelectorFromElement: function(e) {
            var t = e.getAttribute("data-target");
            if (!t || "#" === t) {
                var n = e.getAttribute("href");
                t = n && "#" !== n ? n.trim() : ""
            }
            try {
                return document.querySelector(t) ? t : null
            } catch (e) {
                return null
            }
        },
        getTransitionDurationFromElement: function(e) {
            if (!e) return 0;
            var t = p(e).css("transition-duration"),
                n = p(e).css("transition-delay"),
                i = parseFloat(t),
                r = parseFloat(n);
            return i || r ? (t = t.split(",")[0], n = n.split(",")[0], 1e3 * (parseFloat(t) + parseFloat(n))) : 0
        },
        reflow: function(e) {
            return e.offsetHeight
        },
        triggerTransitionEnd: function(e) {
            p(e).trigger(n)
        },
        supportsTransitionEnd: function() {
            return Boolean(n)
        },
        isElement: function(e) {
            return (e[0] || e).nodeType
        },
        typeCheckConfig: function(e, t, n) {
            for (var i in n)
                if (Object.prototype.hasOwnProperty.call(n, i)) {
                    var r = n[i],
                        o = t[i],
                        s = o && g.isElement(o) ? "element" : {}.toString.call(o).match(/\s([a-z]+)/i)[1].toLowerCase();
                    if (!new RegExp(r).test(s)) throw new Error(e.toUpperCase() + ': Option "' + i + '" provided type "' + s + '" but expected type "' + r + '".')
                }
        },
        findShadowRoot: function(e) {
            if (!document.documentElement.attachShadow) return null;
            if ("function" != typeof e.getRootNode) return e instanceof ShadowRoot ? e : e.parentNode ? g.findShadowRoot(e.parentNode) : null;
            var t = e.getRootNode();
            return t instanceof ShadowRoot ? t : null
        },
        jQueryDetection: function() {
            if (void 0 === p) throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");
            var e = p.fn.jquery.split(" ")[0].split(".");
            if (e[0] < 2 && e[1] < 9 || 1 === e[0] && 9 === e[1] && e[2] < 1 || 4 <= e[0]) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")
        }
    };
    g.jQueryDetection(), p.fn.emulateTransitionEnd = function(e) {
        var t = this,
            n = !1;
        return p(this).one(g.TRANSITION_END, function() {
            n = !0
        }), setTimeout(function() {
            n || g.triggerTransitionEnd(t)
        }, e), this
    }, p.event.special[g.TRANSITION_END] = {
        bindType: n,
        delegateType: n,
        handle: function(e) {
            if (p(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
        }
    };
    var r, a = "alert",
        l = "bs.alert",
        c = "." + l,
        u = p.fn[a],
        d = {
            CLOSE: "close" + c,
            CLOSED: "closed" + c,
            CLICK_DATA_API: "click" + c + ".data-api"
        },
        h = ((r = m.prototype).close = function(e) {
            var t = this._element;
            e && (t = this._getRootElement(e)), this._triggerCloseEvent(t).isDefaultPrevented() || this._removeElement(t)
        }, r.dispose = function() {
            p.removeData(this._element, l), this._element = null
        }, r._getRootElement = function(e) {
            var t = g.getSelectorFromElement(e),
                n = !1;
            return t && (n = document.querySelector(t)), n || p(e).closest(".alert")[0]
        }, r._triggerCloseEvent = function(e) {
            var t = p.Event(d.CLOSE);
            return p(e).trigger(t), t
        }, r._removeElement = function(t) {
            var n = this;
            if (p(t).removeClass("show"), p(t).hasClass("fade")) {
                var e = g.getTransitionDurationFromElement(t);
                p(t).one(g.TRANSITION_END, function(e) {
                    return n._destroyElement(t, e)
                }).emulateTransitionEnd(e)
            } else this._destroyElement(t)
        }, r._destroyElement = function(e) {
            p(e).detach().trigger(d.CLOSED).remove()
        }, m._jQueryInterface = function(n) {
            return this.each(function() {
                var e = p(this),
                    t = e.data(l);
                t || (t = new m(this), e.data(l, t)), "close" === n && t[n](this)
            })
        }, m._handleDismiss = function(t) {
            return function(e) {
                e && e.preventDefault(), t.close(this)
            }
        }, o(m, null, [{
            key: "VERSION",
            get: function() {
                return "4.4.1"
            }
        }]), m);

    function m(e) {
        this._element = e
    }
    p(document).on(d.CLICK_DATA_API, '[data-dismiss="alert"]', h._handleDismiss(new h)), p.fn[a] = h._jQueryInterface, p.fn[a].Constructor = h, p.fn[a].noConflict = function() {
        return p.fn[a] = u, h._jQueryInterface
    };
    var v, y = "button",
        _ = "bs.button",
        b = "." + _,
        w = ".data-api",
        E = p.fn[y],
        T = "active",
        C = '[data-toggle^="button"]',
        x = 'input:not([type="hidden"])',
        S = {
            CLICK_DATA_API: "click" + b + w,
            FOCUS_BLUR_DATA_API: "focus" + b + w + " blur" + b + w,
            LOAD_DATA_API: "load" + b + w
        },
        A = ((v = D.prototype).toggle = function() {
            var e = !0,
                t = !0,
                n = p(this._element).closest('[data-toggle="buttons"]')[0];
            if (n) {
                var i = this._element.querySelector(x);
                if (i) {
                    if ("radio" === i.type)
                        if (i.checked && this._element.classList.contains(T)) e = !1;
                        else {
                            var r = n.querySelector(".active");
                            r && p(r).removeClass(T)
                        }
                    else "checkbox" === i.type ? "LABEL" === this._element.tagName && i.checked === this._element.classList.contains(T) && (e = !1) : e = !1;
                    e && (i.checked = !this._element.classList.contains(T), p(i).trigger("change")), i.focus(), t = !1
                }
            }
            this._element.hasAttribute("disabled") || this._element.classList.contains("disabled") || (t && this._element.setAttribute("aria-pressed", !this._element.classList.contains(T)), e && p(this._element).toggleClass(T))
        }, v.dispose = function() {
            p.removeData(this._element, _), this._element = null
        }, D._jQueryInterface = function(t) {
            return this.each(function() {
                var e = p(this).data(_);
                e || (e = new D(this), p(this).data(_, e)), "toggle" === t && e[t]()
            })
        }, o(D, null, [{
            key: "VERSION",
            get: function() {
                return "4.4.1"
            }
        }]), D);

    function D(e) {
        this._element = e
    }
    p(document).on(S.CLICK_DATA_API, C, function(e) {
        var t = e.target;
        if (p(t).hasClass("btn") || (t = p(t).closest(".btn")[0]), !t || t.hasAttribute("disabled") || t.classList.contains("disabled")) e.preventDefault();
        else {
            var n = t.querySelector(x);
            if (n && (n.hasAttribute("disabled") || n.classList.contains("disabled"))) return void e.preventDefault();
            A._jQueryInterface.call(p(t), "toggle")
        }
    }).on(S.FOCUS_BLUR_DATA_API, C, function(e) {
        var t = p(e.target).closest(".btn")[0];
        p(t).toggleClass("focus", /^focus(in)?$/.test(e.type))
    }), p(window).on(S.LOAD_DATA_API, function() {
        for (var e = [].slice.call(document.querySelectorAll('[data-toggle="buttons"] .btn')), t = 0, n = e.length; t < n; t++) {
            var i = e[t],
                r = i.querySelector(x);
            r.checked || r.hasAttribute("checked") ? i.classList.add(T) : i.classList.remove(T)
        }
        for (var o = 0, s = (e = [].slice.call(document.querySelectorAll('[data-toggle="button"]'))).length; o < s; o++) {
            var a = e[o];
            "true" === a.getAttribute("aria-pressed") ? a.classList.add(T) : a.classList.remove(T)
        }
    }), p.fn[y] = A._jQueryInterface, p.fn[y].Constructor = A, p.fn[y].noConflict = function() {
        return p.fn[y] = E, A._jQueryInterface
    };
    var k, N = "carousel",
        I = "bs.carousel",
        O = "." + I,
        j = ".data-api",
        L = p.fn[N],
        P = {
            interval: 5e3,
            keyboard: !0,
            slide: !1,
            pause: "hover",
            wrap: !0,
            touch: !0
        },
        H = {
            interval: "(number|boolean)",
            keyboard: "boolean",
            slide: "(boolean|string)",
            pause: "(string|boolean)",
            wrap: "boolean",
            touch: "boolean"
        },
        q = "next",
        R = "prev",
        F = {
            SLIDE: "slide" + O,
            SLID: "slid" + O,
            KEYDOWN: "keydown" + O,
            MOUSEENTER: "mouseenter" + O,
            MOUSELEAVE: "mouseleave" + O,
            TOUCHSTART: "touchstart" + O,
            TOUCHMOVE: "touchmove" + O,
            TOUCHEND: "touchend" + O,
            POINTERDOWN: "pointerdown" + O,
            POINTERUP: "pointerup" + O,
            DRAG_START: "dragstart" + O,
            LOAD_DATA_API: "load" + O + j,
            CLICK_DATA_API: "click" + O + j
        },
        M = "active",
        W = ".active.carousel-item",
        B = {
            TOUCH: "touch",
            PEN: "pen"
        },
        U = ((k = $.prototype).next = function() {
            this._isSliding || this._slide(q)
        }, k.nextWhenVisible = function() {
            !document.hidden && p(this._element).is(":visible") && "hidden" !== p(this._element).css("visibility") && this.next()
        }, k.prev = function() {
            this._isSliding || this._slide(R)
        }, k.pause = function(e) {
            e || (this._isPaused = !0), this._element.querySelector(".carousel-item-next, .carousel-item-prev") && (g.triggerTransitionEnd(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null
        }, k.cycle = function(e) {
            e || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval))
        }, k.to = function(e) {
            var t = this;
            this._activeElement = this._element.querySelector(W);
            var n = this._getItemIndex(this._activeElement);
            if (!(e > this._items.length - 1 || e < 0))
                if (this._isSliding) p(this._element).one(F.SLID, function() {
                    return t.to(e)
                });
                else {
                    if (n === e) return this.pause(), void this.cycle();
                    var i = n < e ? q : R;
                    this._slide(i, this._items[e])
                }
        }, k.dispose = function() {
            p(this._element).off(O), p.removeData(this._element, I), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null
        }, k._getConfig = function(e) {
            return e = s({}, P, {}, e), g.typeCheckConfig(N, e, H), e
        }, k._handleSwipe = function() {
            var e = Math.abs(this.touchDeltaX);
            if (!(e <= 40)) {
                var t = e / this.touchDeltaX;
                (this.touchDeltaX = 0) < t && this.prev(), t < 0 && this.next()
            }
        }, k._addEventListeners = function() {
            var t = this;
            this._config.keyboard && p(this._element).on(F.KEYDOWN, function(e) {
                return t._keydown(e)
            }), "hover" === this._config.pause && p(this._element).on(F.MOUSEENTER, function(e) {
                return t.pause(e)
            }).on(F.MOUSELEAVE, function(e) {
                return t.cycle(e)
            }), this._config.touch && this._addTouchEventListeners()
        }, k._addTouchEventListeners = function() {
            var n = this;
            if (this._touchSupported) {
                var t = function(e) {
                        n._pointerEvent && B[e.originalEvent.pointerType.toUpperCase()] ? n.touchStartX = e.originalEvent.clientX : n._pointerEvent || (n.touchStartX = e.originalEvent.touches[0].clientX)
                    },
                    i = function(e) {
                        n._pointerEvent && B[e.originalEvent.pointerType.toUpperCase()] && (n.touchDeltaX = e.originalEvent.clientX - n.touchStartX), n._handleSwipe(), "hover" === n._config.pause && (n.pause(), n.touchTimeout && clearTimeout(n.touchTimeout), n.touchTimeout = setTimeout(function(e) {
                            return n.cycle(e)
                        }, 500 + n._config.interval))
                    };
                p(this._element.querySelectorAll(".carousel-item img")).on(F.DRAG_START, function(e) {
                    return e.preventDefault()
                }), this._pointerEvent ? (p(this._element).on(F.POINTERDOWN, function(e) {
                    return t(e)
                }), p(this._element).on(F.POINTERUP, function(e) {
                    return i(e)
                }), this._element.classList.add("pointer-event")) : (p(this._element).on(F.TOUCHSTART, function(e) {
                    return t(e)
                }), p(this._element).on(F.TOUCHMOVE, function(e) {
                    var t;
                    (t = e).originalEvent.touches && 1 < t.originalEvent.touches.length ? n.touchDeltaX = 0 : n.touchDeltaX = t.originalEvent.touches[0].clientX - n.touchStartX
                }), p(this._element).on(F.TOUCHEND, function(e) {
                    return i(e)
                }))
            }
        }, k._keydown = function(e) {
            if (!/input|textarea/i.test(e.target.tagName)) switch (e.which) {
                case 37:
                    e.preventDefault(), this.prev();
                    break;
                case 39:
                    e.preventDefault(), this.next()
            }
        }, k._getItemIndex = function(e) {
            return this._items = e && e.parentNode ? [].slice.call(e.parentNode.querySelectorAll(".carousel-item")) : [], this._items.indexOf(e)
        }, k._getItemByDirection = function(e, t) {
            var n = e === q,
                i = e === R,
                r = this._getItemIndex(t),
                o = this._items.length - 1;
            if ((i && 0 === r || n && r === o) && !this._config.wrap) return t;
            var s = (r + (e === R ? -1 : 1)) % this._items.length;
            return -1 == s ? this._items[this._items.length - 1] : this._items[s]
        }, k._triggerSlideEvent = function(e, t) {
            var n = this._getItemIndex(e),
                i = this._getItemIndex(this._element.querySelector(W)),
                r = p.Event(F.SLIDE, {
                    relatedTarget: e,
                    direction: t,
                    from: i,
                    to: n
                });
            return p(this._element).trigger(r), r
        }, k._setActiveIndicatorElement = function(e) {
            if (this._indicatorsElement) {
                var t = [].slice.call(this._indicatorsElement.querySelectorAll(".active"));
                p(t).removeClass(M);
                var n = this._indicatorsElement.children[this._getItemIndex(e)];
                n && p(n).addClass(M)
            }
        }, k._slide = function(e, t) {
            var n, i, r, o = this,
                s = this._element.querySelector(W),
                a = this._getItemIndex(s),
                l = t || s && this._getItemByDirection(e, s),
                c = this._getItemIndex(l),
                u = Boolean(this._interval);
            if (r = e === q ? (n = "carousel-item-left", i = "carousel-item-next", "left") : (n = "carousel-item-right", i = "carousel-item-prev", "right"), l && p(l).hasClass(M)) this._isSliding = !1;
            else if (!this._triggerSlideEvent(l, r).isDefaultPrevented() && s && l) {
                this._isSliding = !0, u && this.pause(), this._setActiveIndicatorElement(l);
                var f = p.Event(F.SLID, {
                    relatedTarget: l,
                    direction: r,
                    from: a,
                    to: c
                });
                if (p(this._element).hasClass("slide")) {
                    p(l).addClass(i), g.reflow(l), p(s).addClass(n), p(l).addClass(n);
                    var d = parseInt(l.getAttribute("data-interval"), 10);
                    d ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, this._config.interval = d) : this._config.interval = this._config.defaultInterval || this._config.interval;
                    var h = g.getTransitionDurationFromElement(s);
                    p(s).one(g.TRANSITION_END, function() {
                        p(l).removeClass(n + " " + i).addClass(M), p(s).removeClass(M + " " + i + " " + n), o._isSliding = !1, setTimeout(function() {
                            return p(o._element).trigger(f)
                        }, 0)
                    }).emulateTransitionEnd(h)
                } else p(s).removeClass(M), p(l).addClass(M), this._isSliding = !1, p(this._element).trigger(f);
                u && this.cycle()
            }
        }, $._jQueryInterface = function(i) {
            return this.each(function() {
                var e = p(this).data(I),
                    t = s({}, P, {}, p(this).data());
                "object" == typeof i && (t = s({}, t, {}, i));
                var n = "string" == typeof i ? i : t.slide;
                if (e || (e = new $(this, t), p(this).data(I, e)), "number" == typeof i) e.to(i);
                else if ("string" == typeof n) {
                    if (void 0 === e[n]) throw new TypeError('No method named "' + n + '"');
                    e[n]()
                } else t.interval && t.ride && (e.pause(), e.cycle())
            })
        }, $._dataApiClickHandler = function(e) {
            var t = g.getSelectorFromElement(this);
            if (t) {
                var n = p(t)[0];
                if (n && p(n).hasClass("carousel")) {
                    var i = s({}, p(n).data(), {}, p(this).data()),
                        r = this.getAttribute("data-slide-to");
                    r && (i.interval = !1), $._jQueryInterface.call(p(n), i), r && p(n).data(I).to(r), e.preventDefault()
                }
            }
        }, o($, null, [{
            key: "VERSION",
            get: function() {
                return "4.4.1"
            }
        }, {
            key: "Default",
            get: function() {
                return P
            }
        }]), $);

    function $(e, t) {
        this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(t), this._element = e, this._indicatorsElement = this._element.querySelector(".carousel-indicators"), this._touchSupported = "ontouchstart" in document.documentElement || 0 < navigator.maxTouchPoints, this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent), this._addEventListeners()
    }
    p(document).on(F.CLICK_DATA_API, "[data-slide], [data-slide-to]", U._dataApiClickHandler), p(window).on(F.LOAD_DATA_API, function() {
        for (var e = [].slice.call(document.querySelectorAll('[data-ride="carousel"]')), t = 0, n = e.length; t < n; t++) {
            var i = p(e[t]);
            U._jQueryInterface.call(i, i.data())
        }
    }), p.fn[N] = U._jQueryInterface, p.fn[N].Constructor = U, p.fn[N].noConflict = function() {
        return p.fn[N] = L, U._jQueryInterface
    };
    var z, K = "collapse",
        Q = "bs.collapse",
        V = "." + Q,
        X = p.fn[K],
        Y = {
            toggle: !0,
            parent: ""
        },
        G = {
            toggle: "boolean",
            parent: "(string|element)"
        },
        J = {
            SHOW: "show" + V,
            SHOWN: "shown" + V,
            HIDE: "hide" + V,
            HIDDEN: "hidden" + V,
            CLICK_DATA_API: "click" + V + ".data-api"
        },
        Z = "show",
        ee = "collapse",
        te = "collapsing",
        ne = "collapsed",
        ie = '[data-toggle="collapse"]',
        re = ((z = oe.prototype).toggle = function() {
            p(this._element).hasClass(Z) ? this.hide() : this.show()
        }, z.show = function() {
            var e, t, n = this;
            if (!(this._isTransitioning || p(this._element).hasClass(Z) || (this._parent && 0 === (e = [].slice.call(this._parent.querySelectorAll(".show, .collapsing")).filter(function(e) {
                    return "string" == typeof n._config.parent ? e.getAttribute("data-parent") === n._config.parent : e.classList.contains(ee)
                })).length && (e = null), e && (t = p(e).not(this._selector).data(Q)) && t._isTransitioning))) {
                var i = p.Event(J.SHOW);
                if (p(this._element).trigger(i), !i.isDefaultPrevented()) {
                    e && (oe._jQueryInterface.call(p(e).not(this._selector), "hide"), t || p(e).data(Q, null));
                    var r = this._getDimension();
                    p(this._element).removeClass(ee).addClass(te), this._element.style[r] = 0, this._triggerArray.length && p(this._triggerArray).removeClass(ne).attr("aria-expanded", !0), this.setTransitioning(!0);
                    var o = "scroll" + (r[0].toUpperCase() + r.slice(1)),
                        s = g.getTransitionDurationFromElement(this._element);
                    p(this._element).one(g.TRANSITION_END, function() {
                        p(n._element).removeClass(te).addClass(ee).addClass(Z), n._element.style[r] = "", n.setTransitioning(!1), p(n._element).trigger(J.SHOWN)
                    }).emulateTransitionEnd(s), this._element.style[r] = this._element[o] + "px"
                }
            }
        }, z.hide = function() {
            var e = this;
            if (!this._isTransitioning && p(this._element).hasClass(Z)) {
                var t = p.Event(J.HIDE);
                if (p(this._element).trigger(t), !t.isDefaultPrevented()) {
                    var n = this._getDimension();
                    this._element.style[n] = this._element.getBoundingClientRect()[n] + "px", g.reflow(this._element), p(this._element).addClass(te).removeClass(ee).removeClass(Z);
                    var i = this._triggerArray.length;
                    if (0 < i)
                        for (var r = 0; r < i; r++) {
                            var o = this._triggerArray[r],
                                s = g.getSelectorFromElement(o);
                            null !== s && (p([].slice.call(document.querySelectorAll(s))).hasClass(Z) || p(o).addClass(ne).attr("aria-expanded", !1))
                        }
                    this.setTransitioning(!0), this._element.style[n] = "";
                    var a = g.getTransitionDurationFromElement(this._element);
                    p(this._element).one(g.TRANSITION_END, function() {
                        e.setTransitioning(!1), p(e._element).removeClass(te).addClass(ee).trigger(J.HIDDEN)
                    }).emulateTransitionEnd(a)
                }
            }
        }, z.setTransitioning = function(e) {
            this._isTransitioning = e
        }, z.dispose = function() {
            p.removeData(this._element, Q), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null
        }, z._getConfig = function(e) {
            return (e = s({}, Y, {}, e)).toggle = Boolean(e.toggle), g.typeCheckConfig(K, e, G), e
        }, z._getDimension = function() {
            return p(this._element).hasClass("width") ? "width" : "height"
        }, z._getParent = function() {
            var e, n = this;
            g.isElement(this._config.parent) ? (e = this._config.parent, void 0 !== this._config.parent.jquery && (e = this._config.parent[0])) : e = document.querySelector(this._config.parent);
            var t = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]',
                i = [].slice.call(e.querySelectorAll(t));
            return p(i).each(function(e, t) {
                n._addAriaAndCollapsedClass(oe._getTargetFromElement(t), [t])
            }), e
        }, z._addAriaAndCollapsedClass = function(e, t) {
            var n = p(e).hasClass(Z);
            t.length && p(t).toggleClass(ne, !n).attr("aria-expanded", n)
        }, oe._getTargetFromElement = function(e) {
            var t = g.getSelectorFromElement(e);
            return t ? document.querySelector(t) : null
        }, oe._jQueryInterface = function(i) {
            return this.each(function() {
                var e = p(this),
                    t = e.data(Q),
                    n = s({}, Y, {}, e.data(), {}, "object" == typeof i && i ? i : {});
                if (!t && n.toggle && /show|hide/.test(i) && (n.toggle = !1), t || (t = new oe(this, n), e.data(Q, t)), "string" == typeof i) {
                    if (void 0 === t[i]) throw new TypeError('No method named "' + i + '"');
                    t[i]()
                }
            })
        }, o(oe, null, [{
            key: "VERSION",
            get: function() {
                return "4.4.1"
            }
        }, {
            key: "Default",
            get: function() {
                return Y
            }
        }]), oe);

    function oe(t, e) {
        this._isTransitioning = !1, this._element = t, this._config = this._getConfig(e), this._triggerArray = [].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#' + t.id + '"],[data-toggle="collapse"][data-target="#' + t.id + '"]'));
        for (var n = [].slice.call(document.querySelectorAll(ie)), i = 0, r = n.length; i < r; i++) {
            var o = n[i],
                s = g.getSelectorFromElement(o),
                a = [].slice.call(document.querySelectorAll(s)).filter(function(e) {
                    return e === t
                });
            null !== s && 0 < a.length && (this._selector = s, this._triggerArray.push(o))
        }
        this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle()
    }
    p(document).on(J.CLICK_DATA_API, ie, function(e) {
        "A" === e.currentTarget.tagName && e.preventDefault();
        var n = p(this),
            t = g.getSelectorFromElement(this),
            i = [].slice.call(document.querySelectorAll(t));
        p(i).each(function() {
            var e = p(this),
                t = e.data(Q) ? "toggle" : n.data();
            re._jQueryInterface.call(e, t)
        })
    }), p.fn[K] = re._jQueryInterface, p.fn[K].Constructor = re, p.fn[K].noConflict = function() {
        return p.fn[K] = X, re._jQueryInterface
    };
    var se, ae = "dropdown",
        le = "bs.dropdown",
        ce = "." + le,
        ue = ".data-api",
        fe = p.fn[ae],
        de = new RegExp("38|40|27"),
        he = {
            HIDE: "hide" + ce,
            HIDDEN: "hidden" + ce,
            SHOW: "show" + ce,
            SHOWN: "shown" + ce,
            CLICK: "click" + ce,
            CLICK_DATA_API: "click" + ce + ue,
            KEYDOWN_DATA_API: "keydown" + ce + ue,
            KEYUP_DATA_API: "keyup" + ce + ue
        },
        pe = "disabled",
        ge = "show",
        me = "dropdown-menu-right",
        ve = '[data-toggle="dropdown"]',
        ye = ".dropdown-menu",
        _e = {
            offset: 0,
            flip: !0,
            boundary: "scrollParent",
            reference: "toggle",
            display: "dynamic",
            popperConfig: null
        },
        be = {
            offset: "(number|string|function)",
            flip: "boolean",
            boundary: "(string|element)",
            reference: "(string|element)",
            display: "string",
            popperConfig: "(null|object)"
        },
        we = ((se = Ee.prototype).toggle = function() {
            if (!this._element.disabled && !p(this._element).hasClass(pe)) {
                var e = p(this._menu).hasClass(ge);
                Ee._clearMenus(), e || this.show(!0)
            }
        }, se.show = function(e) {
            if (void 0 === e && (e = !1), !(this._element.disabled || p(this._element).hasClass(pe) || p(this._menu).hasClass(ge))) {
                var t = {
                        relatedTarget: this._element
                    },
                    n = p.Event(he.SHOW, t),
                    i = Ee._getParentFromElement(this._element);
                if (p(i).trigger(n), !n.isDefaultPrevented()) {
                    if (!this._inNavbar && e) {
                        if (void 0 === f) throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");
                        var r = this._element;
                        "parent" === this._config.reference ? r = i : g.isElement(this._config.reference) && (r = this._config.reference, void 0 !== this._config.reference.jquery && (r = this._config.reference[0])), "scrollParent" !== this._config.boundary && p(i).addClass("position-static"), this._popper = new f(r, this._menu, this._getPopperConfig())
                    }
                    "ontouchstart" in document.documentElement && 0 === p(i).closest(".navbar-nav").length && p(document.body).children().on("mouseover", null, p.noop), this._element.focus(), this._element.setAttribute("aria-expanded", !0), p(this._menu).toggleClass(ge), p(i).toggleClass(ge).trigger(p.Event(he.SHOWN, t))
                }
            }
        }, se.hide = function() {
            if (!this._element.disabled && !p(this._element).hasClass(pe) && p(this._menu).hasClass(ge)) {
                var e = {
                        relatedTarget: this._element
                    },
                    t = p.Event(he.HIDE, e),
                    n = Ee._getParentFromElement(this._element);
                p(n).trigger(t), t.isDefaultPrevented() || (this._popper && this._popper.destroy(), p(this._menu).toggleClass(ge), p(n).toggleClass(ge).trigger(p.Event(he.HIDDEN, e)))
            }
        }, se.dispose = function() {
            p.removeData(this._element, le), p(this._element).off(ce), this._element = null, (this._menu = null) !== this._popper && (this._popper.destroy(), this._popper = null)
        }, se.update = function() {
            this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate()
        }, se._addEventListeners = function() {
            var t = this;
            p(this._element).on(he.CLICK, function(e) {
                e.preventDefault(), e.stopPropagation(), t.toggle()
            })
        }, se._getConfig = function(e) {
            return e = s({}, this.constructor.Default, {}, p(this._element).data(), {}, e), g.typeCheckConfig(ae, e, this.constructor.DefaultType), e
        }, se._getMenuElement = function() {
            if (!this._menu) {
                var e = Ee._getParentFromElement(this._element);
                e && (this._menu = e.querySelector(ye))
            }
            return this._menu
        }, se._getPlacement = function() {
            var e = p(this._element.parentNode),
                t = "bottom-start";
            return e.hasClass("dropup") ? (t = "top-start", p(this._menu).hasClass(me) && (t = "top-end")) : e.hasClass("dropright") ? t = "right-start" : e.hasClass("dropleft") ? t = "left-start" : p(this._menu).hasClass(me) && (t = "bottom-end"), t
        }, se._detectNavbar = function() {
            return 0 < p(this._element).closest(".navbar").length
        }, se._getOffset = function() {
            var t = this,
                e = {};
            return "function" == typeof this._config.offset ? e.fn = function(e) {
                return e.offsets = s({}, e.offsets, {}, t._config.offset(e.offsets, t._element) || {}), e
            } : e.offset = this._config.offset, e
        }, se._getPopperConfig = function() {
            var e = {
                placement: this._getPlacement(),
                modifiers: {
                    offset: this._getOffset(),
                    flip: {
                        enabled: this._config.flip
                    },
                    preventOverflow: {
                        boundariesElement: this._config.boundary
                    }
                }
            };
            return "static" === this._config.display && (e.modifiers.applyStyle = {
                enabled: !1
            }), s({}, e, {}, this._config.popperConfig)
        }, Ee._jQueryInterface = function(t) {
            return this.each(function() {
                var e = p(this).data(le);
                if (e || (e = new Ee(this, "object" == typeof t ? t : null), p(this).data(le, e)), "string" == typeof t) {
                    if (void 0 === e[t]) throw new TypeError('No method named "' + t + '"');
                    e[t]()
                }
            })
        }, Ee._clearMenus = function(e) {
            if (!e || 3 !== e.which && ("keyup" !== e.type || 9 === e.which))
                for (var t = [].slice.call(document.querySelectorAll(ve)), n = 0, i = t.length; n < i; n++) {
                    var r = Ee._getParentFromElement(t[n]),
                        o = p(t[n]).data(le),
                        s = {
                            relatedTarget: t[n]
                        };
                    if (e && "click" === e.type && (s.clickEvent = e), o) {
                        var a = o._menu;
                        if (p(r).hasClass(ge) && !(e && ("click" === e.type && /input|textarea/i.test(e.target.tagName) || "keyup" === e.type && 9 === e.which) && p.contains(r, e.target))) {
                            var l = p.Event(he.HIDE, s);
                            p(r).trigger(l), l.isDefaultPrevented() || ("ontouchstart" in document.documentElement && p(document.body).children().off("mouseover", null, p.noop), t[n].setAttribute("aria-expanded", "false"), o._popper && o._popper.destroy(), p(a).removeClass(ge), p(r).removeClass(ge).trigger(p.Event(he.HIDDEN, s)))
                        }
                    }
                }
        }, Ee._getParentFromElement = function(e) {
            var t, n = g.getSelectorFromElement(e);
            return n && (t = document.querySelector(n)), t || e.parentNode
        }, Ee._dataApiKeydownHandler = function(e) {
            if ((/input|textarea/i.test(e.target.tagName) ? !(32 === e.which || 27 !== e.which && (40 !== e.which && 38 !== e.which || p(e.target).closest(ye).length)) : de.test(e.which)) && (e.preventDefault(), e.stopPropagation(), !this.disabled && !p(this).hasClass(pe))) {
                var t = Ee._getParentFromElement(this),
                    n = p(t).hasClass(ge);
                if (n || 27 !== e.which)
                    if (n && (!n || 27 !== e.which && 32 !== e.which)) {
                        var i = [].slice.call(t.querySelectorAll(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)")).filter(function(e) {
                            return p(e).is(":visible")
                        });
                        if (0 !== i.length) {
                            var r = i.indexOf(e.target);
                            38 === e.which && 0 < r && r--, 40 === e.which && r < i.length - 1 && r++, r < 0 && (r = 0), i[r].focus()
                        }
                    } else {
                        if (27 === e.which) {
                            var o = t.querySelector(ve);
                            p(o).trigger("focus")
                        }
                        p(this).trigger("click")
                    }
            }
        }, o(Ee, null, [{
            key: "VERSION",
            get: function() {
                return "4.4.1"
            }
        }, {
            key: "Default",
            get: function() {
                return _e
            }
        }, {
            key: "DefaultType",
            get: function() {
                return be
            }
        }]), Ee);

    function Ee(e, t) {
        this._element = e, this._popper = null, this._config = this._getConfig(t), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners()
    }
    p(document).on(he.KEYDOWN_DATA_API, ve, we._dataApiKeydownHandler).on(he.KEYDOWN_DATA_API, ye, we._dataApiKeydownHandler).on(he.CLICK_DATA_API + " " + he.KEYUP_DATA_API, we._clearMenus).on(he.CLICK_DATA_API, ve, function(e) {
        e.preventDefault(), e.stopPropagation(), we._jQueryInterface.call(p(this), "toggle")
    }).on(he.CLICK_DATA_API, ".dropdown form", function(e) {
        e.stopPropagation()
    }), p.fn[ae] = we._jQueryInterface, p.fn[ae].Constructor = we, p.fn[ae].noConflict = function() {
        return p.fn[ae] = fe, we._jQueryInterface
    };
    var Te, Ce = "modal",
        xe = "bs.modal",
        Se = "." + xe,
        Ae = p.fn[Ce],
        De = {
            backdrop: !0,
            keyboard: !0,
            focus: !0,
            show: !0
        },
        ke = {
            backdrop: "(boolean|string)",
            keyboard: "boolean",
            focus: "boolean",
            show: "boolean"
        },
        Ne = {
            HIDE: "hide" + Se,
            HIDE_PREVENTED: "hidePrevented" + Se,
            HIDDEN: "hidden" + Se,
            SHOW: "show" + Se,
            SHOWN: "shown" + Se,
            FOCUSIN: "focusin" + Se,
            RESIZE: "resize" + Se,
            CLICK_DISMISS: "click.dismiss" + Se,
            KEYDOWN_DISMISS: "keydown.dismiss" + Se,
            MOUSEUP_DISMISS: "mouseup.dismiss" + Se,
            MOUSEDOWN_DISMISS: "mousedown.dismiss" + Se,
            CLICK_DATA_API: "click" + Se + ".data-api"
        },
        Ie = "modal-open",
        Oe = "fade",
        je = "show",
        Le = "modal-static",
        Pe = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
        He = ".sticky-top",
        qe = ((Te = Re.prototype).toggle = function(e) {
            return this._isShown ? this.hide() : this.show(e)
        }, Te.show = function(e) {
            var t = this;
            if (!this._isShown && !this._isTransitioning) {
                p(this._element).hasClass(Oe) && (this._isTransitioning = !0);
                var n = p.Event(Ne.SHOW, {
                    relatedTarget: e
                });
                p(this._element).trigger(n), this._isShown || n.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), p(this._element).on(Ne.CLICK_DISMISS, '[data-dismiss="modal"]', function(e) {
                    return t.hide(e)
                }), p(this._dialog).on(Ne.MOUSEDOWN_DISMISS, function() {
                    p(t._element).one(Ne.MOUSEUP_DISMISS, function(e) {
                        p(e.target).is(t._element) && (t._ignoreBackdropClick = !0)
                    })
                }), this._showBackdrop(function() {
                    return t._showElement(e)
                }))
            }
        }, Te.hide = function(e) {
            var t = this;
            if (e && e.preventDefault(), this._isShown && !this._isTransitioning) {
                var n = p.Event(Ne.HIDE);
                if (p(this._element).trigger(n), this._isShown && !n.isDefaultPrevented()) {
                    this._isShown = !1;
                    var i = p(this._element).hasClass(Oe);
                    if (i && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), p(document).off(Ne.FOCUSIN), p(this._element).removeClass(je), p(this._element).off(Ne.CLICK_DISMISS), p(this._dialog).off(Ne.MOUSEDOWN_DISMISS), i) {
                        var r = g.getTransitionDurationFromElement(this._element);
                        p(this._element).one(g.TRANSITION_END, function(e) {
                            return t._hideModal(e)
                        }).emulateTransitionEnd(r)
                    } else this._hideModal()
                }
            }
        }, Te.dispose = function() {
            [window, this._element, this._dialog].forEach(function(e) {
                return p(e).off(Se)
            }), p(document).off(Ne.FOCUSIN), p.removeData(this._element, xe), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._isTransitioning = null, this._scrollbarWidth = null
        }, Te.handleUpdate = function() {
            this._adjustDialog()
        }, Te._getConfig = function(e) {
            return e = s({}, De, {}, e), g.typeCheckConfig(Ce, e, ke), e
        }, Te._triggerBackdropTransition = function() {
            var e = this;
            if ("static" === this._config.backdrop) {
                var t = p.Event(Ne.HIDE_PREVENTED);
                if (p(this._element).trigger(t), t.defaultPrevented) return;
                this._element.classList.add(Le);
                var n = g.getTransitionDurationFromElement(this._element);
                p(this._element).one(g.TRANSITION_END, function() {
                    e._element.classList.remove(Le)
                }).emulateTransitionEnd(n), this._element.focus()
            } else this.hide()
        }, Te._showElement = function(e) {
            var t = this,
                n = p(this._element).hasClass(Oe),
                i = this._dialog ? this._dialog.querySelector(".modal-body") : null;

            function r() {
                t._config.focus && t._element.focus(), t._isTransitioning = !1, p(t._element).trigger(o)
            }
            this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.setAttribute("aria-modal", !0), p(this._dialog).hasClass("modal-dialog-scrollable") && i ? i.scrollTop = 0 : this._element.scrollTop = 0, n && g.reflow(this._element), p(this._element).addClass(je), this._config.focus && this._enforceFocus();
            var o = p.Event(Ne.SHOWN, {
                relatedTarget: e
            });
            if (n) {
                var s = g.getTransitionDurationFromElement(this._dialog);
                p(this._dialog).one(g.TRANSITION_END, r).emulateTransitionEnd(s)
            } else r()
        }, Te._enforceFocus = function() {
            var t = this;
            p(document).off(Ne.FOCUSIN).on(Ne.FOCUSIN, function(e) {
                document !== e.target && t._element !== e.target && 0 === p(t._element).has(e.target).length && t._element.focus()
            })
        }, Te._setEscapeEvent = function() {
            var t = this;
            this._isShown && this._config.keyboard ? p(this._element).on(Ne.KEYDOWN_DISMISS, function(e) {
                27 === e.which && t._triggerBackdropTransition()
            }) : this._isShown || p(this._element).off(Ne.KEYDOWN_DISMISS)
        }, Te._setResizeEvent = function() {
            var t = this;
            this._isShown ? p(window).on(Ne.RESIZE, function(e) {
                return t.handleUpdate(e)
            }) : p(window).off(Ne.RESIZE)
        }, Te._hideModal = function() {
            var e = this;
            this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), this._element.removeAttribute("aria-modal"), this._isTransitioning = !1, this._showBackdrop(function() {
                p(document.body).removeClass(Ie), e._resetAdjustments(), e._resetScrollbar(), p(e._element).trigger(Ne.HIDDEN)
            })
        }, Te._removeBackdrop = function() {
            this._backdrop && (p(this._backdrop).remove(), this._backdrop = null)
        }, Te._showBackdrop = function(e) {
            var t = this,
                n = p(this._element).hasClass(Oe) ? Oe : "";
            if (this._isShown && this._config.backdrop) {
                if (this._backdrop = document.createElement("div"), this._backdrop.className = "modal-backdrop", n && this._backdrop.classList.add(n), p(this._backdrop).appendTo(document.body), p(this._element).on(Ne.CLICK_DISMISS, function(e) {
                        t._ignoreBackdropClick ? t._ignoreBackdropClick = !1 : e.target === e.currentTarget && t._triggerBackdropTransition()
                    }), n && g.reflow(this._backdrop), p(this._backdrop).addClass(je), !e) return;
                if (!n) return void e();
                var i = g.getTransitionDurationFromElement(this._backdrop);
                p(this._backdrop).one(g.TRANSITION_END, e).emulateTransitionEnd(i)
            } else if (!this._isShown && this._backdrop) {
                p(this._backdrop).removeClass(je);
                var r = function() {
                    t._removeBackdrop(), e && e()
                };
                if (p(this._element).hasClass(Oe)) {
                    var o = g.getTransitionDurationFromElement(this._backdrop);
                    p(this._backdrop).one(g.TRANSITION_END, r).emulateTransitionEnd(o)
                } else r()
            } else e && e()
        }, Te._adjustDialog = function() {
            var e = this._element.scrollHeight > document.documentElement.clientHeight;
            !this._isBodyOverflowing && e && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), this._isBodyOverflowing && !e && (this._element.style.paddingRight = this._scrollbarWidth + "px")
        }, Te._resetAdjustments = function() {
            this._element.style.paddingLeft = "", this._element.style.paddingRight = ""
        }, Te._checkScrollbar = function() {
            var e = document.body.getBoundingClientRect();
            this._isBodyOverflowing = e.left + e.right < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth()
        }, Te._setScrollbar = function() {
            var r = this;
            if (this._isBodyOverflowing) {
                var e = [].slice.call(document.querySelectorAll(Pe)),
                    t = [].slice.call(document.querySelectorAll(He));
                p(e).each(function(e, t) {
                    var n = t.style.paddingRight,
                        i = p(t).css("padding-right");
                    p(t).data("padding-right", n).css("padding-right", parseFloat(i) + r._scrollbarWidth + "px")
                }), p(t).each(function(e, t) {
                    var n = t.style.marginRight,
                        i = p(t).css("margin-right");
                    p(t).data("margin-right", n).css("margin-right", parseFloat(i) - r._scrollbarWidth + "px")
                });
                var n = document.body.style.paddingRight,
                    i = p(document.body).css("padding-right");
                p(document.body).data("padding-right", n).css("padding-right", parseFloat(i) + this._scrollbarWidth + "px")
            }
            p(document.body).addClass(Ie)
        }, Te._resetScrollbar = function() {
            var e = [].slice.call(document.querySelectorAll(Pe));
            p(e).each(function(e, t) {
                var n = p(t).data("padding-right");
                p(t).removeData("padding-right"), t.style.paddingRight = n || ""
            });
            var t = [].slice.call(document.querySelectorAll(He));
            p(t).each(function(e, t) {
                var n = p(t).data("margin-right");
                void 0 !== n && p(t).css("margin-right", n).removeData("margin-right")
            });
            var n = p(document.body).data("padding-right");
            p(document.body).removeData("padding-right"), document.body.style.paddingRight = n || ""
        }, Te._getScrollbarWidth = function() {
            var e = document.createElement("div");
            e.className = "modal-scrollbar-measure", document.body.appendChild(e);
            var t = e.getBoundingClientRect().width - e.clientWidth;
            return document.body.removeChild(e), t
        }, Re._jQueryInterface = function(n, i) {
            return this.each(function() {
                var e = p(this).data(xe),
                    t = s({}, De, {}, p(this).data(), {}, "object" == typeof n && n ? n : {});
                if (e || (e = new Re(this, t), p(this).data(xe, e)), "string" == typeof n) {
                    if (void 0 === e[n]) throw new TypeError('No method named "' + n + '"');
                    e[n](i)
                } else t.show && e.show(i)
            })
        }, o(Re, null, [{
            key: "VERSION",
            get: function() {
                return "4.4.1"
            }
        }, {
            key: "Default",
            get: function() {
                return De
            }
        }]), Re);

    function Re(e, t) {
        this._config = this._getConfig(t), this._element = e, this._dialog = e.querySelector(".modal-dialog"), this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._scrollbarWidth = 0
    }
    p(document).on(Ne.CLICK_DATA_API, '[data-toggle="modal"]', function(e) {
        var t, n = this,
            i = g.getSelectorFromElement(this);
        i && (t = document.querySelector(i));
        var r = p(t).data(xe) ? "toggle" : s({}, p(t).data(), {}, p(this).data());
        "A" !== this.tagName && "AREA" !== this.tagName || e.preventDefault();
        var o = p(t).one(Ne.SHOW, function(e) {
            e.isDefaultPrevented() || o.one(Ne.HIDDEN, function() {
                p(n).is(":visible") && n.focus()
            })
        });
        qe._jQueryInterface.call(p(t), r, this)
    }), p.fn[Ce] = qe._jQueryInterface, p.fn[Ce].Constructor = qe, p.fn[Ce].noConflict = function() {
        return p.fn[Ce] = Ae, qe._jQueryInterface
    };
    var Fe = ["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"],
        Me = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,
        We = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;

    function Be(e, o, t) {
        if (0 === e.length) return e;
        if (t && "function" == typeof t) return t(e);
        for (var n = (new window.DOMParser).parseFromString(e, "text/html"), s = Object.keys(o), a = [].slice.call(n.body.querySelectorAll("*")), i = function(e) {
                var t = a[e],
                    n = t.nodeName.toLowerCase();
                if (-1 === s.indexOf(t.nodeName.toLowerCase())) return t.parentNode.removeChild(t), "continue";
                var i = [].slice.call(t.attributes),
                    r = [].concat(o["*"] || [], o[n] || []);
                i.forEach(function(e) {
                    ! function(e, t) {
                        var n = e.nodeName.toLowerCase();
                        if (-1 !== t.indexOf(n)) return -1 === Fe.indexOf(n) || Boolean(e.nodeValue.match(Me) || e.nodeValue.match(We));
                        for (var i = t.filter(function(e) {
                                return e instanceof RegExp
                            }), r = 0, o = i.length; r < o; r++)
                            if (n.match(i[r])) return 1
                    }(e, r) && t.removeAttribute(e.nodeName)
                })
            }, r = 0, l = a.length; r < l; r++) i(r);
        return n.body.innerHTML
    }
    var Ue, $e = "tooltip",
        ze = "bs.tooltip",
        Ke = "." + ze,
        Qe = p.fn[$e],
        Ve = "bs-tooltip",
        Xe = new RegExp("(^|\\s)" + Ve + "\\S+", "g"),
        Ye = ["sanitize", "whiteList", "sanitizeFn"],
        Ge = {
            animation: "boolean",
            template: "string",
            title: "(string|element|function)",
            trigger: "string",
            delay: "(number|object)",
            html: "boolean",
            selector: "(string|boolean)",
            placement: "(string|function)",
            offset: "(number|string|function)",
            container: "(string|element|boolean)",
            fallbackPlacement: "(string|array)",
            boundary: "(string|element)",
            sanitize: "boolean",
            sanitizeFn: "(null|function)",
            whiteList: "object",
            popperConfig: "(null|object)"
        },
        Je = {
            AUTO: "auto",
            TOP: "top",
            RIGHT: "right",
            BOTTOM: "bottom",
            LEFT: "left"
        },
        Ze = {
            animation: !0,
            template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',
            trigger: "hover focus",
            title: "",
            delay: 0,
            html: !1,
            selector: !1,
            placement: "top",
            offset: 0,
            container: !1,
            fallbackPlacement: "flip",
            boundary: "scrollParent",
            sanitize: !0,
            sanitizeFn: null,
            whiteList: {
                "*": ["class", "dir", "id", "lang", "role", /^aria-[\w-]*$/i],
                a: ["target", "href", "title", "rel"],
                area: [],
                b: [],
                br: [],
                col: [],
                code: [],
                div: [],
                em: [],
                hr: [],
                h1: [],
                h2: [],
                h3: [],
                h4: [],
                h5: [],
                h6: [],
                i: [],
                img: ["src", "alt", "title", "width", "height"],
                li: [],
                ol: [],
                p: [],
                pre: [],
                s: [],
                small: [],
                span: [],
                sub: [],
                sup: [],
                strong: [],
                u: [],
                ul: []
            },
            popperConfig: null
        },
        et = "show",
        tt = {
            HIDE: "hide" + Ke,
            HIDDEN: "hidden" + Ke,
            SHOW: "show" + Ke,
            SHOWN: "shown" + Ke,
            INSERTED: "inserted" + Ke,
            CLICK: "click" + Ke,
            FOCUSIN: "focusin" + Ke,
            FOCUSOUT: "focusout" + Ke,
            MOUSEENTER: "mouseenter" + Ke,
            MOUSELEAVE: "mouseleave" + Ke
        },
        nt = "fade",
        it = "show",
        rt = "hover",
        ot = "focus",
        st = ((Ue = at.prototype).enable = function() {
            this._isEnabled = !0
        }, Ue.disable = function() {
            this._isEnabled = !1
        }, Ue.toggleEnabled = function() {
            this._isEnabled = !this._isEnabled
        }, Ue.toggle = function(e) {
            if (this._isEnabled)
                if (e) {
                    var t = this.constructor.DATA_KEY,
                        n = p(e.currentTarget).data(t);
                    n || (n = new this.constructor(e.currentTarget, this._getDelegateConfig()), p(e.currentTarget).data(t, n)), n._activeTrigger.click = !n._activeTrigger.click, n._isWithActiveTrigger() ? n._enter(null, n) : n._leave(null, n)
                } else {
                    if (p(this.getTipElement()).hasClass(it)) return void this._leave(null, this);
                    this._enter(null, this)
                }
        }, Ue.dispose = function() {
            clearTimeout(this._timeout), p.removeData(this.element, this.constructor.DATA_KEY), p(this.element).off(this.constructor.EVENT_KEY), p(this.element).closest(".modal").off("hide.bs.modal", this._hideModalHandler), this.tip && p(this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, this._activeTrigger = null, this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null
        }, Ue.show = function() {
            var t = this;
            if ("none" === p(this.element).css("display")) throw new Error("Please use show on visible elements");
            var e = p.Event(this.constructor.Event.SHOW);
            if (this.isWithContent() && this._isEnabled) {
                p(this.element).trigger(e);
                var n = g.findShadowRoot(this.element),
                    i = p.contains(null !== n ? n : this.element.ownerDocument.documentElement, this.element);
                if (e.isDefaultPrevented() || !i) return;
                var r = this.getTipElement(),
                    o = g.getUID(this.constructor.NAME);
                r.setAttribute("id", o), this.element.setAttribute("aria-describedby", o), this.setContent(), this.config.animation && p(r).addClass(nt);
                var s = "function" == typeof this.config.placement ? this.config.placement.call(this, r, this.element) : this.config.placement,
                    a = this._getAttachment(s);
                this.addAttachmentClass(a);
                var l = this._getContainer();
                p(r).data(this.constructor.DATA_KEY, this), p.contains(this.element.ownerDocument.documentElement, this.tip) || p(r).appendTo(l), p(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new f(this.element, r, this._getPopperConfig(a)), p(r).addClass(it), "ontouchstart" in document.documentElement && p(document.body).children().on("mouseover", null, p.noop);
                var c = function() {
                    t.config.animation && t._fixTransition();
                    var e = t._hoverState;
                    t._hoverState = null, p(t.element).trigger(t.constructor.Event.SHOWN), "out" === e && t._leave(null, t)
                };
                if (p(this.tip).hasClass(nt)) {
                    var u = g.getTransitionDurationFromElement(this.tip);
                    p(this.tip).one(g.TRANSITION_END, c).emulateTransitionEnd(u)
                } else c()
            }
        }, Ue.hide = function(e) {
            function t() {
                n._hoverState !== et && i.parentNode && i.parentNode.removeChild(i), n._cleanTipClass(), n.element.removeAttribute("aria-describedby"), p(n.element).trigger(n.constructor.Event.HIDDEN), null !== n._popper && n._popper.destroy(), e && e()
            }
            var n = this,
                i = this.getTipElement(),
                r = p.Event(this.constructor.Event.HIDE);
            if (p(this.element).trigger(r), !r.isDefaultPrevented()) {
                if (p(i).removeClass(it), "ontouchstart" in document.documentElement && p(document.body).children().off("mouseover", null, p.noop), this._activeTrigger.click = !1, this._activeTrigger[ot] = !1, this._activeTrigger[rt] = !1, p(this.tip).hasClass(nt)) {
                    var o = g.getTransitionDurationFromElement(i);
                    p(i).one(g.TRANSITION_END, t).emulateTransitionEnd(o)
                } else t();
                this._hoverState = ""
            }
        }, Ue.update = function() {
            null !== this._popper && this._popper.scheduleUpdate()
        }, Ue.isWithContent = function() {
            return Boolean(this.getTitle())
        }, Ue.addAttachmentClass = function(e) {
            p(this.getTipElement()).addClass(Ve + "-" + e)
        }, Ue.getTipElement = function() {
            return this.tip = this.tip || p(this.config.template)[0], this.tip
        }, Ue.setContent = function() {
            var e = this.getTipElement();
            this.setElementContent(p(e.querySelectorAll(".tooltip-inner")), this.getTitle()), p(e).removeClass(nt + " " + it)
        }, Ue.setElementContent = function(e, t) {
            "object" != typeof t || !t.nodeType && !t.jquery ? this.config.html ? (this.config.sanitize && (t = Be(t, this.config.whiteList, this.config.sanitizeFn)), e.html(t)) : e.text(t) : this.config.html ? p(t).parent().is(e) || e.empty().append(t) : e.text(p(t).text())
        }, Ue.getTitle = function() {
            var e = this.element.getAttribute("data-original-title");
            return e || ("function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title)
        }, Ue._getPopperConfig = function(e) {
            var t = this;
            return s({}, {
                placement: e,
                modifiers: {
                    offset: this._getOffset(),
                    flip: {
                        behavior: this.config.fallbackPlacement
                    },
                    arrow: {
                        element: ".arrow"
                    },
                    preventOverflow: {
                        boundariesElement: this.config.boundary
                    }
                },
                onCreate: function(e) {
                    e.originalPlacement !== e.placement && t._handlePopperPlacementChange(e)
                },
                onUpdate: function(e) {
                    return t._handlePopperPlacementChange(e)
                }
            }, {}, this.config.popperConfig)
        }, Ue._getOffset = function() {
            var t = this,
                e = {};
            return "function" == typeof this.config.offset ? e.fn = function(e) {
                return e.offsets = s({}, e.offsets, {}, t.config.offset(e.offsets, t.element) || {}), e
            } : e.offset = this.config.offset, e
        }, Ue._getContainer = function() {
            return !1 === this.config.container ? document.body : g.isElement(this.config.container) ? p(this.config.container) : p(document).find(this.config.container)
        }, Ue._getAttachment = function(e) {
            return Je[e.toUpperCase()]
        }, Ue._setListeners = function() {
            var i = this;
            this.config.trigger.split(" ").forEach(function(e) {
                if ("click" === e) p(i.element).on(i.constructor.Event.CLICK, i.config.selector, function(e) {
                    return i.toggle(e)
                });
                else if ("manual" !== e) {
                    var t = e === rt ? i.constructor.Event.MOUSEENTER : i.constructor.Event.FOCUSIN,
                        n = e === rt ? i.constructor.Event.MOUSELEAVE : i.constructor.Event.FOCUSOUT;
                    p(i.element).on(t, i.config.selector, function(e) {
                        return i._enter(e)
                    }).on(n, i.config.selector, function(e) {
                        return i._leave(e)
                    })
                }
            }), this._hideModalHandler = function() {
                i.element && i.hide()
            }, p(this.element).closest(".modal").on("hide.bs.modal", this._hideModalHandler), this.config.selector ? this.config = s({}, this.config, {
                trigger: "manual",
                selector: ""
            }) : this._fixTitle()
        }, Ue._fixTitle = function() {
            var e = typeof this.element.getAttribute("data-original-title");
            !this.element.getAttribute("title") && "string" == e || (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), this.element.setAttribute("title", ""))
        }, Ue._enter = function(e, t) {
            var n = this.constructor.DATA_KEY;
            (t = t || p(e.currentTarget).data(n)) || (t = new this.constructor(e.currentTarget, this._getDelegateConfig()), p(e.currentTarget).data(n, t)), e && (t._activeTrigger["focusin" === e.type ? ot : rt] = !0), p(t.getTipElement()).hasClass(it) || t._hoverState === et ? t._hoverState = et : (clearTimeout(t._timeout), t._hoverState = et, t.config.delay && t.config.delay.show ? t._timeout = setTimeout(function() {
                t._hoverState === et && t.show()
            }, t.config.delay.show) : t.show())
        }, Ue._leave = function(e, t) {
            var n = this.constructor.DATA_KEY;
            (t = t || p(e.currentTarget).data(n)) || (t = new this.constructor(e.currentTarget, this._getDelegateConfig()), p(e.currentTarget).data(n, t)), e && (t._activeTrigger["focusout" === e.type ? ot : rt] = !1), t._isWithActiveTrigger() || (clearTimeout(t._timeout), t._hoverState = "out", t.config.delay && t.config.delay.hide ? t._timeout = setTimeout(function() {
                "out" === t._hoverState && t.hide()
            }, t.config.delay.hide) : t.hide())
        }, Ue._isWithActiveTrigger = function() {
            for (var e in this._activeTrigger)
                if (this._activeTrigger[e]) return !0;
            return !1
        }, Ue._getConfig = function(e) {
            var t = p(this.element).data();
            return Object.keys(t).forEach(function(e) {
                -1 !== Ye.indexOf(e) && delete t[e]
            }), "number" == typeof(e = s({}, this.constructor.Default, {}, t, {}, "object" == typeof e && e ? e : {})).delay && (e.delay = {
                show: e.delay,
                hide: e.delay
            }), "number" == typeof e.title && (e.title = e.title.toString()), "number" == typeof e.content && (e.content = e.content.toString()), g.typeCheckConfig($e, e, this.constructor.DefaultType), e.sanitize && (e.template = Be(e.template, e.whiteList, e.sanitizeFn)), e
        }, Ue._getDelegateConfig = function() {
            var e = {};
            if (this.config)
                for (var t in this.config) this.constructor.Default[t] !== this.config[t] && (e[t] = this.config[t]);
            return e
        }, Ue._cleanTipClass = function() {
            var e = p(this.getTipElement()),
                t = e.attr("class").match(Xe);
            null !== t && t.length && e.removeClass(t.join(""))
        }, Ue._handlePopperPlacementChange = function(e) {
            var t = e.instance;
            this.tip = t.popper, this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(e.placement))
        }, Ue._fixTransition = function() {
            var e = this.getTipElement(),
                t = this.config.animation;
            null === e.getAttribute("x-placement") && (p(e).removeClass(nt), this.config.animation = !1, this.hide(), this.show(), this.config.animation = t)
        }, at._jQueryInterface = function(n) {
            return this.each(function() {
                var e = p(this).data(ze),
                    t = "object" == typeof n && n;
                if ((e || !/dispose|hide/.test(n)) && (e || (e = new at(this, t), p(this).data(ze, e)), "string" == typeof n)) {
                    if (void 0 === e[n]) throw new TypeError('No method named "' + n + '"');
                    e[n]()
                }
            })
        }, o(at, null, [{
            key: "VERSION",
            get: function() {
                return "4.4.1"
            }
        }, {
            key: "Default",
            get: function() {
                return Ze
            }
        }, {
            key: "NAME",
            get: function() {
                return $e
            }
        }, {
            key: "DATA_KEY",
            get: function() {
                return ze
            }
        }, {
            key: "Event",
            get: function() {
                return tt
            }
        }, {
            key: "EVENT_KEY",
            get: function() {
                return Ke
            }
        }, {
            key: "DefaultType",
            get: function() {
                return Ge
            }
        }]), at);

    function at(e, t) {
        if (void 0 === f) throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");
        this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._popper = null, this.element = e, this.config = this._getConfig(t), this.tip = null, this._setListeners()
    }
    p.fn[$e] = st._jQueryInterface, p.fn[$e].Constructor = st, p.fn[$e].noConflict = function() {
        return p.fn[$e] = Qe, st._jQueryInterface
    };
    var lt = "popover",
        ct = "bs.popover",
        ut = "." + ct,
        ft = p.fn[lt],
        dt = "bs-popover",
        ht = new RegExp("(^|\\s)" + dt + "\\S+", "g"),
        pt = s({}, st.Default, {
            placement: "right",
            trigger: "click",
            content: "",
            template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
        }),
        gt = s({}, st.DefaultType, {
            content: "(string|element|function)"
        }),
        mt = {
            HIDE: "hide" + ut,
            HIDDEN: "hidden" + ut,
            SHOW: "show" + ut,
            SHOWN: "shown" + ut,
            INSERTED: "inserted" + ut,
            CLICK: "click" + ut,
            FOCUSIN: "focusin" + ut,
            FOCUSOUT: "focusout" + ut,
            MOUSEENTER: "mouseenter" + ut,
            MOUSELEAVE: "mouseleave" + ut
        },
        vt = function(e) {
            function i() {
                return e.apply(this, arguments) || this
            }
            var t, n;
            n = e, (t = i).prototype = Object.create(n.prototype), (t.prototype.constructor = t).__proto__ = n;
            var r = i.prototype;
            return r.isWithContent = function() {
                return this.getTitle() || this._getContent()
            }, r.addAttachmentClass = function(e) {
                p(this.getTipElement()).addClass(dt + "-" + e)
            }, r.getTipElement = function() {
                return this.tip = this.tip || p(this.config.template)[0], this.tip
            }, r.setContent = function() {
                var e = p(this.getTipElement());
                this.setElementContent(e.find(".popover-header"), this.getTitle());
                var t = this._getContent();
                "function" == typeof t && (t = t.call(this.element)), this.setElementContent(e.find(".popover-body"), t), e.removeClass("fade show")
            }, r._getContent = function() {
                return this.element.getAttribute("data-content") || this.config.content
            }, r._cleanTipClass = function() {
                var e = p(this.getTipElement()),
                    t = e.attr("class").match(ht);
                null !== t && 0 < t.length && e.removeClass(t.join(""))
            }, i._jQueryInterface = function(n) {
                return this.each(function() {
                    var e = p(this).data(ct),
                        t = "object" == typeof n ? n : null;
                    if ((e || !/dispose|hide/.test(n)) && (e || (e = new i(this, t), p(this).data(ct, e)), "string" == typeof n)) {
                        if (void 0 === e[n]) throw new TypeError('No method named "' + n + '"');
                        e[n]()
                    }
                })
            }, o(i, null, [{
                key: "VERSION",
                get: function() {
                    return "4.4.1"
                }
            }, {
                key: "Default",
                get: function() {
                    return pt
                }
            }, {
                key: "NAME",
                get: function() {
                    return lt
                }
            }, {
                key: "DATA_KEY",
                get: function() {
                    return ct
                }
            }, {
                key: "Event",
                get: function() {
                    return mt
                }
            }, {
                key: "EVENT_KEY",
                get: function() {
                    return ut
                }
            }, {
                key: "DefaultType",
                get: function() {
                    return gt
                }
            }]), i
        }(st);
    p.fn[lt] = vt._jQueryInterface, p.fn[lt].Constructor = vt, p.fn[lt].noConflict = function() {
        return p.fn[lt] = ft, vt._jQueryInterface
    };
    var yt, _t = "scrollspy",
        bt = "bs.scrollspy",
        wt = "." + bt,
        Et = p.fn[_t],
        Tt = {
            offset: 10,
            method: "auto",
            target: ""
        },
        Ct = {
            offset: "number",
            method: "string",
            target: "(string|element)"
        },
        xt = {
            ACTIVATE: "activate" + wt,
            SCROLL: "scroll" + wt,
            LOAD_DATA_API: "load" + wt + ".data-api"
        },
        St = "active",
        At = ".nav, .list-group",
        Dt = ".nav-link",
        kt = ".list-group-item",
        Nt = "position",
        It = ((yt = Ot.prototype).refresh = function() {
            var t = this,
                e = this._scrollElement === this._scrollElement.window ? "offset" : Nt,
                r = "auto" === this._config.method ? e : this._config.method,
                o = r === Nt ? this._getScrollTop() : 0;
            this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), [].slice.call(document.querySelectorAll(this._selector)).map(function(e) {
                var t, n = g.getSelectorFromElement(e);
                if (n && (t = document.querySelector(n)), t) {
                    var i = t.getBoundingClientRect();
                    if (i.width || i.height) return [p(t)[r]().top + o, n]
                }
                return null
            }).filter(function(e) {
                return e
            }).sort(function(e, t) {
                return e[0] - t[0]
            }).forEach(function(e) {
                t._offsets.push(e[0]), t._targets.push(e[1])
            })
        }, yt.dispose = function() {
            p.removeData(this._element, bt), p(this._scrollElement).off(wt), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null
        }, yt._getConfig = function(e) {
            if ("string" != typeof(e = s({}, Tt, {}, "object" == typeof e && e ? e : {})).target) {
                var t = p(e.target).attr("id");
                t || (t = g.getUID(_t), p(e.target).attr("id", t)), e.target = "#" + t
            }
            return g.typeCheckConfig(_t, e, Ct), e
        }, yt._getScrollTop = function() {
            return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop
        }, yt._getScrollHeight = function() {
            return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight)
        }, yt._getOffsetHeight = function() {
            return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height
        }, yt._process = function() {
            var e = this._getScrollTop() + this._config.offset,
                t = this._getScrollHeight(),
                n = this._config.offset + t - this._getOffsetHeight();
            if (this._scrollHeight !== t && this.refresh(), n <= e) {
                var i = this._targets[this._targets.length - 1];
                this._activeTarget !== i && this._activate(i)
            } else {
                if (this._activeTarget && e < this._offsets[0] && 0 < this._offsets[0]) return this._activeTarget = null, void this._clear();
                for (var r = this._offsets.length; r--;) this._activeTarget !== this._targets[r] && e >= this._offsets[r] && (void 0 === this._offsets[r + 1] || e < this._offsets[r + 1]) && this._activate(this._targets[r])
            }
        }, yt._activate = function(t) {
            this._activeTarget = t, this._clear();
            var e = this._selector.split(",").map(function(e) {
                    return e + '[data-target="' + t + '"],' + e + '[href="' + t + '"]'
                }),
                n = p([].slice.call(document.querySelectorAll(e.join(","))));
            n.hasClass("dropdown-item") ? (n.closest(".dropdown").find(".dropdown-toggle").addClass(St), n.addClass(St)) : (n.addClass(St), n.parents(At).prev(Dt + ", " + kt).addClass(St), n.parents(At).prev(".nav-item").children(Dt).addClass(St)), p(this._scrollElement).trigger(xt.ACTIVATE, {
                relatedTarget: t
            })
        }, yt._clear = function() {
            [].slice.call(document.querySelectorAll(this._selector)).filter(function(e) {
                return e.classList.contains(St)
            }).forEach(function(e) {
                return e.classList.remove(St)
            })
        }, Ot._jQueryInterface = function(t) {
            return this.each(function() {
                var e = p(this).data(bt);
                if (e || (e = new Ot(this, "object" == typeof t && t), p(this).data(bt, e)), "string" == typeof t) {
                    if (void 0 === e[t]) throw new TypeError('No method named "' + t + '"');
                    e[t]()
                }
            })
        }, o(Ot, null, [{
            key: "VERSION",
            get: function() {
                return "4.4.1"
            }
        }, {
            key: "Default",
            get: function() {
                return Tt
            }
        }]), Ot);

    function Ot(e, t) {
        var n = this;
        this._element = e, this._scrollElement = "BODY" === e.tagName ? window : e, this._config = this._getConfig(t), this._selector = this._config.target + " " + Dt + "," + this._config.target + " " + kt + "," + this._config.target + " .dropdown-item", this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, p(this._scrollElement).on(xt.SCROLL, function(e) {
            return n._process(e)
        }), this.refresh(), this._process()
    }
    p(window).on(xt.LOAD_DATA_API, function() {
        for (var e = [].slice.call(document.querySelectorAll('[data-spy="scroll"]')), t = e.length; t--;) {
            var n = p(e[t]);
            It._jQueryInterface.call(n, n.data())
        }
    }), p.fn[_t] = It._jQueryInterface, p.fn[_t].Constructor = It, p.fn[_t].noConflict = function() {
        return p.fn[_t] = Et, It._jQueryInterface
    };
    var jt, Lt = "bs.tab",
        Pt = "." + Lt,
        Ht = p.fn.tab,
        qt = {
            HIDE: "hide" + Pt,
            HIDDEN: "hidden" + Pt,
            SHOW: "show" + Pt,
            SHOWN: "shown" + Pt,
            CLICK_DATA_API: "click" + Pt + ".data-api"
        },
        Rt = "active",
        Ft = ".active",
        Mt = "> li > .active",
        Wt = ((jt = Bt.prototype).show = function() {
            var n = this;
            if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && p(this._element).hasClass(Rt) || p(this._element).hasClass("disabled"))) {
                var e, i, t = p(this._element).closest(".nav, .list-group")[0],
                    r = g.getSelectorFromElement(this._element);
                if (t) {
                    var o = "UL" === t.nodeName || "OL" === t.nodeName ? Mt : Ft;
                    i = (i = p.makeArray(p(t).find(o)))[i.length - 1]
                }
                var s = p.Event(qt.HIDE, {
                        relatedTarget: this._element
                    }),
                    a = p.Event(qt.SHOW, {
                        relatedTarget: i
                    });
                if (i && p(i).trigger(s), p(this._element).trigger(a), !a.isDefaultPrevented() && !s.isDefaultPrevented()) {
                    r && (e = document.querySelector(r)), this._activate(this._element, t);
                    var l = function() {
                        var e = p.Event(qt.HIDDEN, {
                                relatedTarget: n._element
                            }),
                            t = p.Event(qt.SHOWN, {
                                relatedTarget: i
                            });
                        p(i).trigger(e), p(n._element).trigger(t)
                    };
                    e ? this._activate(e, e.parentNode, l) : l()
                }
            }
        }, jt.dispose = function() {
            p.removeData(this._element, Lt), this._element = null
        }, jt._activate = function(e, t, n) {
            function i() {
                return r._transitionComplete(e, o, n)
            }
            var r = this,
                o = (!t || "UL" !== t.nodeName && "OL" !== t.nodeName ? p(t).children(Ft) : p(t).find(Mt))[0],
                s = n && o && p(o).hasClass("fade");
            if (o && s) {
                var a = g.getTransitionDurationFromElement(o);
                p(o).removeClass("show").one(g.TRANSITION_END, i).emulateTransitionEnd(a)
            } else i()
        }, jt._transitionComplete = function(e, t, n) {
            if (t) {
                p(t).removeClass(Rt);
                var i = p(t.parentNode).find("> .dropdown-menu .active")[0];
                i && p(i).removeClass(Rt), "tab" === t.getAttribute("role") && t.setAttribute("aria-selected", !1)
            }
            if (p(e).addClass(Rt), "tab" === e.getAttribute("role") && e.setAttribute("aria-selected", !0), g.reflow(e), e.classList.contains("fade") && e.classList.add("show"), e.parentNode && p(e.parentNode).hasClass("dropdown-menu")) {
                var r = p(e).closest(".dropdown")[0];
                if (r) {
                    var o = [].slice.call(r.querySelectorAll(".dropdown-toggle"));
                    p(o).addClass(Rt)
                }
                e.setAttribute("aria-expanded", !0)
            }
            n && n()
        }, Bt._jQueryInterface = function(n) {
            return this.each(function() {
                var e = p(this),
                    t = e.data(Lt);
                if (t || (t = new Bt(this), e.data(Lt, t)), "string" == typeof n) {
                    if (void 0 === t[n]) throw new TypeError('No method named "' + n + '"');
                    t[n]()
                }
            })
        }, o(Bt, null, [{
            key: "VERSION",
            get: function() {
                return "4.4.1"
            }
        }]), Bt);

    function Bt(e) {
        this._element = e
    }
    p(document).on(qt.CLICK_DATA_API, '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]', function(e) {
        e.preventDefault(), Wt._jQueryInterface.call(p(this), "show")
    }), p.fn.tab = Wt._jQueryInterface, p.fn.tab.Constructor = Wt, p.fn.tab.noConflict = function() {
        return p.fn.tab = Ht, Wt._jQueryInterface
    };
    var Ut, $t = "toast",
        zt = "bs.toast",
        Kt = "." + zt,
        Qt = p.fn[$t],
        Vt = {
            CLICK_DISMISS: "click.dismiss" + Kt,
            HIDE: "hide" + Kt,
            HIDDEN: "hidden" + Kt,
            SHOW: "show" + Kt,
            SHOWN: "shown" + Kt
        },
        Xt = "show",
        Yt = "showing",
        Gt = {
            animation: "boolean",
            autohide: "boolean",
            delay: "number"
        },
        Jt = {
            animation: !0,
            autohide: !0,
            delay: 500
        },
        Zt = ((Ut = en.prototype).show = function() {
            var e = this,
                t = p.Event(Vt.SHOW);
            if (p(this._element).trigger(t), !t.isDefaultPrevented()) {
                this._config.animation && this._element.classList.add("fade");
                var n = function() {
                    e._element.classList.remove(Yt), e._element.classList.add(Xt), p(e._element).trigger(Vt.SHOWN), e._config.autohide && (e._timeout = setTimeout(function() {
                        e.hide()
                    }, e._config.delay))
                };
                if (this._element.classList.remove("hide"), g.reflow(this._element), this._element.classList.add(Yt), this._config.animation) {
                    var i = g.getTransitionDurationFromElement(this._element);
                    p(this._element).one(g.TRANSITION_END, n).emulateTransitionEnd(i)
                } else n()
            }
        }, Ut.hide = function() {
            if (this._element.classList.contains(Xt)) {
                var e = p.Event(Vt.HIDE);
                p(this._element).trigger(e), e.isDefaultPrevented() || this._close()
            }
        }, Ut.dispose = function() {
            clearTimeout(this._timeout), this._timeout = null, this._element.classList.contains(Xt) && this._element.classList.remove(Xt), p(this._element).off(Vt.CLICK_DISMISS), p.removeData(this._element, zt), this._element = null, this._config = null
        }, Ut._getConfig = function(e) {
            return e = s({}, Jt, {}, p(this._element).data(), {}, "object" == typeof e && e ? e : {}), g.typeCheckConfig($t, e, this.constructor.DefaultType), e
        }, Ut._setListeners = function() {
            var e = this;
            p(this._element).on(Vt.CLICK_DISMISS, '[data-dismiss="toast"]', function() {
                return e.hide()
            })
        }, Ut._close = function() {
            function e() {
                t._element.classList.add("hide"), p(t._element).trigger(Vt.HIDDEN)
            }
            var t = this;
            if (this._element.classList.remove(Xt), this._config.animation) {
                var n = g.getTransitionDurationFromElement(this._element);
                p(this._element).one(g.TRANSITION_END, e).emulateTransitionEnd(n)
            } else e()
        }, en._jQueryInterface = function(n) {
            return this.each(function() {
                var e = p(this),
                    t = e.data(zt);
                if (t || (t = new en(this, "object" == typeof n && n), e.data(zt, t)), "string" == typeof n) {
                    if (void 0 === t[n]) throw new TypeError('No method named "' + n + '"');
                    t[n](this)
                }
            })
        }, o(en, null, [{
            key: "VERSION",
            get: function() {
                return "4.4.1"
            }
        }, {
            key: "DefaultType",
            get: function() {
                return Gt
            }
        }, {
            key: "Default",
            get: function() {
                return Jt
            }
        }]), en);

    function en(e, t) {
        this._element = e, this._config = this._getConfig(t), this._timeout = null, this._setListeners()
    }
    p.fn[$t] = Zt._jQueryInterface, p.fn[$t].Constructor = Zt, p.fn[$t].noConflict = function() {
        return p.fn[$t] = Qt, Zt._jQueryInterface
    }, e.Alert = h, e.Button = A, e.Carousel = U, e.Collapse = re, e.Dropdown = we, e.Modal = qe, e.Popover = vt, e.Scrollspy = It, e.Tab = Wt, e.Toast = Zt, e.Tooltip = st, e.Util = g, Object.defineProperty(e, "__esModule", {
        value: !0
    })
}),
function(e, t) {
    if ("function" == typeof define && define.amd) define(["module", "exports"], t);
    else if ("undefined" != typeof exports) t(module, exports);
    else {
        var n = {
            exports: {}
        };
        t(n, n.exports), e.WOW = n.exports
    }
}(this, function(e, t) {
    "use strict";

    function n(e, t) {
        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
    }
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var i = function(e, t, n) {
        return t && r(e.prototype, t), n && r(e, n), e
    };

    function r(e, t) {
        for (var n = 0; n < t.length; n++) {
            var i = t[n];
            i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)
        }
    }

    function o(e, t) {
        return 0 <= t.indexOf(e)
    }

    function s(e, t, n) {
        null != e.addEventListener ? e.addEventListener(t, n, !1) : null != e.attachEvent ? e.attachEvent("on" + t, n) : e[t] = n
    }

    function a(e, t, n) {
        null != e.removeEventListener ? e.removeEventListener(t, n, !1) : null != e.detachEvent ? e.detachEvent("on" + t, n) : delete e[t]
    }
    var l = window.WeakMap || window.MozWeakMap || (i(c, [{
        key: "get",
        value: function(e) {
            for (var t = 0; t < this.keys.length; t++)
                if (this.keys[t] === e) return this.values[t]
        }
    }, {
        key: "set",
        value: function(e, t) {
            for (var n = 0; n < this.keys.length; n++)
                if (this.keys[n] === e) return this.values[n] = t, this;
            return this.keys.push(e), this.values.push(t), this
        }
    }]), c);

    function c() {
        n(this, c), this.keys = [], this.values = []
    }
    var u = window.MutationObserver || window.WebkitMutationObserver || window.MozMutationObserver || (i(f, [{
        key: "observe",
        value: function() {}
    }]), f.notSupported = !0, f);

    function f() {
        n(this, f), "undefined" != typeof console && null !== console && (console.warn("MutationObserver is not supported by your browser."), console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content."))
    }
    var d = window.getComputedStyle || function(n) {
            var i = /(\-([a-z]){1})/g;
            return {
                getPropertyValue: function(e) {
                    "float" === e && (e = "styleFloat"), i.test(e) && e.replace(i, function(e, t) {
                        return t.toUpperCase()
                    });
                    var t = n.currentStyle;
                    return (null != t ? t[e] : void 0) || null
                }
            }
        },
        h = (i(p, [{
            key: "init",
            value: function() {
                this.element = window.document.documentElement, o(document.readyState, ["interactive", "complete"]) ? this.start() : s(document, "DOMContentLoaded", this.start), this.finished = []
            }
        }, {
            key: "start",
            value: function() {
                var o = this;
                if (this.stopped = !1, this.boxes = [].slice.call(this.element.querySelectorAll("." + this.config.boxClass)), this.all = this.boxes.slice(0), this.boxes.length)
                    if (this.disabled()) this.resetStyle();
                    else
                        for (var e = 0; e < this.boxes.length; e++) {
                            var t = this.boxes[e];
                            this.applyStyle(t, !0)
                        }
                this.disabled() || (s(this.config.scrollContainer || window, "scroll", this.scrollHandler), s(window, "resize", this.scrollHandler), this.interval = setInterval(this.scrollCallback, 50)), this.config.live && new u(function(e) {
                    for (var t = 0; t < e.length; t++)
                        for (var n = e[t], i = 0; i < n.addedNodes.length; i++) {
                            var r = n.addedNodes[i];
                            o.doSync(r)
                        }
                }).observe(document.body, {
                    childList: !0,
                    subtree: !0
                })
            }
        }, {
            key: "stop",
            value: function() {
                this.stopped = !0, a(this.config.scrollContainer || window, "scroll", this.scrollHandler), a(window, "resize", this.scrollHandler), null != this.interval && clearInterval(this.interval)
            }
        }, {
            key: "sync",
            value: function() {
                u.notSupported && this.doSync(this.element)
            }
        }, {
            key: "doSync",
            value: function(e) {
                if (null == e && (e = this.element), 1 === e.nodeType)
                    for (var t = (e = e.parentNode || e).querySelectorAll("." + this.config.boxClass), n = 0; n < t.length; n++) {
                        var i = t[n];
                        o(i, this.all) || (this.boxes.push(i), this.all.push(i), this.stopped || this.disabled() ? this.resetStyle() : this.applyStyle(i, !0), this.scrolled = !0)
                    }
            }
        }, {
            key: "show",
            value: function(e) {
                var t, n;
                return this.applyStyle(e), e.className = e.className + " " + this.config.animateClass, null != this.config.callback && this.config.callback(e), t = e, n = this.wowEvent, null != t.dispatchEvent ? t.dispatchEvent(n) : n in (null != t) ? t[n]() : "on" + n in (null != t) && t["on" + n](), this.config.resetAnimation && (s(e, "animationend", this.resetAnimation), s(e, "oanimationend", this.resetAnimation), s(e, "webkitAnimationEnd", this.resetAnimation), s(e, "MSAnimationEnd", this.resetAnimation)), e
            }
        }, {
            key: "applyStyle",
            value: function(e, t) {
                var n = this,
                    i = e.getAttribute("data-wow-duration"),
                    r = e.getAttribute("data-wow-delay"),
                    o = e.getAttribute("data-wow-iteration");
                return this.animate(function() {
                    return n.customStyle(e, t, i, r, o)
                })
            }
        }, {
            key: "resetStyle",
            value: function() {
                for (var e = 0; e < this.boxes.length; e++) this.boxes[e].style.visibility = "visible"
            }
        }, {
            key: "resetAnimation",
            value: function(e) {
                if (0 <= e.type.toLowerCase().indexOf("animationend")) {
                    var t = e.target || e.srcElement;
                    t.className = t.className.replace(this.config.animateClass, "").trim()
                }
            }
        }, {
            key: "customStyle",
            value: function(e, t, n, i, r) {
                return t && this.cacheAnimationName(e), e.style.visibility = t ? "hidden" : "visible", n && this.vendorSet(e.style, {
                    animationDuration: n
                }), i && this.vendorSet(e.style, {
                    animationDelay: i
                }), r && this.vendorSet(e.style, {
                    animationIterationCount: r
                }), this.vendorSet(e.style, {
                    animationName: t ? "none" : this.cachedAnimationName(e)
                }), e
            }
        }, {
            key: "vendorSet",
            value: function(e, t) {
                for (var n in t)
                    if (t.hasOwnProperty(n)) {
                        var i = t[n];
                        e["" + n] = i;
                        for (var r = 0; r < this.vendors.length; r++) e["" + this.vendors[r] + n.charAt(0).toUpperCase() + n.substr(1)] = i
                    }
            }
        }, {
            key: "vendorCSS",
            value: function(e, t) {
                for (var n = d(e), i = n.getPropertyCSSValue(t), r = 0; r < this.vendors.length; r++) {
                    var o = this.vendors[r];
                    i = i || n.getPropertyCSSValue("-" + o + "-" + t)
                }
                return i
            }
        }, {
            key: "animationName",
            value: function(t) {
                var n = void 0;
                try {
                    n = this.vendorCSS(t, "animation-name").cssText
                } catch (e) {
                    n = d(t).getPropertyValue("animation-name")
                }
                return "none" === n ? "" : n
            }
        }, {
            key: "cacheAnimationName",
            value: function(e) {
                return this.animationNameCache.set(e, this.animationName(e))
            }
        }, {
            key: "cachedAnimationName",
            value: function(e) {
                return this.animationNameCache.get(e)
            }
        }, {
            key: "scrollHandler",
            value: function() {
                this.scrolled = !0
            }
        }, {
            key: "scrollCallback",
            value: function() {
                if (this.scrolled) {
                    this.scrolled = !1;
                    for (var e = [], t = 0; t < this.boxes.length; t++) {
                        var n = this.boxes[t];
                        if (n) {
                            if (this.isVisible(n)) {
                                this.show(n);
                                continue
                            }
                            e.push(n)
                        }
                    }
                    this.boxes = e, this.boxes.length || this.config.live || this.stop()
                }
            }
        }, {
            key: "offsetTop",
            value: function(e) {
                for (; void 0 === e.offsetTop;) e = e.parentNode;
                for (var t = e.offsetTop; e.offsetParent;) t += (e = e.offsetParent).offsetTop;
                return t
            }
        }, {
            key: "isVisible",
            value: function(e) {
                var t = e.getAttribute("data-wow-offset") || this.config.offset,
                    n = this.config.scrollContainer && this.config.scrollContainer.scrollTop || window.pageYOffset,
                    i = n + Math.min(this.element.clientHeight, "innerHeight" in window ? window.innerHeight : document.documentElement.clientHeight) - t,
                    r = this.offsetTop(e),
                    o = r + e.clientHeight;
                return r <= i && n <= o
            }
        }, {
            key: "disabled",
            value: function() {
                return !this.config.mobile && (e = navigator.userAgent, /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(e));
                var e
            }
        }]), p);

    function p() {
        var e = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0];
        n(this, p), this.defaults = {
            boxClass: "wow",
            animateClass: "animated",
            offset: 0,
            mobile: !0,
            live: !0,
            callback: null,
            scrollContainer: null,
            resetAnimation: !0
        }, this.animate = "requestAnimationFrame" in window ? function(e) {
            return window.requestAnimationFrame(e)
        } : function(e) {
            return e()
        }, this.vendors = ["moz", "webkit"], this.start = this.start.bind(this), this.resetAnimation = this.resetAnimation.bind(this), this.scrollHandler = this.scrollHandler.bind(this), this.scrollCallback = this.scrollCallback.bind(this), this.scrolled = !0, this.config = function(e, t) {
            for (var n in t)
                if (null == e[n]) {
                    var i = t[n];
                    e[n] = i
                } return e
        }(e, this.defaults), null != e.scrollContainer && (this.config.scrollContainer = document.querySelector(e.scrollContainer)), this.animationNameCache = new l, this.wowEvent = function(e, t, n, i) {
            var r = !(arguments.length <= 1 || void 0 === t) && t,
                o = !(arguments.length <= 2 || void 0 === n) && n,
                s = arguments.length <= 3 || void 0 === i ? null : i,
                a = void 0;
            return null != document.createEvent ? (a = document.createEvent("CustomEvent")).initCustomEvent(e, r, o, s) : null != document.createEventObject ? (a = document.createEventObject()).eventType = e : a.eventName = e, a
        }(this.config.boxClass)
    }
    t.default = h, e.exports = t.default
});
var ScrollReveal = function() {
    "use strict";
    var r = {
            delay: 0,
            distance: "0",
            duration: 600,
            easing: "cubic-bezier(0.5, 0, 0, 1)",
            interval: 0,
            opacity: 0,
            origin: "bottom",
            rotate: {
                x: 0,
                y: 0,
                z: 0
            },
            scale: 1,
            cleanup: !1,
            container: document.documentElement,
            desktop: !0,
            mobile: !0,
            reset: !1,
            useDelay: "always",
            viewFactor: 0,
            viewOffset: {
                top: 0,
                right: 0,
                bottom: 0,
                left: 0
            },
            afterReset: function() {},
            afterReveal: function() {},
            beforeReset: function() {},
            beforeReveal: function() {}
        },
        n = {
            success: function() {
                document.documentElement.classList.add("sr"), document.body ? document.body.style.height = "100%" : document.addEventListener("DOMContentLoaded", function() {
                    document.body.style.height = "100%"
                })
            },
            failure: function() {
                return document.documentElement.classList.remove("sr"), {
                    clean: function() {},
                    destroy: function() {},
                    reveal: function() {},
                    sync: function() {},
                    get noop() {
                        return !0
                    }
                }
            }
        };

    function o(e) {
        return "object" == typeof window.Node ? e instanceof window.Node : null !== e && "object" == typeof e && "number" == typeof e.nodeType && "string" == typeof e.nodeName
    }

    function f(e, t) {
        if (void 0 === t && (t = document), e instanceof Array) return e.filter(o);
        if (o(e)) return [e];
        if (n = e, i = Object.prototype.toString.call(n), "object" == typeof window.NodeList ? n instanceof window.NodeList : null !== n && "object" == typeof n && "number" == typeof n.length && /^\[object (HTMLCollection|NodeList|Object)\]$/.test(i) && (0 === n.length || o(n[0]))) return Array.prototype.slice.call(e);
        var n, i;
        if ("string" == typeof e) try {
            var r = t.querySelectorAll(e);
            return Array.prototype.slice.call(r)
        } catch (e) {
            return []
        }
        return []
    }

    function s(e) {
        return null !== e && e instanceof Object && (e.constructor === Object || "[object Object]" === Object.prototype.toString.call(e))
    }

    function d(n, i) {
        if (s(n)) return Object.keys(n).forEach(function(e) {
            return i(n[e], e, n)
        });
        if (n instanceof Array) return n.forEach(function(e, t) {
            return i(e, t, n)
        });
        throw new TypeError("Expected either an array or object literal.")
    }

    function h(e) {
        for (var t = [], n = arguments.length - 1; 0 < n--;) t[n] = arguments[n + 1];
        if (this.constructor.debug && console) {
            var i = "%cScrollReveal: " + e;
            t.forEach(function(e) {
                return i += "\n — " + e
            }), console.log(i, "color: #ea654b;")
        }
    }

    function t() {
        var n = this,
            i = {
                active: [],
                stale: []
            },
            t = {
                active: [],
                stale: []
            },
            r = {
                active: [],
                stale: []
            };
        try {
            d(f("[data-sr-id]"), function(e) {
                var t = parseInt(e.getAttribute("data-sr-id"));
                i.active.push(t)
            })
        } catch (e) {
            throw e
        }
        d(this.store.elements, function(e) {
            -1 === i.active.indexOf(e.id) && i.stale.push(e.id)
        }), d(i.stale, function(e) {
            return delete n.store.elements[e]
        }), d(this.store.elements, function(e) {
            -1 === r.active.indexOf(e.containerId) && r.active.push(e.containerId), e.hasOwnProperty("sequence") && -1 === t.active.indexOf(e.sequence.id) && t.active.push(e.sequence.id)
        }), d(this.store.containers, function(e) {
            -1 === r.active.indexOf(e.id) && r.stale.push(e.id)
        }), d(r.stale, function(e) {
            var t = n.store.containers[e].node;
            t.removeEventListener("scroll", n.delegate), t.removeEventListener("resize", n.delegate), delete n.store.containers[e]
        }), d(this.store.sequences, function(e) {
            -1 === t.active.indexOf(e.id) && t.stale.push(e.id)
        }), d(t.stale, function(e) {
            return delete n.store.sequences[e]
        })
    }

    function p(e) {
        var i, r = this;
        try {
            d(f(e), function(e) {
                var t = e.getAttribute("data-sr-id");
                if (null !== t) {
                    i = !0;
                    var n = r.store.elements[t];
                    n.callbackTimer && window.clearTimeout(n.callbackTimer.clock), e.setAttribute("style", n.styles.inline.generated), e.removeAttribute("data-sr-id"), delete r.store.elements[t]
                }
            })
        } catch (e) {
            return h.call(this, "Clean failed.", e.message)
        }
        if (i) try {
            t.call(this)
        } catch (e) {
            return h.call(this, "Clean failed.", e.message)
        }
    }

    function L(e) {
        if (e.constructor !== Array) throw new TypeError("Expected array.");
        if (16 === e.length) return e;
        if (6 !== e.length) throw new RangeError("Expected array with either 6 or 16 values.");
        var t = P();
        return t[0] = e[0], t[1] = e[1], t[4] = e[2], t[5] = e[3], t[12] = e[4], t[13] = e[5], t
    }

    function P() {
        for (var e = [], t = 0; t < 16; t++) t % 5 == 0 ? e.push(1) : e.push(0);
        return e
    }

    function H(e, t) {
        for (var n = L(e), i = L(t), r = [], o = 0; o < 4; o++)
            for (var s = [n[o], n[o + 4], n[o + 8], n[o + 12]], a = 0; a < 4; a++) {
                var l = 4 * a,
                    c = [i[l], i[1 + l], i[2 + l], i[3 + l]],
                    u = s[0] * c[0] + s[1] * c[1] + s[2] * c[2] + s[3] * c[3];
                r[o + l] = u
            }
        return r
    }

    function q(e, t) {
        var n = P();
        return n[0] = e, n[5] = "number" == typeof t ? t : e, n
    }
    var i, a, R = (i = {}, a = document.documentElement.style, e.clearCache = function() {
        return i = {}
    }, e);

    function e(e, t) {
        if (void 0 === t && (t = a), e && "string" == typeof e) {
            if (i[e]) return i[e];
            if ("string" == typeof t[e]) return i[e] = e;
            if ("string" == typeof t["-webkit-" + e]) return i[e] = "-webkit-" + e;
            throw new RangeError('Unable to find "' + e + '" style property.')
        }
        throw new TypeError("Expected a string.")
    }

    function l(e, t) {
        void 0 === t && (t = {});
        var n = t.pristine || this.pristine,
            i = "always" === e.config.useDelay || "onload" === e.config.useDelay && n || "once" === e.config.useDelay && !e.seen,
            r = e.visible && !e.revealed,
            o = !e.visible && e.revealed && e.config.reset;
        return t.reveal || r ? function(e, t) {
            var n = [e.styles.inline.generated, e.styles.opacity.computed, e.styles.transform.generated.final];
            t ? n.push(e.styles.transition.generated.delayed) : n.push(e.styles.transition.generated.instant), e.revealed = e.seen = !0, e.node.setAttribute("style", n.filter(function(e) {
                return "" !== e
            }).join(" ")), c.call(this, e, t)
        }.call(this, e, i) : t.reset || o ? function(e) {
            var t = [e.styles.inline.generated, e.styles.opacity.generated, e.styles.transform.generated.initial, e.styles.transition.generated.instant];
            e.revealed = !1, e.node.setAttribute("style", t.filter(function(e) {
                return "" !== e
            }).join(" ")), c.call(this, e)
        }.call(this, e) : void 0
    }

    function c(e, t) {
        var n = this,
            i = t ? e.config.duration + e.config.delay : e.config.duration,
            r = e.revealed ? e.config.beforeReveal : e.config.beforeReset,
            o = e.revealed ? e.config.afterReveal : e.config.afterReset,
            s = 0;
        e.callbackTimer && (s = Date.now() - e.callbackTimer.start, window.clearTimeout(e.callbackTimer.clock)), r(e.node), e.callbackTimer = {
            start: Date.now(),
            clock: window.setTimeout(function() {
                o(e.node), e.callbackTimer = null, e.revealed && !e.config.reset && e.config.cleanup && p.call(n, e.node)
            }, i - s)
        }
    }
    var u, g = (u = 0, function() {
        return u++
    });

    function m(e, t) {
        if (void 0 === t && (t = this.pristine), !e.visible && e.revealed && e.config.reset) return l.call(this, e, {
            reset: !0
        });
        var n = this.store.sequences[e.sequence.id],
            i = e.sequence.index;
        if (n) {
            var r = new y(n, "visible", this.store),
                o = new y(n, "revealed", this.store);
            if (n.models = {
                    visible: r,
                    revealed: o
                }, !o.body.length) {
                var s = n.members[r.body[0]],
                    a = this.store.elements[s];
                if (a) return _.call(this, n, r.body[0], -1, t), _.call(this, n, r.body[0], 1, t), l.call(this, a, {
                    reveal: !0,
                    pristine: t
                })
            }
            if (!n.blocked.head && i === [].concat(o.head).pop() && i >= [].concat(r.body).shift()) return _.call(this, n, i, -1, t), l.call(this, e, {
                reveal: !0,
                pristine: t
            });
            if (!n.blocked.foot && i === [].concat(o.foot).shift() && i <= [].concat(r.body).pop()) return _.call(this, n, i, 1, t), l.call(this, e, {
                reveal: !0,
                pristine: t
            })
        }
    }

    function v(e) {
        var t = Math.abs(e);
        if (isNaN(t)) throw new RangeError("Invalid sequence interval.");
        this.id = g(), this.interval = Math.max(t, 16), this.members = [], this.models = {}, this.blocked = {
            head: !1,
            foot: !1
        }
    }

    function y(e, i, r) {
        var o = this;
        this.head = [], this.body = [], this.foot = [], d(e.members, function(e, t) {
            var n = r.elements[e];
            n && n[i] && o.body.push(t)
        }), this.body.length && d(e.members, function(e, t) {
            var n = r.elements[e];
            n && !n[i] && (t < o.body[0] ? o.head.push(t) : o.foot.push(t))
        })
    }

    function _(e, t, n, i) {
        var r = this,
            o = ["head", null, "foot"][1 + n],
            s = e.members[t + n],
            a = this.store.elements[s];
        e.blocked[o] = !0, setTimeout(function() {
            e.blocked[o] = !1, a && m.call(r, a, i)
        }, e.interval)
    }

    function b() {
        var n = this;
        t.call(this), d(this.store.elements, function(e) {
            var t = [e.styles.inline.generated];
            e.visible ? (t.push(e.styles.opacity.computed), t.push(e.styles.transform.generated.final), e.revealed = !0) : (t.push(e.styles.opacity.generated), t.push(e.styles.transform.generated.initial), e.revealed = !1), e.node.setAttribute("style", t.filter(function(e) {
                return "" !== e
            }).join(" "))
        }), d(this.store.containers, function(e) {
            var t = e.node === document.documentElement ? window : e.node;
            t.addEventListener("scroll", n.delegate), t.addEventListener("resize", n.delegate)
        }), this.delegate(), this.initTimeout = null
    }

    function w(e) {
        return void 0 === e && (e = navigator.userAgent), /Android|iPhone|iPad|iPod/i.test(e)
    }

    function E(n) {
        for (var e = [], t = arguments.length - 1; 0 < t--;) e[t] = arguments[t + 1];
        if (s(n)) return d(e, function(e) {
            d(e, function(e, t) {
                s(e) ? (n[t] && s(n[t]) || (n[t] = {}), E(n[t], e)) : n[t] = e
            })
        }), n;
        throw new TypeError("Target must be an object literal.")
    }

    function T(e, a, t) {
        var l = this;
        void 0 === a && (a = {}), void 0 === t && (t = !1);
        var c, u = [],
            n = a.interval || r.interval;
        try {
            n && (c = new v(n));
            var i = f(e);
            if (!i.length) throw new Error("Invalid reveal target.");
            d(i.reduce(function(e, t) {
                var n = {},
                    i = t.getAttribute("data-sr-id");
                i ? (E(n, l.store.elements[i]), n.node.setAttribute("style", n.styles.inline.computed)) : (n.id = g(), n.node = t, n.seen = !1, n.revealed = !1, n.visible = !1);
                var r = E({}, n.config || l.defaults, a);
                if (!r.mobile && w() || !r.desktop && !w()) return i && p.call(l, n), e;
                var o, s = f(r.container)[0];
                if (!s) throw new Error("Invalid container.");
                return s.contains(t) && (null === (o = function(t) {
                    for (var e = [], n = arguments.length - 1; 0 < n--;) e[n] = arguments[n + 1];
                    var i = null;
                    return d(e, function(e) {
                        d(e, function(e) {
                            null === i && e.node === t && (i = e.id)
                        })
                    }), i
                }(s, u, l.store.containers)) && (o = g(), u.push({
                    id: o,
                    node: s
                })), n.config = r, n.containerId = o, n.styles = function(e) {
                    var t = window.getComputedStyle(e.node),
                        n = t.position,
                        i = e.config,
                        r = {},
                        o = (e.node.getAttribute("style") || "").match(/[\w-]+\s*:\s*[^;]+\s*/gi) || [];
                    r.computed = o ? o.map(function(e) {
                        return e.trim()
                    }).join("; ") + ";" : "", r.generated = o.some(function(e) {
                        return e.match(/visibility\s?:\s?visible/i)
                    }) ? r.computed : o.concat(["visibility: visible"]).map(function(e) {
                        return e.trim()
                    }).join("; ") + ";";
                    var s, a, l, c, u, f, d, h, p, g, m, v, y, _ = parseFloat(t.opacity),
                        b = isNaN(parseFloat(i.opacity)) ? parseFloat(t.opacity) : parseFloat(i.opacity),
                        w = {
                            computed: _ !== b ? "opacity: " + _ + ";" : "",
                            generated: _ !== b ? "opacity: " + b + ";" : ""
                        },
                        E = [];
                    if (parseFloat(i.distance)) {
                        var T = "top" === i.origin || "bottom" === i.origin ? "Y" : "X",
                            C = i.distance;
                        "top" !== i.origin && "left" !== i.origin || (C = /^-/.test(C) ? C.substr(1) : "-" + C);
                        var x = C.match(/(^-?\d+\.?\d?)|(em$|px$|%$)/g),
                            S = x[0];
                        switch (x[1]) {
                            case "em":
                                C = parseInt(t.fontSize) * S;
                                break;
                            case "px":
                                C = S;
                                break;
                            case "%":
                                C = "Y" == T ? e.node.getBoundingClientRect().height * S / 100 : e.node.getBoundingClientRect().width * S / 100;
                                break;
                            default:
                                throw new RangeError("Unrecognized or missing distance unit.")
                        }
                        "Y" == T ? E.push((l = C, (c = P())[13] = l, c)) : E.push((s = C, (a = P())[12] = s, a))
                    }
                    i.rotate.x && E.push((u = i.rotate.x, f = Math.PI / 180 * u, (d = P())[5] = d[10] = Math.cos(f), d[6] = d[9] = Math.sin(f), d[9] *= -1, d)), i.rotate.y && E.push((h = i.rotate.y, p = Math.PI / 180 * h, (g = P())[0] = g[10] = Math.cos(p), g[2] = g[8] = Math.sin(p), g[2] *= -1, g)), i.rotate.z && E.push((m = i.rotate.z, v = Math.PI / 180 * m, (y = P())[0] = y[5] = Math.cos(v), y[1] = y[4] = Math.sin(v), y[4] *= -1, y)), 1 !== i.scale && (0 === i.scale ? E.push(q(2e-4)) : E.push(q(i.scale)));
                    var A = {};
                    if (E.length) {
                        A.property = R("transform"), A.computed = {
                            raw: t[A.property],
                            matrix: function(e) {
                                if ("string" == typeof e) {
                                    var t = e.match(/matrix(3d)?\(([^)]+)\)/);
                                    if (t) return L(t[2].split(", ").map(parseFloat))
                                }
                                return P()
                            }(t[A.property])
                        }, E.unshift(A.computed.matrix);
                        var D = E.reduce(H);
                        A.generated = {
                            initial: A.property + ": matrix3d(" + D.join(", ") + ");",
                            final: A.property + ": matrix3d(" + A.computed.matrix.join(", ") + ");"
                        }
                    } else A.generated = {
                        initial: "",
                        final: ""
                    };
                    var k = {};
                    if (w.generated || A.generated.initial) {
                        k.property = R("transition"), k.computed = t[k.property], k.fragments = [];
                        var N = i.delay,
                            I = i.duration,
                            O = i.easing;
                        w.generated && k.fragments.push({
                            delayed: "opacity " + I / 1e3 + "s " + O + " " + N / 1e3 + "s",
                            instant: "opacity " + I / 1e3 + "s " + O + " 0s"
                        }), A.generated.initial && k.fragments.push({
                            delayed: A.property + " " + I / 1e3 + "s " + O + " " + N / 1e3 + "s",
                            instant: A.property + " " + I / 1e3 + "s " + O + " 0s"
                        }), k.computed && !k.computed.match(/all 0s/) && k.fragments.unshift({
                            delayed: k.computed,
                            instant: k.computed
                        });
                        var j = k.fragments.reduce(function(e, t, n) {
                            return e.delayed += 0 === n ? t.delayed : ", " + t.delayed, e.instant += 0 === n ? t.instant : ", " + t.instant, e
                        }, {
                            delayed: "",
                            instant: ""
                        });
                        k.generated = {
                            delayed: k.property + ": " + j.delayed + ";",
                            instant: k.property + ": " + j.instant + ";"
                        }
                    } else k.generated = {
                        delayed: "",
                        instant: ""
                    };
                    return {
                        inline: r,
                        opacity: w,
                        position: n,
                        transform: A,
                        transition: k
                    }
                }(n), c && (n.sequence = {
                    id: c.id,
                    index: c.members.length
                }, c.members.push(n.id)), e.push(n)), e
            }, []), function(e) {
                (l.store.elements[e.id] = e).node.setAttribute("data-sr-id", e.id)
            })
        } catch (e) {
            return h.call(this, "Reveal failed.", e.message)
        }
        d(u, function(e) {
            l.store.containers[e.id] = {
                id: e.id,
                node: e.node
            }
        }), c && (this.store.sequences[c.id] = c), !0 !== t && (this.store.history.push({
            target: e,
            options: a
        }), this.initTimeout && window.clearTimeout(this.initTimeout), this.initTimeout = window.setTimeout(b.bind(this), 0))
    }
    var C, x = Math.sign || function(e) {
            return (0 < e) - (e < 0) || +e
        },
        S = (C = Date.now(), function(e) {
            var t = Date.now();
            16 < t - C ? e(C = t) : setTimeout(function() {
                return S(e)
            }, 0)
        }),
        A = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || S;

    function D(e, t) {
        for (var n = t ? e.node.clientHeight : e.node.offsetHeight, i = t ? e.node.clientWidth : e.node.offsetWidth, r = 0, o = 0, s = e.node; isNaN(s.offsetTop) || (r += s.offsetTop), isNaN(s.offsetLeft) || (o += s.offsetLeft), s = s.offsetParent;);
        return {
            bounds: {
                top: r,
                right: o + i,
                bottom: r + n,
                left: o
            },
            height: n,
            width: i
        }
    }
    var k, N, I, O, j, F, M, W, B = "4.0.5";

    function U(e) {
        var t;
        if (void 0 === e && (e = {}), void 0 === this || Object.getPrototypeOf(this) !== U.prototype) return new U(e);
        if (!U.isSupported()) return h.call(this, "Instantiation failed.", "This browser is not supported."), n.failure();
        try {
            t = E({}, F || r, e)
        } catch (e) {
            return h.call(this, "Invalid configuration.", e.message), n.failure()
        }
        try {
            if (!f(t.container)[0]) throw new Error("Invalid container.")
        } catch (e) {
            return h.call(this, e.message), n.failure()
        }
        return !(F = t).mobile && w() || !F.desktop && !w() ? (h.call(this, "This device is disabled.", "desktop: " + F.desktop, "mobile: " + F.mobile), n.failure()) : (n.success(), this.store = {
            containers: {},
            elements: {},
            history: [],
            sequences: {}
        }, this.pristine = !0, k = k || function(e, t) {
            var i = this;
            void 0 === e && (e = {
                type: "init"
            }), void 0 === t && (t = this.store.elements), A(function() {
                var n = "init" === e.type || "resize" === e.type;
                d(i.store.containers, function(e) {
                    n && (e.geometry = D.call(i, e, !0));
                    var t = function(e) {
                        var t, n;
                        return n = e.node === document.documentElement ? (t = window.pageYOffset, window.pageXOffset) : (t = e.node.scrollTop, e.node.scrollLeft), {
                            top: t,
                            left: n
                        }
                    }.call(i, e);
                    e.scroll && (e.direction = {
                        x: x(t.left - e.scroll.left),
                        y: x(t.top - e.scroll.top)
                    }), e.scroll = t
                }), d(t, function(e) {
                    n && (e.geometry = D.call(i, e)), e.visible = function(e) {
                        void 0 === e && (e = {});
                        var t = this.store.containers[e.containerId];
                        if (t) {
                            var n = Math.max(0, Math.min(1, e.config.viewFactor)),
                                i = e.config.viewOffset,
                                r = e.geometry.bounds.top + e.geometry.height * n,
                                o = e.geometry.bounds.right - e.geometry.width * n,
                                s = e.geometry.bounds.bottom - e.geometry.height * n,
                                a = e.geometry.bounds.left + e.geometry.width * n,
                                l = t.geometry.bounds.top + t.scroll.top + i.top,
                                c = t.geometry.bounds.right + t.scroll.left - i.right,
                                u = t.geometry.bounds.bottom + t.scroll.top - i.bottom,
                                f = t.geometry.bounds.left + t.scroll.left + i.left;
                            return r < u && f < o && l < s && a < c || "fixed" === e.styles.position
                        }
                    }.call(i, e)
                }), d(t, function(e) {
                    e.sequence ? m.call(i, e) : l.call(i, e)
                }), i.pristine = !1
            })
        }.bind(this), N = N || function() {
            var n = this;
            d(this.store.elements, function(e) {
                e.node.setAttribute("style", e.styles.inline.generated), e.node.removeAttribute("data-sr-id")
            }), d(this.store.containers, function(e) {
                var t = e.node === document.documentElement ? window : e.node;
                t.removeEventListener("scroll", n.delegate), t.removeEventListener("resize", n.delegate)
            }), this.store = {
                containers: {},
                elements: {},
                history: [],
                sequences: {}
            }
        }.bind(this), I = I || T.bind(this), O = O || p.bind(this), j = j || function() {
            var t = this;
            d(this.store.history, function(e) {
                T.call(t, e.target, e.options, !0)
            }), b.call(this)
        }.bind(this), Object.defineProperty(this, "delegate", {
            get: function() {
                return k
            }
        }), Object.defineProperty(this, "destroy", {
            get: function() {
                return N
            }
        }), Object.defineProperty(this, "reveal", {
            get: function() {
                return I
            }
        }), Object.defineProperty(this, "clean", {
            get: function() {
                return O
            }
        }), Object.defineProperty(this, "sync", {
            get: function() {
                return j
            }
        }), Object.defineProperty(this, "defaults", {
            get: function() {
                return F
            }
        }), Object.defineProperty(this, "version", {
            get: function() {
                return B
            }
        }), Object.defineProperty(this, "noop", {
            get: function() {
                return !1
            }
        }), W = W || this)
    }
    return U.isSupported = function() {
        return ("transform" in (t = document.documentElement.style) || "WebkitTransform" in t) && ("transition" in (e = document.documentElement.style) || "WebkitTransition" in e);
        var e, t
    }, Object.defineProperty(U, "debug", {
        get: function() {
            return M || !1
        },
        set: function(e) {
            return M = "boolean" == typeof e ? e : M
        }
    }), U(), U
}();

function myFunction() {
    var e = document.getElementById("card1"),
        t = document.getElementById("card2");
    "none" === e.style.display & "none" === t.style.display ? (e.style.display = "block", e.style.height = "animate bounce", t.style.display = "block") : (e.style.display = "none", t.style.display = "none")
}

function closeLoginAnywhere() {
    var e = document.getElementById("card1"),
        t = document.getElementById("card2");
    "block" == e.style.display && (e.style.display = "none", t.style.display = "none")
}
$(document).ready(function() {
    $(".toggle").on("click", function() {
        $(".containerr").stop().addClass("active")
    }), $(".close").on("click", function() {
        $(".containerr").stop().removeClass("active")
    }), ScrollReveal().reveal(".login", {
        delay: 700
    }), ScrollReveal().reveal(".logo", {
        delay: 700,
        distance: "40%",
        origin: "top"
    }), ScrollReveal().reveal(".scaleUp", {
        duration: 2600
    }),
    ScrollReveal().reveal(".scaleUpRocket", {
       duration: 1500



    }),
    ScrollReveal().reveal(".scaleUpSmoke", {
        duration: 1500

    }),
	ScrollReveal().reveal(".revelMainsiteInfo", {
        delay: 500
    });
    ScrollReveal().reveal(".revelMainsiteInfo1", {
        distance: "150%",
        origin: "bottom",
        opacity: 0,
        delay: 800
    }), ScrollReveal().reveal(".revelMainsiteInfo2", {
        distance: "100%",
        origin: "bottom",
        opacity: 0,
        delay: 1e3
    }), ScrollReveal().reveal(".revelMainsiteInfo3", {
        distance: "60%",
        origin: "bottom",
        opacity: 0,
        delay: 1200
    }), ScrollReveal().reveal(".mailPictureimg", {
        distance: "10%",
        origin: "right",
        opacity: 0,
        duration: 1e3,
        delay: 300
    });



  var $f = $('#application');
  var $s = $('#applicationR');

  $('.rocketFlyLogin').click(function() {
      animationLogin();
  });

  $('.rocketFlyRegister').click(function() {
       animationRegister();
  })



  function animationRegister() {
    if (isDataRegisterValid()) {
        ScrollReveal().clean('.scaleUpRocket');
        ScrollReveal().clean('.scaleUp');
        ScrollReveal().clean('.backgroundMainSmoke');
        ScrollReveal().clean('.mailPictureimg');
        ScrollReveal().clean('.login');
        ScrollReveal().clean('.logo');

        $( ".mailPictureimg" ).addClass( "mailPictureimgOut" );
        $( ".siteInfo " ).addClass( "revelMainsiteInfoOut" );
        $( ".backgroundMainImg ").addClass( "rotateOut" );
        $( ".backgroundMainSmoke ").addClass( "Down" );
        $( ".backgroundMainRocket " ).addClass( "Fly" );
        $( ".login " ).addClass( "loginOut" );
        $( ".logo " ).addClass( "logoOut" );
        setTimeout(function() { $s.submit(); },500);
      }
  }

  function animationLogin() {
   if (isDataValid()) {
        ScrollReveal().clean('.scaleUpRocket');
        ScrollReveal().clean('.scaleUp');
        ScrollReveal().clean('.backgroundMainSmoke');
        ScrollReveal().clean('.mailPictureimg');
        ScrollReveal().clean('.login');
        ScrollReveal().clean('.logo');

        $( ".mailPictureimg" ).addClass( "mailPictureimgOut" );
        $( ".siteInfo " ).addClass( "revelMainsiteInfoOut" );
        $( ".backgroundMainImg ").addClass( "rotateOut" );
        $( ".backgroundMainSmoke ").addClass( "Down" );
        $( ".backgroundMainRocket " ).addClass( "Fly" );
        $( ".login " ).addClass( "loginOut" );
        $( ".logo " ).addClass( "logoOut" );
        setTimeout(function() { $f.submit(); },500);
      }
  }

  function isDataValid() {
      if ($f[0].username.checkValidity() &&
          $f[0].password.checkValidity()) {
            return true;
      }
      return false;
  }
  function isDataRegisterValid() {
      if ($s[0].username.checkValidity() &&
          $s[0].uname.checkValidity() &&
          $s[0].password.checkValidity() &&
          $s[0].password_again.checkValidity()) {
            return true;
      }
      return false;
  }










});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsInRoaXMiLCJub0dsb2JhbCIsImZjYW1lbENhc2UiLCJhbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsImFyciIsInNsaWNlIiwiY29uY2F0IiwicHVzaCIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsInN1cHBvcnQiLCJ2ZXJzaW9uIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZm4iLCJpbml0IiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiaXNBcnJheUxpa2UiLCJvYmoiLCJsZW5ndGgiLCJ0eXBlIiwiaXNXaW5kb3ciLCJwcm90b3R5cGUiLCJqcXVlcnkiLCJjb25zdHJ1Y3RvciIsInRvQXJyYXkiLCJjYWxsIiwiZ2V0IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJtYXAiLCJlbGVtIiwiaSIsImFwcGx5IiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJsZW4iLCJqIiwiZW5kIiwic29ydCIsInNwbGljZSIsImV4dGVuZCIsIm9wdGlvbnMiLCJuYW1lIiwic3JjIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJ0YXJnZXQiLCJkZWVwIiwiaXNGdW5jdGlvbiIsImlzUGxhaW5PYmplY3QiLCJpc0FycmF5IiwidW5kZWZpbmVkIiwiZXhwYW5kbyIsIk1hdGgiLCJyYW5kb20iLCJyZXBsYWNlIiwiaXNSZWFkeSIsImVycm9yIiwibXNnIiwibm9vcCIsIkFycmF5IiwiaXNOdW1lcmljIiwicmVhbFN0cmluZ09iaiIsInBhcnNlRmxvYXQiLCJrZXkiLCJub2RlVHlwZSIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwiY29kZSIsInNjcmlwdCIsImluZGlyZWN0IiwiZXZhbCIsInRyaW0iLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImNhbWVsQ2FzZSIsInN0cmluZyIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiT2JqZWN0IiwiaW5BcnJheSIsInNlY29uZCIsImdyZXAiLCJpbnZlcnQiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJ2YWx1ZSIsImd1aWQiLCJwcm94eSIsInRtcCIsImFyZ3MiLCJub3ciLCJEYXRlIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJzcGxpdCIsIlNpenpsZSIsImZ1bmVzY2FwZSIsIl8iLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwidW5sb2FkSGFuZGxlciIsInNldERvY3VtZW50IiwiRXhwciIsImdldFRleHQiLCJpc1hNTCIsInRva2VuaXplIiwiY29tcGlsZSIsInNlbGVjdCIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiZG9uZSIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwic29ydE9yZGVyIiwiYSIsImIiLCJwb3AiLCJwdXNoX25hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJhdHRyaWJ1dGVRdW90ZXMiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJJRCIsIkNMQVNTIiwiVEFHIiwiQVRUUiIsIlBTRVVETyIsIkNISUxEIiwiYm9vbCIsIm5lZWRzQ29udGV4dCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJlc2NhcGUiLCJydW5lc2NhcGUiLCJjaGlsZE5vZGVzIiwiZSIsImVscyIsInNlZWQiLCJtIiwibmlkIiwibmlkc2VsZWN0IiwibWF0Y2giLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwidG9TZWxlY3RvciIsImpvaW4iLCJ0ZXN0Q29udGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImtleXMiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJkaXYiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsImRvY3VtZW50RWxlbWVudCIsIm5vZGUiLCJoYXNDb21wYXJlIiwicGFyZW50IiwiZG9jIiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmluZCIsImZpbHRlciIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJpbm5lckhUTUwiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJ2YWwiLCJzcGVjaWZpZWQiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCI+IiwiZGlyIiwiICIsIisiLCJ+IiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJyZXN1bHQiLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsInNldEZpbHRlcnMiLCJpZHgiLCJtYXRjaGVkIiwibm90IiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImhhcyIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsInJvb3QiLCJmb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJkaXNhYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJlbXB0eSIsImhlYWRlciIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJ0b2tlbnMiLCJhZGRDb21iaW5hdG9yIiwiY29tYmluYXRvciIsImJhc2UiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsImNvbnRleHRzIiwibXVsdGlwbGVDb250ZXh0cyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiYnlFbGVtZW50IiwiZGlycnVuc1VuaXF1ZSIsImJ5U2V0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInRva2VuIiwiY29tcGlsZWQiLCJkaXYxIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsIm4iLCJybmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsInJpc1NpbXBsZSIsIndpbm5vdyIsInF1YWxpZmllciIsInNlbGYiLCJyb290alF1ZXJ5IiwicmVhZHkiLCJwYXJzZUhUTUwiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsIm5leHQiLCJwcmV2Iiwic2libGluZyIsInRhcmdldHMiLCJsIiwiY2xvc2VzdCIsInBvcyIsImluZGV4IiwicHJldkFsbCIsImFkZCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsInJldmVyc2UiLCJyZWFkeUxpc3QiLCJybm90d2hpdGUiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiQ2FsbGJhY2tzIiwib2JqZWN0IiwiZmxhZyIsImZpcmUiLCJsb2NrZWQiLCJvbmNlIiwiZmlyZWQiLCJmaXJpbmciLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwibWVtb3J5Iiwic3RvcE9uRmFsc2UiLCJyZW1vdmUiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJwcm9taXNlIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJmYWlsIiwidGhlbiIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5IiwicmVzb2x2ZSIsInJlamVjdCIsInBpcGUiLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzdWJvcmRpbmF0ZSIsInVwZGF0ZUZ1bmMiLCJ2YWx1ZXMiLCJwcm9ncmVzc1ZhbHVlcyIsIm5vdGlmeVdpdGgiLCJyZW1haW5pbmciLCJyZXNvbHZlV2l0aCIsInByb2dyZXNzQ29udGV4dHMiLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwicmVhZHlXYWl0IiwiaG9sZFJlYWR5IiwiaG9sZCIsIndhaXQiLCJ0cmlnZ2VySGFuZGxlciIsIm9mZiIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsInNldFRpbWVvdXQiLCJhY2NlcHREYXRhIiwib3duZXIiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJEYXRhIiwidWlkIiwicmVnaXN0ZXIiLCJpbml0aWFsIiwiZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldCIsImRhdGEiLCJwcm9wIiwic3RvcmVkIiwiY2FtZWwiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsInBhcnNlSlNPTiIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiY2FtZWxLZXkiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwiaXNIaWRkZW4iLCJlbCIsImNzcyIsInBudW0iLCJzb3VyY2UiLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsInN0eWxlIiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwid3JhcE1hcCIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJyaHRtbCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsIndyYXAiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsImVyciIsIm9uIiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJldmVudCIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJ0IiwiaGFuZGxlT2JqIiwic3BlY2lhbCIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwiZml4IiwiaGFuZGxlclF1ZXVlIiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwic2VsIiwiaXNOYU4iLCJwcm9wcyIsImZpeEhvb2tzIiwia2V5SG9va3MiLCJvcmlnaW5hbCIsIndoaWNoIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwibW91c2VIb29rcyIsImV2ZW50RG9jIiwiYm9keSIsInBhZ2VYIiwiY2xpZW50WCIsInNjcm9sbExlZnQiLCJjbGllbnRMZWZ0IiwicGFnZVkiLCJjbGllbnRZIiwic2Nyb2xsVG9wIiwiY2xpZW50VG9wIiwib3JpZ2luYWxFdmVudCIsImZpeEhvb2siLCJFdmVudCIsImxvYWQiLCJub0J1YmJsZSIsInRyaWdnZXIiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJyZWxhdGVkVGFyZ2V0IiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyc2NyaXB0VHlwZU1hc2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImNvbnRlbnQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJpbnNlcnQiLCJpZnJhbWUiLCJlbGVtZGlzcGxheSIsIkhUTUwiLCJCT0RZIiwiYWN0dWFsRGlzcGxheSIsImRpc3BsYXkiLCJkZWZhdWx0RGlzcGxheSIsIndyaXRlIiwiY2xvc2UiLCJzd2FwIiwib2xkIiwicGl4ZWxQb3NpdGlvblZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicGl4ZWxNYXJnaW5SaWdodFZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsImNvbnRhaW5lciIsInJtYXJnaW4iLCJybnVtbm9ucHgiLCJnZXRTdHlsZXMiLCJ2aWV3Iiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwibWFyZ2luTGVmdCIsIndpZHRoIiwibWFyZ2luUmlnaHQiLCJjdXJDU1MiLCJjb21wdXRlZCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxNYXJnaW5SaWdodCIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJwaXhlbFBvc2l0aW9uIiwiYm94U2l6aW5nUmVsaWFibGUiLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJyZWxpYWJsZU1hcmdpblJpZ2h0IiwibWFyZ2luRGl2IiwicmRpc3BsYXlzd2FwIiwiY3NzU2hvdyIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcE5hbWUiLCJjYXBOYW1lIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1heCIsImF1Z21lbnRXaWR0aE9ySGVpZ2h0IiwiZXh0cmEiLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJzaG93SGlkZSIsInNob3ciLCJoaWRkZW4iLCJUd2VlbiIsImVhc2luZyIsImNzc0hvb2tzIiwib3BhY2l0eSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiY3NzUHJvcHMiLCJmbG9hdCIsIm9yaWdOYW1lIiwiaXNGaW5pdGUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInByZWZpeCIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwicGFydHMiLCJoaWRlIiwidG9nZ2xlIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJzdGVwIiwiZngiLCJsaW5lYXIiLCJwIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwidGltZXJJZCIsIm9wdCIsInJmeHR5cGVzIiwicnJ1biIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJoZWlnaHQiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwidGljayIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicmVqZWN0V2l0aCIsInByb3BGaWx0ZXIiLCJ0aW1lciIsImFuaW0iLCJjb21wbGV0ZSIsIioiLCJ0d2VlbmVyIiwib2xkZmlyZSIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwiZG9BbmltYXRpb24iLCJvcHRhbGwiLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJvcHREaXNhYmxlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsInByb3BOYW1lIiwiYXR0ck5hbWVzIiwicHJvcEZpeCIsImdldHRlciIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJmb3IiLCJjbGFzcyIsInJjbGFzcyIsImdldENsYXNzIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwicnNwYWNlcyIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwicmZvY3VzTW9ycGgiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwiZXZlbnRQYXRoIiwiaXNUcmlnZ2VyIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwiZm9jdXNpbiIsImF0dGFjaGVzIiwibm9uY2UiLCJycXVlcnkiLCJKU09OIiwicGFyc2UiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJoYXNoIiwicnRzIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJzIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsImxuYW1lIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0Iiwic3VjY2VzcyIsIm1ldGhvZCIsImNyb3NzRG9tYWluIiwiaG9zdCIsInBhcmFtIiwidHJhZGl0aW9uYWwiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsInVud3JhcCIsInZpc2libGUiLCJnZXRDbGllbnRSZWN0cyIsInIyMCIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInYiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInRleHQgc2NyaXB0IiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJfbG9hZCIsImdldFdpbmRvdyIsInBhcmFtcyIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsIndpbiIsImJveCIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJiaW5kIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwic2l6ZSIsImFuZFNlbGYiLCJkZWZpbmUiLCJhbWQiLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsInJlcXVpcmUiLCJib290c3RyYXAiLCJQb3BwZXIiLCJnIiwidSIsImVudW1lcmFibGUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvIiwiciIsImZvckVhY2giLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmF1bHQiLCJUUkFOU0lUSU9OX0VORCIsImdldFVJRCIsImdldFNlbGVjdG9yRnJvbUVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQiLCJyZWZsb3ciLCJ0cmlnZ2VyVHJhbnNpdGlvbkVuZCIsInN1cHBvcnRzVHJhbnNpdGlvbkVuZCIsIkJvb2xlYW4iLCJpc0VsZW1lbnQiLCJ0eXBlQ2hlY2tDb25maWciLCJmaW5kU2hhZG93Um9vdCIsImF0dGFjaFNoYWRvdyIsImdldFJvb3ROb2RlIiwiU2hhZG93Um9vdCIsImpRdWVyeURldGVjdGlvbiIsIlR5cGVFcnJvciIsImVtdWxhdGVUcmFuc2l0aW9uRW5kIiwiYyIsImgiLCJmIiwiQ0xPU0UiLCJDTE9TRUQiLCJDTElDS19EQVRBX0FQSSIsIl9lbGVtZW50IiwiX2dldFJvb3RFbGVtZW50IiwiX3RyaWdnZXJDbG9zZUV2ZW50IiwiX3JlbW92ZUVsZW1lbnQiLCJkaXNwb3NlIiwiX2Rlc3Ryb3lFbGVtZW50IiwiX2pRdWVyeUludGVyZmFjZSIsIl9oYW5kbGVEaXNtaXNzIiwiQ29uc3RydWN0b3IiLCJ5IiwiRSIsIkMiLCJUIiwiUyIsImsiLCJGT0NVU19CTFVSX0RBVEFfQVBJIiwiTE9BRF9EQVRBX0FQSSIsIkgiLCJjbGFzc0xpc3QiLCJ0YWdOYW1lIiwiaGFzQXR0cmlidXRlIiwiUiIsIngiLCJGIiwiVSIsIlciLCJxIiwia2V5Ym9hcmQiLCJzbGlkZSIsInBhdXNlIiwidG91Y2giLCJNIiwiSyIsIlEiLCJZIiwiU0xJREUiLCJTTElEIiwiS0VZRE9XTiIsIk1PVVNFRU5URVIiLCJNT1VTRUxFQVZFIiwiVE9VQ0hTVEFSVCIsIlRPVUNITU9WRSIsIlRPVUNIRU5EIiwiUE9JTlRFUkRPV04iLCJQT0lOVEVSVVAiLCJEUkFHX1NUQVJUIiwiWCIsIml0IiwiaHQiLCJUT1VDSCIsIlBFTiIsInV0IiwiX2lzU2xpZGluZyIsIl9zbGlkZSIsIm5leHRXaGVuVmlzaWJsZSIsIl9pc1BhdXNlZCIsImN5Y2xlIiwiX2ludGVydmFsIiwiX2NvbmZpZyIsInZpc2liaWxpdHlTdGF0ZSIsIl9hY3RpdmVFbGVtZW50IiwiX2dldEl0ZW1JbmRleCIsIl9pdGVtcyIsIl9pbmRpY2F0b3JzRWxlbWVudCIsIl9nZXRDb25maWciLCJfaGFuZGxlU3dpcGUiLCJhYnMiLCJ0b3VjaERlbHRhWCIsIl9hZGRFdmVudExpc3RlbmVycyIsIl9rZXlkb3duIiwiX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMiLCJfdG91Y2hTdXBwb3J0ZWQiLCJfcG9pbnRlckV2ZW50IiwicG9pbnRlclR5cGUiLCJ0b3VjaFN0YXJ0WCIsInRvdWNoZXMiLCJ0b3VjaFRpbWVvdXQiLCJfZ2V0SXRlbUJ5RGlyZWN0aW9uIiwiX3RyaWdnZXJTbGlkZUV2ZW50IiwiZGlyZWN0aW9uIiwiZnJvbSIsIl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50IiwiZGVmYXVsdEludGVydmFsIiwiZCIsInJpZGUiLCJfZGF0YUFwaUNsaWNrSGFuZGxlciIsIm5hdmlnYXRvciIsIm1heFRvdWNoUG9pbnRzIiwiUG9pbnRlckV2ZW50IiwiTVNQb2ludGVyRXZlbnQiLCJmdCIsImR0IiwiX3QiLCJtdCIsInB0IiwidnQiLCJTSE9XIiwiU0hPV04iLCJISURFIiwiSElEREVOIiwieXQiLCJFdCIsIkN0IiwiVHQiLCJJdCIsInd0IiwiX2lzVHJhbnNpdGlvbmluZyIsIl9wYXJlbnQiLCJfc2VsZWN0b3IiLCJfZ2V0RGltZW5zaW9uIiwiX3RyaWdnZXJBcnJheSIsInNldFRyYW5zaXRpb25pbmciLCJfZ2V0UGFyZW50IiwiX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyIsIl9nZXRUYXJnZXRGcm9tRWxlbWVudCIsIkF0IiwiTnQiLCJPdCIsImt0IiwiUHQiLCJMdCIsImp0IiwiQ0xJQ0siLCJLRVlET1dOX0RBVEFfQVBJIiwiS0VZVVBfREFUQV9BUEkiLCJIdCIsIlJ0IiwiV3QiLCJNdCIsIlF0IiwiWnQiLCJmbGlwIiwiYm91bmRhcnkiLCJyZWZlcmVuY2UiLCJwb3BwZXJDb25maWciLCJ0ZSIsImVlIiwiX21lbnUiLCJfY2xlYXJNZW51cyIsIl9nZXRQYXJlbnRGcm9tRWxlbWVudCIsIl9pbk5hdmJhciIsIl9wb3BwZXIiLCJfZ2V0UG9wcGVyQ29uZmlnIiwiZGVzdHJveSIsInVwZGF0ZSIsIl9kZXRlY3ROYXZiYXIiLCJzY2hlZHVsZVVwZGF0ZSIsIkRlZmF1bHQiLCJEZWZhdWx0VHlwZSIsIl9nZXRNZW51RWxlbWVudCIsIl9nZXRQbGFjZW1lbnQiLCJfZ2V0T2Zmc2V0Iiwib2Zmc2V0cyIsInBsYWNlbWVudCIsIm1vZGlmaWVycyIsInByZXZlbnRPdmVyZmxvdyIsImJvdW5kYXJpZXNFbGVtZW50IiwiYXBwbHlTdHlsZSIsImNsaWNrRXZlbnQiLCJfZGF0YUFwaUtleWRvd25IYW5kbGVyIiwibmUiLCJpZSIsIm9lIiwicmUiLCJzZSIsImJhY2tkcm9wIiwiYWUiLCJsZSIsIkhJREVfUFJFVkVOVEVEIiwiRk9DVVNJTiIsIlJFU0laRSIsIkNMSUNLX0RJU01JU1MiLCJLRVlET1dOX0RJU01JU1MiLCJNT1VTRVVQX0RJU01JU1MiLCJNT1VTRURPV05fRElTTUlTUyIsImZlIiwiZGUiLCJnZSIsIl9lIiwiRWUiLCJDZSIsIlRlIiwiX2lzU2hvd24iLCJfY2hlY2tTY3JvbGxiYXIiLCJfc2V0U2Nyb2xsYmFyIiwiX2FkanVzdERpYWxvZyIsIl9zZXRFc2NhcGVFdmVudCIsIl9zZXRSZXNpemVFdmVudCIsIl9kaWFsb2ciLCJfaWdub3JlQmFja2Ryb3BDbGljayIsIl9zaG93QmFja2Ryb3AiLCJfc2hvd0VsZW1lbnQiLCJfaGlkZU1vZGFsIiwiX2JhY2tkcm9wIiwiX2lzQm9keU92ZXJmbG93aW5nIiwiX3Njcm9sbGJhcldpZHRoIiwiaGFuZGxlVXBkYXRlIiwiX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24iLCJOb2RlIiwiRUxFTUVOVF9OT0RFIiwiX2VuZm9yY2VGb2N1cyIsIl9yZXNldEFkanVzdG1lbnRzIiwiX3Jlc2V0U2Nyb2xsYmFyIiwiX3JlbW92ZUJhY2tkcm9wIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJyaWdodCIsImlubmVyV2lkdGgiLCJfZ2V0U2Nyb2xsYmFyV2lkdGgiLCJjbGllbnRXaWR0aCIsImJlIiwiRGUiLCJJZSIsIndlIiwiQWUiLCJOZSIsIk9lIiwia2UiLCJQZSIsIkxlIiwiamUiLCJIZSIsInRlbXBsYXRlIiwidGl0bGUiLCJmYWxsYmFja1BsYWNlbWVudCIsInNhbml0aXplIiwic2FuaXRpemVGbiIsIndoaXRlTGlzdCIsIlJlIiwiQVVUTyIsIlRPUCIsIlJJR0hUIiwiQk9UVE9NIiwiTEVGVCIsInhlIiwiYXJlYSIsImJyIiwiZW0iLCJociIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsImltZyIsImxpIiwib2wiLCJwcmUiLCJzbWFsbCIsInNwYW4iLCJzdWIiLCJzdXAiLCJzdHJvbmciLCJ1bCIsIkZlIiwiV2UiLCJJTlNFUlRFRCIsIkZPQ1VTT1VUIiwicWUiLCJNZSIsIkJlIiwiVmUiLCJYZSIsImVuYWJsZSIsIl9pc0VuYWJsZWQiLCJ0b2dnbGVFbmFibGVkIiwiREFUQV9LRVkiLCJfZ2V0RGVsZWdhdGVDb25maWciLCJfYWN0aXZlVHJpZ2dlciIsIl9pc1dpdGhBY3RpdmVUcmlnZ2VyIiwiX2VudGVyIiwiX2xlYXZlIiwiZ2V0VGlwRWxlbWVudCIsIl90aW1lb3V0IiwiZWxlbWVudCIsIkVWRU5UX0tFWSIsIl9oaWRlTW9kYWxIYW5kbGVyIiwidGlwIiwiX2hvdmVyU3RhdGUiLCJjb25maWciLCJpc1dpdGhDb250ZW50IiwiTkFNRSIsInNldENvbnRlbnQiLCJfZ2V0QXR0YWNobWVudCIsImFkZEF0dGFjaG1lbnRDbGFzcyIsIl9nZXRDb250YWluZXIiLCJfZml4VHJhbnNpdGlvbiIsIl9jbGVhblRpcENsYXNzIiwiZ2V0VGl0bGUiLCJzZXRFbGVtZW50Q29udGVudCIsImJlaGF2aW9yIiwiYXJyb3ciLCJvbkNyZWF0ZSIsIm9yaWdpbmFsUGxhY2VtZW50IiwiX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSIsIm9uVXBkYXRlIiwiX3NldExpc3RlbmVycyIsIl9maXhUaXRsZSIsImluc3RhbmNlIiwicG9wcGVyIiwiJGUiLCJHZSIsIkplIiwiWmUiLCJ0biIsImVuIiwibm4iLCJjbiIsImhuIiwiY3JlYXRlIiwiX19wcm90b19fIiwiX2dldENvbnRlbnQiLCJybiIsInVuIiwiZG4iLCJnbiIsIl9uIiwibW4iLCJwbiIsIkFDVElWQVRFIiwiU0NST0xMIiwieW4iLCJDbiIsIlRuIiwiU24iLCJObiIsIk9uIiwicmVmcmVzaCIsIl9zY3JvbGxFbGVtZW50IiwiX2dldFNjcm9sbFRvcCIsIl9vZmZzZXRzIiwiX3RhcmdldHMiLCJfc2Nyb2xsSGVpZ2h0IiwiX2dldFNjcm9sbEhlaWdodCIsIl9hY3RpdmVUYXJnZXQiLCJfZ2V0T2Zmc2V0SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJfcHJvY2VzcyIsIl9hY3RpdmF0ZSIsIl9jbGVhciIsImtuIiwiUG4iLCJMbiIsInRhYiIsImpuIiwiUm4iLCJNbiIsIktuIiwiWW4iLCJfdHJhbnNpdGlvbkNvbXBsZXRlIiwiem4iLCJYbiIsIiRuIiwiR24iLCJKbiIsImVpIiwibmkiLCJpaSIsImF1dG9oaWRlIiwib2kiLCJzaSIsIl9jbG9zZSIsIkFsZXJ0IiwiQnV0dG9uIiwiQ2Fyb3VzZWwiLCJDb2xsYXBzZSIsIkRyb3Bkb3duIiwiTW9kYWwiLCJQb3BvdmVyIiwiU2Nyb2xsc3B5IiwiVGFiIiwiVG9hc3QiLCJUb29sdGlwIiwiVXRpbCIsIm1vZCIsIldPVyIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImRlc2NyaXB0b3IiLCJpc0luIiwibmVlZGxlIiwiaGF5c3RhY2siLCJhZGRFdmVudCIsImRldGFjaEV2ZW50IiwiV2Vha01hcCIsIk1veldlYWtNYXAiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2Via2l0TXV0YXRpb25PYnNlcnZlciIsIk1vek11dGF0aW9uT2JzZXJ2ZXIiLCJub3RTdXBwb3J0ZWQiLCJjb25zb2xlIiwid2FybiIsImdldENvbXB1dGVkU3R5bGVSWCIsIl9jaGFyIiwiY3VycmVudFN0eWxlIiwiZmluaXNoZWQiLCJfdGhpcyIsImJveGVzIiwiYm94Q2xhc3MiLCJyZXNldFN0eWxlIiwic2Nyb2xsQ29udGFpbmVyIiwic2Nyb2xsSGFuZGxlciIsInNjcm9sbENhbGxiYWNrIiwibGl2ZSIsInJlY29yZHMiLCJyZWNvcmQiLCJhZGRlZE5vZGVzIiwiZG9TeW5jIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJpdGVyYWJsZSIsInNjcm9sbGVkIiwiYW5pbWF0ZUNsYXNzIiwid293RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwicmVzZXRBbmltYXRpb24iLCJfdGhpczIiLCJpdGVyYXRpb24iLCJjdXN0b21TdHlsZSIsInNyY0VsZW1lbnQiLCJjYWNoZUFuaW1hdGlvbk5hbWUiLCJ2ZW5kb3JTZXQiLCJhbmltYXRpb25EdXJhdGlvbiIsImFuaW1hdGlvbkRlbGF5IiwiYW5pbWF0aW9uTmFtZSIsImNhY2hlZEFuaW1hdGlvbk5hbWUiLCJ2ZW5kb3JzIiwiY2hhckF0Iiwic3Vic3RyIiwicHJvcGVydHkiLCJnZXRQcm9wZXJ0eUNTU1ZhbHVlIiwidmVuZG9yIiwiYU5hbWUiLCJ2ZW5kb3JDU1MiLCJhbmltYXRpb25OYW1lQ2FjaGUiLCJpc1Zpc2libGUiLCJvZmZzZXRUb3AiLCJ2aWV3VG9wIiwidmlld0JvdHRvbSIsIm1pbiIsImJvdHRvbSIsIm1vYmlsZSIsImFnZW50IiwidXNlckFnZW50IiwiZGVmYXVsdHMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjdXN0b20iLCJidWJibGUiLCJjYW5jZWwiLCJkZXRhaWwiLCJjdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwiY3JlYXRlRXZlbnRPYmplY3QiLCJldmVudFR5cGUiLCJldmVudE5hbWUiLCJTY3JvbGxSZXZlYWwiLCJkaXN0YW5jZSIsIm9yaWdpbiIsInJvdGF0ZSIsInoiLCJjbGVhbnVwIiwiZGVza3RvcCIsInVzZURlbGF5Iiwidmlld0ZhY3RvciIsInZpZXdPZmZzZXQiLCJhZnRlclJlc2V0IiwiYWZ0ZXJSZXZlYWwiLCJiZWZvcmVSZXNldCIsImJlZm9yZVJldmVhbCIsImZhaWx1cmUiLCJjbGVhbiIsInJldmVhbCIsInN5bmMiLCJOb2RlTGlzdCIsImRlYnVnIiwibG9nIiwic3RhbGUiLCJzdG9yZSIsImNvbnRhaW5lcklkIiwic2VxdWVuY2UiLCJjb250YWluZXJzIiwic2VxdWVuY2VzIiwiY2FsbGJhY2tUaW1lciIsImNsb2NrIiwiaW5saW5lIiwiZ2VuZXJhdGVkIiwibWVzc2FnZSIsIk4iLCJSYW5nZUVycm9yIiwiRCIsImNsZWFyQ2FjaGUiLCJwcmlzdGluZSIsInNlZW4iLCJyZXZlYWxlZCIsInRyYW5zZm9ybSIsImZpbmFsIiwidHJhbnNpdGlvbiIsImRlbGF5ZWQiLCJpbnN0YW50IiwibW9kZWxzIiwibWVtYmVycyIsImJsb2NrZWQiLCJmb290IiwiaW5pdFRpbWVvdXQiLCJyZWR1Y2UiLCJzb21lIiwiTyIsImZvbnRTaXplIiwic2luIiwiQSIsIm1hdHJpeCIsImZyYWdtZW50cyIsIlAiLCJMIiwiSSIsImhpc3RvcnkiLCJzaWduIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib2Zmc2V0TGVmdCIsImJvdW5kcyIsImdldFByb3RvdHlwZU9mIiwiaXNTdXBwb3J0ZWQiLCJnZW9tZXRyeSIsInNjcm9sbCIsIm15RnVuY3Rpb24iLCJjbG9zZUxvZ2luQW55d2hlcmUiXSwibWFwcGluZ3MiOiJDQWlCQyxTQUFVQSxFQUFRQyxHQUVLLGlCQUFYQyxRQUFpRCxpQkFBbkJBLE9BQU9DLFFBUWhERCxPQUFPQyxRQUFVSCxFQUFPSSxTQUN2QkgsRUFBU0QsR0FBUSxHQUNqQixTQUFVSyxHQUNULElBQU1BLEVBQUVELFNBQ1AsTUFBTSxJQUFJRSxNQUFPLDRDQUVsQixPQUFPTCxFQUFTSSxJQUdsQkosRUFBU0QsR0FuQlgsQ0F1Qm9CLG9CQUFYTyxPQUF5QkEsT0FBU0MsS0FBTSxTQUFVRCxFQUFRRSxHQWlEckQsU0FBYkMsRUFBdUJDLEVBQUtDLEdBQzNCLE9BQU9BLEVBQU9DLGNBM0NoQixJQUFJQyxFQUFNLEdBRU5WLEVBQVdHLEVBQU9ILFNBRWxCVyxFQUFRRCxFQUFJQyxNQUVaQyxFQUFTRixFQUFJRSxPQUViQyxFQUFPSCxFQUFJRyxLQUVYQyxFQUFVSixFQUFJSSxRQUVkQyxFQUFhLEdBRWJDLEVBQVdELEVBQVdDLFNBRXRCQyxFQUFTRixFQUFXRyxlQUVwQkMsRUFBVSxHQUtiQyxFQUFVLFFBR1ZDLEVBQVMsU0FBVUMsRUFBVUMsR0FJNUIsT0FBTyxJQUFJRixFQUFPRyxHQUFHQyxLQUFNSCxFQUFVQyxJQUt0Q0csRUFBUSxxQ0FHUkMsRUFBWSxRQUNaQyxFQUFhLGVBNmJkLFNBQVNDLEVBQWFD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dkJ3aEIsRUFBRSxlQUFldmxCLE9BQU84WCxTQUFTLFlBR25DeU4sRUFBRSxVQUFVeGhCLEdBQUcsUUFBUyxXQUN0QndoQixFQUFFLGVBQWV2bEIsT0FBT21ZLFlBQVksWUFHeEMwc0IsZUFBZWdCLE9BQU8sU0FBUyxDQUFDeHZCLE1BQU8sTUFDdkN3dUIsZUFBZWdCLE9BQU8sUUFBUSxDQUFDeHZCLE1BQU8sSUFBS3l1QixTQUFVLE1BQU9DLE9BQVEsUUFDcEVGLGVBQWVnQixPQUFPLFdBQVksQ0FBRTd6QixTQUFVLE9BQzlDNnlCLGVBQWVnQixPQUFPLHFCQUFzQixDQUFFeHZCLE1BQU8sTUFnQ3JEd3VCLGVBQWVnQixPQUFPLHNCQTdCUixDQUNaZixTQUFVLE9BQ1ZDLE9BQVEsU0FDUi8wQixRQUFTLEVBQ1RxRyxNQUFPLE1BMEJUd3VCLGVBQWVnQixPQUFPLHNCQXZCUCxDQUNiZixTQUFVLE9BQ1ZDLE9BQVEsU0FDUi8wQixRQUFTLEVBQ1RxRyxNQUFPLE1Bb0JUd3VCLGVBQWVnQixPQUFPLHNCQWpCUCxDQUNiZixTQUFVLE1BQ1ZDLE9BQVEsU0FDUi8wQixRQUFTLEVBQ1RxRyxNQUFPLE9BY1R3dUIsZUFBZWdCLE9BQU8sa0JBWEwsQ0FDZmYsU0FBVSxNQUNWQyxPQUFRLFFBQ1IvMEIsUUFBUyxFQUNUZ0MsU0FBVSxJQUNWcUUsTUFBTyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFRoaXJkIHBhcnR5XG4gKi9cbi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2Mi4yLjRcbiAqIGh0dHA6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wNS0yMFQxNzoyM1pcbiAqL1xuXG4oZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0odHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDE4K1xuLy8gQ2FuJ3QgYmUgaW4gc3RyaWN0IG1vZGUsIHNldmVyYWwgbGlicyBpbmNsdWRpbmcgQVNQLk5FVCB0cmFjZVxuLy8gdGhlIHN0YWNrIHZpYSBhcmd1bWVudHMuY2FsbGVyLmNhbGxlZSBhbmQgRmlyZWZveCBkaWVzIGlmXG4vLyB5b3UgdHJ5IHRvIHRyYWNlIHRocm91Z2ggXCJ1c2Ugc3RyaWN0XCIgY2FsbCBjaGFpbnMuICgjMTMzMzUpXG4vL1widXNlIHN0cmljdFwiO1xudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjIuMi40XCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xXG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcblxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFtcXGRhLXpdKS9naSxcblxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gU3RhcnQgd2l0aCBhbiBlbXB0eSBzZWxlY3RvclxuXHRzZWxlY3RvcjogXCJcIixcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cdFx0cmV0dXJuIG51bSAhPSBudWxsID9cblxuXHRcdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdFx0KCBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdICkgOlxuXG5cdFx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0XHRzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXHRcdHJldC5jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IGpRdWVyeS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNBcnJheSggc3JjICkgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc0Z1bmN0aW9uOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwiZnVuY3Rpb25cIjtcblx0fSxcblxuXHRpc0FycmF5OiBBcnJheS5pc0FycmF5LFxuXG5cdGlzV2luZG93OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH0sXG5cblx0aXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKG51bGx8dHJ1ZXxmYWxzZXxcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQvLyBhZGRpbmcgMSBjb3JyZWN0cyBsb3NzIG9mIHByZWNpc2lvbiBmcm9tIHBhcnNlRmxvYXQgKCMxNTEwMClcblx0XHR2YXIgcmVhbFN0cmluZ09iaiA9IG9iaiAmJiBvYmoudG9TdHJpbmcoKTtcblx0XHRyZXR1cm4gIWpRdWVyeS5pc0FycmF5KCBvYmogKSAmJiAoIHJlYWxTdHJpbmdPYmogLSBwYXJzZUZsb2F0KCByZWFsU3RyaW5nT2JqICkgKyAxICkgPj0gMDtcblx0fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBrZXk7XG5cblx0XHQvLyBOb3QgcGxhaW4gb2JqZWN0czpcblx0XHQvLyAtIEFueSBvYmplY3Qgb3IgdmFsdWUgd2hvc2UgaW50ZXJuYWwgW1tDbGFzc11dIHByb3BlcnR5IGlzIG5vdCBcIltvYmplY3QgT2JqZWN0XVwiXG5cdFx0Ly8gLSBET00gbm9kZXNcblx0XHQvLyAtIHdpbmRvd1xuXHRcdGlmICggalF1ZXJ5LnR5cGUoIG9iaiApICE9PSBcIm9iamVjdFwiIHx8IG9iai5ub2RlVHlwZSB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIE5vdCBvd24gY29uc3RydWN0b3IgcHJvcGVydHkgbXVzdCBiZSBPYmplY3Rcblx0XHRpZiAoIG9iai5jb25zdHJ1Y3RvciAmJlxuXHRcdFx0XHQhaGFzT3duLmNhbGwoIG9iaiwgXCJjb25zdHJ1Y3RvclwiICkgJiZcblx0XHRcdFx0IWhhc093bi5jYWxsKCBvYmouY29uc3RydWN0b3IucHJvdG90eXBlIHx8IHt9LCBcImlzUHJvdG90eXBlT2ZcIiApICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIE93biBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhdGVkIGZpcnN0bHksIHNvIHRvIHNwZWVkIHVwLFxuXHRcdC8vIGlmIGxhc3Qgb25lIGlzIG93biwgdGhlbiBhbGwgcHJvcGVydGllcyBhcmUgb3duXG5cdFx0Zm9yICgga2V5IGluIG9iaiApIHt9XG5cblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgfHwgaGFzT3duLmNhbGwoIG9iaiwga2V5ICk7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgbmFtZTtcblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0dHlwZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjAsIGlPUzw2IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0XHR0eXBlb2Ygb2JqO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlICkge1xuXHRcdHZhciBzY3JpcHQsXG5cdFx0XHRpbmRpcmVjdCA9IGV2YWw7XG5cblx0XHRjb2RlID0galF1ZXJ5LnRyaW0oIGNvZGUgKTtcblxuXHRcdGlmICggY29kZSApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIGNvZGUgaW5jbHVkZXMgYSB2YWxpZCwgcHJvbG9ndWUgcG9zaXRpb25cblx0XHRcdC8vIHN0cmljdCBtb2RlIHByYWdtYSwgZXhlY3V0ZSBjb2RlIGJ5IGluamVjdGluZyBhXG5cdFx0XHQvLyBzY3JpcHQgdGFnIGludG8gdGhlIGRvY3VtZW50LlxuXHRcdFx0aWYgKCBjb2RlLmluZGV4T2YoIFwidXNlIHN0cmljdFwiICkgPT09IDEgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblx0XHRcdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBhdm9pZCB0aGUgRE9NIG5vZGUgY3JlYXRpb24sIGluc2VydGlvblxuXHRcdFx0XHQvLyBhbmQgcmVtb3ZhbCBieSB1c2luZyBhbiBpbmRpcmVjdCBnbG9iYWwgZXZhbFxuXG5cdFx0XHRcdGluZGlyZWN0KCBjb2RlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcblx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHQvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5cdGNhbWVsQ2FzZTogZnVuY3Rpb24oIHN0cmluZyApIHtcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcblx0fSxcblxuXHRub2RlTmFtZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcblx0Ly8gYXJndW1lbnRzLlxuXHRwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0XHRjb250ZXh0ID0gZm47XG5cdFx0XHRmbiA9IHRtcDtcblx0XHR9XG5cblx0XHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFNpbXVsYXRlZCBiaW5kXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRcdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0XHR9O1xuXG5cdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0XHRyZXR1cm4gcHJveHk7XG5cdH0sXG5cblx0bm93OiBEYXRlLm5vdyxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG4vLyBKU0hpbnQgd291bGQgZXJyb3Igb24gdGhpcyBjb2RlIGR1ZSB0byB0aGUgU3ltYm9sIG5vdCBiZWluZyBkZWZpbmVkIGluIEVTNS5cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5qc2hpbnRyYyB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGp1c3QgZGlzYWJsZSBKU0hpbnQgZm9yIHRoZXNlXG4vLyB0aHJlZSBsaW5lcy5cbi8qIGpzaGludCBpZ25vcmU6IHN0YXJ0ICovXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG4vKiBqc2hpbnQgaWdub3JlOiBlbmQgKi9cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IGlPUyA4LjIgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cblx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMi4xXG4gKiBodHRwOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE1LTEwLTE3XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBHZW5lcmFsLXB1cnBvc2UgY29uc3RhbnRzXG5cdE1BWF9ORUdBVElWRSA9IDEgPDwgMzEsXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHA6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcXFx4MDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblx0cmVzY2FwZSA9IC8nfFxcXFwvZyxcblxuXHQvLyBDU1MgZXNjYXBlcyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH07XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbmlkc2VsZWN0LCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cblx0XHRcdFx0Ly8gcVNBIGxvb2tzIG91dHNpZGUgRWxlbWVudCBjb250ZXh0LCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50XG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHdvcmthcm91bmQgdGVjaG5pcXVlXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmVzY2FwZSwgXCJcXFxcJCZcIiApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHRuaWRzZWxlY3QgPSByaWRlbnRpZmllci50ZXN0KCBuaWQgKSA/IFwiI1wiICsgbmlkIDogXCJbaWQ9J1wiICsgbmlkICsgXCInXVwiO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gbmlkc2VsZWN0ICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBkaXYgYW5kIGV4cGVjdHMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBkaXYgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGRpdi5wYXJlbnROb2RlICkge1xuXHRcdFx0ZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGRpdiApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGRpdiA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHQoIH5iLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApIC1cblx0XHRcdCggfmEuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICk7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0Ly8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxuXHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cdHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHBhcmVudCxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZVxuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdGlmICggKHBhcmVudCA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBwYXJlbnQudG9wICE9PSBwYXJlbnQgKSB7XG5cdFx0Ly8gU3VwcG9ydDogSUUgMTFcblx0XHRpZiAoIHBhcmVudC5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0cGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHBhcmVudC5hdHRhY2hFdmVudCApIHtcblx0XHRcdHBhcmVudC5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRpdi5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWRpdi5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRpdi5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBkaXYgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbmQgYW5kIGZpbHRlclxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIG0gPyBbIG0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdC8vIFN1cHBvcnQ6IElFNi83XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdGRlbGV0ZSBFeHByLmZpbmRbXCJJRFwiXTtcblxuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBkaXYgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBkaXYucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBkaXYsIFwiZGl2XCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBkaXYsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IWNvbXBpbGVyQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBmYWxzZTtcblx0XHR9LFxuXG5cdFx0XCJkaXNhYmxlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGRpciA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fCAob3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRpZiAoIChvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBkaXIgXSkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGRpciBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdHN1cHBvcnQuZ2V0QnlJZCAmJiBjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0XHRcdEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZGl2MSApIHtcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBkaXYxLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpICkgJiAxO1xufSk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0ZGl2LmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0ZGl2LmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZGl2LmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0cmV0dXJuIGRpdi5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbXFx3LV0rKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLyApO1xuXG5cblxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblxuXHR9XG5cblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblxuXHR9XG5cblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyID09PSBcInN0cmluZ1wiICkge1xuXHRcdGlmICggcmlzU2ltcGxlLnRlc3QoIHF1YWxpZmllciApICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xuXHRcdH1cblxuXHRcdHF1YWxpZmllciA9IGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMgKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdH0gKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdHJldHVybiBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSA/XG5cdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdIDpcblx0XHRqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdFx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0Ly8gTmVlZGVkIGJlY2F1c2UgJCggc2VsZWN0b3IsIGNvbnRleHQgKSBiZWNvbWVzICQoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlKCByZXQgKSA6IHJldCApO1xuXHRcdHJldC5zZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgPyB0aGlzLnNlbGVjdG9yICsgXCIgXCIgKyBzZWxlY3RvciA6IHNlbGVjdG9yO1xuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSopKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEJsYWNrYmVycnkgNC42XG5cdFx0XHRcdFx0Ly8gZ0VCSUQgcmV0dXJucyBub2RlcyBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICgjNjk2Mylcblx0XHRcdFx0XHRpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLmNvbnRleHQgPSBkb2N1bWVudDtcblx0XHRcdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzLmNvbnRleHQgPSB0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3Iuc2VsZWN0b3IgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHRoaXMuc2VsZWN0b3IgPSBzZWxlY3Rvci5zZWxlY3Rvcjtcblx0XHRcdHRoaXMuY29udGV4dCA9IHNlbGVjdG9yLmNvbnRleHQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHRwb3MgPSBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApIHx8IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9ycywgY29udGV4dCB8fCB0aGlzLmNvbnRleHQgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggcG9zID9cblx0XHRcdFx0XHRwb3MuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudCB8fCBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90d2hpdGUgPSAoIC9cXFMrL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgalF1ZXJ5LnR5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBsaXN0ZW5lciBsaXN0LCBmaW5hbCBzdGF0ZVxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgXCJyZWplY3RlZFwiIF0sXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICkgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBmbnNbIGkgXSApICYmIGZuc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gZm9yIGZvcndhcmRpbmcgYWN0aW9ucyB0byBuZXdEZWZlclxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyA9PT0gcHJvbWlzZSA/IG5ld0RlZmVyLnByb21pc2UoKSA6IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0cHJvbWlzZS5waXBlID0gcHJvbWlzZS50aGVuO1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgMyBdO1xuXG5cdFx0XHQvLyBwcm9taXNlWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0Ly8gc3RhdGUgPSBbIHJlc29sdmVkIHwgcmVqZWN0ZWQgXVxuXHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cblx0XHRcdFx0Ly8gWyByZWplY3RfbGlzdCB8IHJlc29sdmVfbGlzdCBdLmRpc2FibGU7IHByb2dyZXNzX2xpc3QubG9ja1xuXHRcdFx0XHR9LCB0dXBsZXNbIGkgXiAxIF1bIDIgXS5kaXNhYmxlLCB0dXBsZXNbIDIgXVsgMiBdLmxvY2sgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gZGVmZXJyZWRbIHJlc29sdmUgfCByZWplY3QgfCBub3RpZnkgXVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gcHJvbWlzZSA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHN1Ym9yZGluYXRlIC8qICwgLi4uLCBzdWJvcmRpbmF0ZU4gKi8gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXHRcdFx0bGVuZ3RoID0gcmVzb2x2ZVZhbHVlcy5sZW5ndGgsXG5cblx0XHRcdC8vIHRoZSBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGxlbmd0aCAhPT0gMSB8fFxuXHRcdFx0XHQoIHN1Ym9yZGluYXRlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBzdWJvcmRpbmF0ZS5wcm9taXNlICkgKSA/IGxlbmd0aCA6IDAsXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWQuXG5cdFx0XHQvLyBJZiByZXNvbHZlVmFsdWVzIGNvbnNpc3Qgb2Ygb25seSBhIHNpbmdsZSBEZWZlcnJlZCwganVzdCB1c2UgdGhhdC5cblx0XHRcdGRlZmVycmVkID0gcmVtYWluaW5nID09PSAxID8gc3Vib3JkaW5hdGUgOiBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gVXBkYXRlIGZ1bmN0aW9uIGZvciBib3RoIHJlc29sdmUgYW5kIHByb2dyZXNzIHZhbHVlc1xuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpLCBjb250ZXh0cywgdmFsdWVzICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdGNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggdmFsdWVzID09PSBwcm9ncmVzc1ZhbHVlcyApIHtcblx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9LFxuXG5cdFx0XHRwcm9ncmVzc1ZhbHVlcywgcHJvZ3Jlc3NDb250ZXh0cywgcmVzb2x2ZUNvbnRleHRzO1xuXG5cdFx0Ly8gQWRkIGxpc3RlbmVycyB0byBEZWZlcnJlZCBzdWJvcmRpbmF0ZXM7IHRyZWF0IG90aGVycyBhcyByZXNvbHZlZFxuXHRcdGlmICggbGVuZ3RoID4gMSApIHtcblx0XHRcdHByb2dyZXNzVmFsdWVzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcblx0XHRcdHByb2dyZXNzQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIHVwZGF0ZUZ1bmMoIGksIHByb2dyZXNzQ29udGV4dHMsIHByb2dyZXNzVmFsdWVzICkgKVxuXHRcdFx0XHRcdFx0LmRvbmUoIHVwZGF0ZUZ1bmMoIGksIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApIClcblx0XHRcdFx0XHRcdC5mYWlsKCBkZWZlcnJlZC5yZWplY3QgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQtLXJlbWFpbmluZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIElmIHdlJ3JlIG5vdCB3YWl0aW5nIG9uIGFueXRoaW5nLCByZXNvbHZlIHRoZSBtYXN0ZXJcblx0XHRpZiAoICFyZW1haW5pbmcgKSB7XG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdDtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdC8vIEFkZCB0aGUgY2FsbGJhY2tcblx0alF1ZXJ5LnJlYWR5LnByb21pc2UoKS5kb25lKCBmbiApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhvbGQgKG9yIHJlbGVhc2UpIHRoZSByZWFkeSBldmVudFxuXHRob2xkUmVhZHk6IGZ1bmN0aW9uKCBob2xkICkge1xuXHRcdGlmICggaG9sZCApIHtcblx0XHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0XHR9IGVsc2Uge1xuXHRcdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblxuXHRcdC8vIFRyaWdnZXIgYW55IGJvdW5kIHJlYWR5IGV2ZW50c1xuXHRcdGlmICggalF1ZXJ5LmZuLnRyaWdnZXJIYW5kbGVyICkge1xuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLnRyaWdnZXJIYW5kbGVyKCBcInJlYWR5XCIgKTtcblx0XHRcdGpRdWVyeSggZG9jdW1lbnQgKS5vZmYoIFwicmVhZHlcIiApO1xuXHRcdH1cblx0fVxufSApO1xuXG4vKipcbiAqIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG4gKi9cbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxualF1ZXJ5LnJlYWR5LnByb21pc2UgPSBmdW5jdGlvbiggb2JqICkge1xuXHRpZiAoICFyZWFkeUxpc3QgKSB7XG5cblx0XHRyZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxuXHRcdC8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG5cdFx0Ly8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG5cdFx0Ly8gU3VwcG9ydDogSUU5LTEwIG9ubHlcblx0XHQvLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cblx0XHRpZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHRcdFx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0XHRcdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdFx0XHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlYWR5TGlzdC5wcm9taXNlKCBvYmogKTtcbn07XG5cbi8vIEtpY2sgb2ZmIHRoZSBET00gcmVhZHkgY2hlY2sgZXZlbiBpZiB0aGUgdXNlciBkb2VzIG5vdFxualF1ZXJ5LnJlYWR5LnByb21pc2UoKTtcblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCBqUXVlcnkudHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNoYWluYWJsZSA/XG5cdFx0ZWxlbXMgOlxuXG5cdFx0Ly8gR2V0c1xuXHRcdGJ1bGsgP1xuXHRcdFx0Zm4uY2FsbCggZWxlbXMgKSA6XG5cdFx0XHRsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0LyoganNoaW50IC1XMDE4ICovXG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRyZWdpc3RlcjogZnVuY3Rpb24oIG93bmVyLCBpbml0aWFsICkge1xuXHRcdHZhciB2YWx1ZSA9IGluaXRpYWwgfHwge307XG5cblx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUsIG5vbi13cml0YWJsZSBwcm9wZXJ0eVxuXHRcdC8vIGNvbmZpZ3VyYWJpbGl0eSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0Ly8gZGVsZXRlZCB3aXRoIHRoZSBkZWxldGUgb3BlcmF0b3Jcblx0XHR9IGVsc2Uge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0fSApO1xuXHRcdH1cblx0XHRyZXR1cm4gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHR9LFxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRpZiAoICFhY2NlcHREYXRhKCBvd25lciApICkge1xuXHRcdFx0cmV0dXJuIHt9O1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGRhdGEgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgcHJvcCBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsga2V5IF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBzdG9yZWQ7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHN0b3JlZCA9IHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cblx0XHRcdHJldHVybiBzdG9yZWQgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHN0b3JlZCA6IHRoaXMuZ2V0KCBvd25lciwgalF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGNhbWVsLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHRoaXMucmVnaXN0ZXIoIG93bmVyICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgXCJuYW1lXCIgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXaGVuIGRhdGEgaXMgaW5pdGlhbGx5IGNyZWF0ZWQsIHZpYSAoXCJrZXlcIiwgXCJ2YWxcIikgc2lnbmF0dXJlLFxuXHRcdFx0XHQvLyBrZXlzIHdpbGwgYmUgY29udmVydGVkIHRvIGNhbWVsQ2FzZS5cblx0XHRcdFx0Ly8gU2luY2UgdGhlcmUgaXMgbm8gd2F5IHRvIHRlbGwgX2hvd18gYSBrZXkgd2FzIGFkZGVkLCByZW1vdmVcblx0XHRcdFx0Ly8gYm90aCBwbGFpbiBrZXkgYW5kIGNhbWVsQ2FzZSBrZXkuICMxMjc4NlxuXHRcdFx0XHQvLyBUaGlzIHdpbGwgb25seSBwZW5hbGl6ZSB0aGUgYXJyYXkgYXJndW1lbnQgcGF0aC5cblx0XHRcdFx0bmFtZSA9IGtleS5jb25jYXQoIGtleS5tYXAoIGpRdWVyeS5jYW1lbENhc2UgKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2FtZWwgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBUcnkgdGhlIHN0cmluZyBhcyBhIGtleSBiZWZvcmUgYW55IG1hbmlwdWxhdGlvblxuXHRcdFx0XHRpZiAoIGtleSBpbiBjYWNoZSApIHtcblx0XHRcdFx0XHRuYW1lID0gWyBrZXksIGNhbWVsIF07XG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRuYW1lID0gY2FtZWw7XG5cdFx0XHRcdFx0bmFtZSA9IG5hbWUgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFx0WyBuYW1lIF0gOiAoIG5hbWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aSA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBuYW1lWyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0gMzUtNDUrXG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwN1xuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGRhdGEgPT09IFwidHJ1ZVwiID8gdHJ1ZSA6XG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJmYWxzZVwiID8gZmFsc2UgOlxuXHRcdFx0XHRcdGRhdGEgPT09IFwibnVsbFwiID8gbnVsbCA6XG5cblx0XHRcdFx0XHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRcdFx0XHRcdCtkYXRhICsgXCJcIiA9PT0gZGF0YSA/ICtkYXRhIDpcblx0XHRcdFx0XHRyYnJhY2UudGVzdCggZGF0YSApID8galF1ZXJ5LnBhcnNlSlNPTiggZGF0YSApIDpcblx0XHRcdFx0XHRkYXRhO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTErXG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YSwgY2FtZWxLZXk7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIHdpdGggdGhlIGtleSBhcy1pc1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKSB8fFxuXG5cdFx0XHRcdFx0Ly8gVHJ5IHRvIGZpbmQgZGFzaGVkIGtleSBpZiBpdCBleGlzdHMgKGdoLTI3NzkpXG5cdFx0XHRcdFx0Ly8gVGhpcyBpcyBmb3IgMi4yLnggb25seVxuXHRcdFx0XHRcdGRhdGFVc2VyLmdldCggZWxlbSwga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpICk7XG5cblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYW1lbEtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gd2l0aCB0aGUga2V5IGNhbWVsaXplZFxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBjYW1lbEtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBjYW1lbEtleSwgdW5kZWZpbmVkICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0Y2FtZWxLZXkgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gRmlyc3QsIGF0dGVtcHQgdG8gc3RvcmUgYSBjb3B5IG9yIHJlZmVyZW5jZSBvZiBhbnlcblx0XHRcdFx0Ly8gZGF0YSB0aGF0IG1pZ2h0J3ZlIGJlZW4gc3RvcmUgd2l0aCBhIGNhbWVsQ2FzZWQga2V5LlxuXHRcdFx0XHR2YXIgZGF0YSA9IGRhdGFVc2VyLmdldCggdGhpcywgY2FtZWxLZXkgKTtcblxuXHRcdFx0XHQvLyBGb3IgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZSBpbnRlcm9wLCB3ZSBoYXZlIHRvXG5cdFx0XHRcdC8vIHN0b3JlIHByb3BlcnR5IG5hbWVzIHdpdGggZGFzaGVzIGluIGEgY2FtZWxDYXNlIGZvcm0uXG5cdFx0XHRcdC8vIFRoaXMgbWlnaHQgbm90IGFwcGx5IHRvIGFsbCBwcm9wZXJ0aWVzLi4uKlxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGNhbWVsS2V5LCB2YWx1ZSApO1xuXG5cdFx0XHRcdC8vICouLi4gSW4gdGhlIGNhc2Ugb2YgcHJvcGVydGllcyB0aGF0IG1pZ2h0IF9hY3R1YWxseV9cblx0XHRcdFx0Ly8gaGF2ZSBkYXNoZXMsIHdlIG5lZWQgdG8gYWxzbyBzdG9yZSBhIGNvcHkgb2YgdGhhdFxuXHRcdFx0XHQvLyB1bmNoYW5nZWQgcHJvcGVydHkuXG5cdFx0XHRcdGlmICgga2V5LmluZGV4T2YoIFwiLVwiICkgPiAtMSAmJiBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBqUXVlcnkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgaXNIaWRkZW4gPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbiBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0IWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsXG5cdFx0c2NhbGUgPSAxLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHR3ZWVuLmN1cigpOyB9IDpcblx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApOyB9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHRkbyB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxuXHRcdFx0Ly8gVXNlIHN0cmluZyBmb3IgZG91Ymxpbmcgc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcblx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xuXG5cdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKClcblx0XHQvLyBCcmVhayB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoLlxuXHRcdH0gd2hpbGUgKFxuXHRcdFx0c2NhbGUgIT09ICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgKSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnNcblx0XHQpO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbXFx3Oi1dKykvICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFN1cHBvcnQ6IElFOVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFOVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQgPSB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiA/XG5cdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKSA6XG5cdFx0XHR0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiID9cblx0XHRcdFx0Y29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKSA6XG5cdFx0XHRbXTtcblxuXHRyZXR1cm4gdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIGpRdWVyeS5ub2RlTmFtZSggY29udGV4dCwgdGFnICkgP1xuXHRcdGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApIDpcblx0XHRyZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIGpRdWVyeS50eXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjEsIFBoYW50b21KUzwyXG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMSwgUGhhbnRvbUpTPDJcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGNvbnRhaW5zICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAtNC4zLCBTYWZhcmk8PTUuMVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogU2FmYXJpPD01LjEsIEFuZHJvaWQ8NC4yXG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUU8PTExK1xuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xufSApKCk7XG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFOVxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICk7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblx0XHRcdGhhbmRsZXJzID0gKCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIG1hdGNoZXMsIHNlbCwgaGFuZGxlT2JqLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIFN1cHBvcnQgKGF0IGxlYXN0KTogQ2hyb21lLCBJRTlcblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKCMxMzE4MClcblx0XHQvL1xuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8PTQyK1xuXHRcdC8vIEF2b2lkIG5vbi1sZWZ0LWNsaWNrIGluIEZGIGJ1dCBkb24ndCBibG9jayBJRSByYWRpbyBldmVudHMgKCMzODYxLCBnaC0yMzQzKVxuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJiBjdXIubm9kZVR5cGUgJiZcblx0XHRcdCggZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiIHx8IGlzTmFOKCBldmVudC5idXR0b24gKSB8fCBldmVudC5idXR0b24gPCAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgKCBjdXIuZGlzYWJsZWQgIT09IHRydWUgfHwgZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlcyA9IFtdO1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZXNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZXMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlcy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogdGhpcywgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0Ly8gSW5jbHVkZXMgc29tZSBldmVudCBwcm9wcyBzaGFyZWQgYnkgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnRcblx0cHJvcHM6ICggXCJhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBkZXRhaWwgZXZlbnRQaGFzZSBcIiArXG5cdFx0XCJtZXRhS2V5IHJlbGF0ZWRUYXJnZXQgc2hpZnRLZXkgdGFyZ2V0IHRpbWVTdGFtcCB2aWV3IHdoaWNoXCIgKS5zcGxpdCggXCIgXCIgKSxcblxuXHRmaXhIb29rczoge30sXG5cblx0a2V5SG9va3M6IHtcblx0XHRwcm9wczogXCJjaGFyIGNoYXJDb2RlIGtleSBrZXlDb2RlXCIuc3BsaXQoIFwiIFwiICksXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCApIHtcblx0XHRcdFx0ZXZlbnQud2hpY2ggPSBvcmlnaW5hbC5jaGFyQ29kZSAhPSBudWxsID8gb3JpZ2luYWwuY2hhckNvZGUgOiBvcmlnaW5hbC5rZXlDb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0fVxuXHR9LFxuXG5cdG1vdXNlSG9va3M6IHtcblx0XHRwcm9wczogKCBcImJ1dHRvbiBidXR0b25zIGNsaWVudFggY2xpZW50WSBvZmZzZXRYIG9mZnNldFkgcGFnZVggcGFnZVkgXCIgK1xuXHRcdFx0XCJzY3JlZW5YIHNjcmVlblkgdG9FbGVtZW50XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XG5cdFx0XHR2YXIgZXZlbnREb2MsIGRvYywgYm9keSxcblx0XHRcdFx0YnV0dG9uID0gb3JpZ2luYWwuYnV0dG9uO1xuXG5cdFx0XHQvLyBDYWxjdWxhdGUgcGFnZVgvWSBpZiBtaXNzaW5nIGFuZCBjbGllbnRYL1kgYXZhaWxhYmxlXG5cdFx0XHRpZiAoIGV2ZW50LnBhZ2VYID09IG51bGwgJiYgb3JpZ2luYWwuY2xpZW50WCAhPSBudWxsICkge1xuXHRcdFx0XHRldmVudERvYyA9IGV2ZW50LnRhcmdldC5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xuXHRcdFx0XHRkb2MgPSBldmVudERvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHRcdGJvZHkgPSBldmVudERvYy5ib2R5O1xuXG5cdFx0XHRcdGV2ZW50LnBhZ2VYID0gb3JpZ2luYWwuY2xpZW50WCArXG5cdFx0XHRcdFx0KCBkb2MgJiYgZG9jLnNjcm9sbExlZnQgfHwgYm9keSAmJiBib2R5LnNjcm9sbExlZnQgfHwgMCApIC1cblx0XHRcdFx0XHQoIGRvYyAmJiBkb2MuY2xpZW50TGVmdCB8fCBib2R5ICYmIGJvZHkuY2xpZW50TGVmdCB8fCAwICk7XG5cdFx0XHRcdGV2ZW50LnBhZ2VZID0gb3JpZ2luYWwuY2xpZW50WSArXG5cdFx0XHRcdFx0KCBkb2MgJiYgZG9jLnNjcm9sbFRvcCAgfHwgYm9keSAmJiBib2R5LnNjcm9sbFRvcCAgfHwgMCApIC1cblx0XHRcdFx0XHQoIGRvYyAmJiBkb2MuY2xpZW50VG9wICB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wICB8fCAwICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRcdC8vIE5vdGU6IGJ1dHRvbiBpcyBub3Qgbm9ybWFsaXplZCwgc28gZG9uJ3QgdXNlIGl0XG5cdFx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0ZXZlbnQud2hpY2ggPSAoIGJ1dHRvbiAmIDEgPyAxIDogKCBidXR0b24gJiAyID8gMyA6ICggYnV0dG9uICYgNCA/IDIgOiAwICkgKSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0fVxuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdGlmICggZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gQ3JlYXRlIGEgd3JpdGFibGUgY29weSBvZiB0aGUgZXZlbnQgb2JqZWN0IGFuZCBub3JtYWxpemUgc29tZSBwcm9wZXJ0aWVzXG5cdFx0dmFyIGksIHByb3AsIGNvcHksXG5cdFx0XHR0eXBlID0gZXZlbnQudHlwZSxcblx0XHRcdG9yaWdpbmFsRXZlbnQgPSBldmVudCxcblx0XHRcdGZpeEhvb2sgPSB0aGlzLmZpeEhvb2tzWyB0eXBlIF07XG5cblx0XHRpZiAoICFmaXhIb29rICkge1xuXHRcdFx0dGhpcy5maXhIb29rc1sgdHlwZSBdID0gZml4SG9vayA9XG5cdFx0XHRcdHJtb3VzZUV2ZW50LnRlc3QoIHR5cGUgKSA/IHRoaXMubW91c2VIb29rcyA6XG5cdFx0XHRcdHJrZXlFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLmtleUhvb2tzIDpcblx0XHRcdFx0e307XG5cdFx0fVxuXHRcdGNvcHkgPSBmaXhIb29rLnByb3BzID8gdGhpcy5wcm9wcy5jb25jYXQoIGZpeEhvb2sucHJvcHMgKSA6IHRoaXMucHJvcHM7XG5cblx0XHRldmVudCA9IG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblxuXHRcdGkgPSBjb3B5Lmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHByb3AgPSBjb3B5WyBpIF07XG5cdFx0XHRldmVudFsgcHJvcCBdID0gb3JpZ2luYWxFdmVudFsgcHJvcCBdO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IENvcmRvdmEgMi41IChXZWJLaXQpICgjMTMyNTUpXG5cdFx0Ly8gQWxsIGV2ZW50cyBzaG91bGQgaGF2ZSBhIHRhcmdldDsgQ29yZG92YSBkZXZpY2VyZWFkeSBkb2Vzbid0XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCssIENocm9tZTwyOFxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0aWYgKCBldmVudC50YXJnZXQubm9kZVR5cGUgPT09IDMgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBldmVudC50YXJnZXQucGFyZW50Tm9kZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZml4SG9vay5maWx0ZXIgPyBmaXhIb29rLmZpbHRlciggZXZlbnQsIG9yaWdpbmFsRXZlbnQgKSA6IGV2ZW50O1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRmb2N1czoge1xuXG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxuXHRcdH0sXG5cdFx0Ymx1cjoge1xuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcXHc6LV0rKVtePl0qKVxcLz4vZ2ksXG5cblx0Ly8gU3VwcG9ydDogSUUgMTAtMTEsIEVkZ2UgMTAyNDArXG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXFwvKC4qKS8sXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gTWFuaXB1bGF0aW5nIHRhYmxlcyByZXF1aXJlcyBhIHRib2R5XG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0alF1ZXJ5Lm5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApID9cblxuXHRcdGVsZW0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwidGJvZHlcIiApWyAwIF0gfHxcblx0XHRcdGVsZW0uYXBwZW5kQ2hpbGQoIGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRib2R5XCIgKSApIDpcblx0XHRlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHR2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKCBlbGVtLnR5cGUgKTtcblxuXHRpZiAoIG1hdGNoICkge1xuXHRcdGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggaXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMSwgUGhhbnRvbUpTPDJcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBub2RlLm93bmVyRG9jdW1lbnQsIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cDovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9IDM1LTQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PSAzNS00NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIEtlZXAgZG9tTWFuaXAgZXhwb3NlZCB1bnRpbCAzLjAgKGdoLTIyMjUpXG5cdGRvbU1hbmlwOiBkb21NYW5pcCxcblxuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBRdFdlYktpdFxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93c1xuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG5cblxudmFyIGlmcmFtZSxcblx0ZWxlbWRpc3BsYXkgPSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94XG5cdFx0Ly8gV2UgaGF2ZSB0byBwcmUtZGVmaW5lIHRoZXNlIHZhbHVlcyBmb3IgRkYgKCMxMDIyNylcblx0XHRIVE1MOiBcImJsb2NrXCIsXG5cdFx0Qk9EWTogXCJibG9ja1wiXG5cdH07XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGFjdHVhbCBkaXNwbGF5IG9mIGEgZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgbm9kZU5hbWUgb2YgdGhlIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBkb2MgRG9jdW1lbnQgb2JqZWN0XG4gKi9cblxuLy8gQ2FsbGVkIG9ubHkgZnJvbSB3aXRoaW4gZGVmYXVsdERpc3BsYXlcbmZ1bmN0aW9uIGFjdHVhbERpc3BsYXkoIG5hbWUsIGRvYyApIHtcblx0dmFyIGVsZW0gPSBqUXVlcnkoIGRvYy5jcmVhdGVFbGVtZW50KCBuYW1lICkgKS5hcHBlbmRUbyggZG9jLmJvZHkgKSxcblxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtWyAwIF0sIFwiZGlzcGxheVwiICk7XG5cblx0Ly8gV2UgZG9uJ3QgaGF2ZSBhbnkgZGF0YSBzdG9yZWQgb24gdGhlIGVsZW1lbnQsXG5cdC8vIHNvIHVzZSBcImRldGFjaFwiIG1ldGhvZCBhcyBmYXN0IHdheSB0byBnZXQgcmlkIG9mIHRoZSBlbGVtZW50XG5cdGVsZW0uZGV0YWNoKCk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbi8qKlxuICogVHJ5IHRvIGRldGVybWluZSB0aGUgZGVmYXVsdCBkaXNwbGF5IHZhbHVlIG9mIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBub2RlTmFtZVxuICovXG5mdW5jdGlvbiBkZWZhdWx0RGlzcGxheSggbm9kZU5hbWUgKSB7XG5cdHZhciBkb2MgPSBkb2N1bWVudCxcblx0XHRkaXNwbGF5ID0gZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF07XG5cblx0aWYgKCAhZGlzcGxheSApIHtcblx0XHRkaXNwbGF5ID0gYWN0dWFsRGlzcGxheSggbm9kZU5hbWUsIGRvYyApO1xuXG5cdFx0Ly8gSWYgdGhlIHNpbXBsZSB3YXkgZmFpbHMsIHJlYWQgZnJvbSBpbnNpZGUgYW4gaWZyYW1lXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiB8fCAhZGlzcGxheSApIHtcblxuXHRcdFx0Ly8gVXNlIHRoZSBhbHJlYWR5LWNyZWF0ZWQgaWZyYW1lIGlmIHBvc3NpYmxlXG5cdFx0XHRpZnJhbWUgPSAoIGlmcmFtZSB8fCBqUXVlcnkoIFwiPGlmcmFtZSBmcmFtZWJvcmRlcj0nMCcgd2lkdGg9JzAnIGhlaWdodD0nMCcvPlwiICkgKVxuXHRcdFx0XHQuYXBwZW5kVG8oIGRvYy5kb2N1bWVudEVsZW1lbnQgKTtcblxuXHRcdFx0Ly8gQWx3YXlzIHdyaXRlIGEgbmV3IEhUTUwgc2tlbGV0b24gc28gV2Via2l0IGFuZCBGaXJlZm94IGRvbid0IGNob2tlIG9uIHJldXNlXG5cdFx0XHRkb2MgPSBpZnJhbWVbIDAgXS5jb250ZW50RG9jdW1lbnQ7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFXG5cdFx0XHRkb2Mud3JpdGUoKTtcblx0XHRcdGRvYy5jbG9zZSgpO1xuXG5cdFx0XHRkaXNwbGF5ID0gYWN0dWFsRGlzcGxheSggbm9kZU5hbWUsIGRvYyApO1xuXHRcdFx0aWZyYW1lLmRldGFjaCgpO1xuXHRcdH1cblxuXHRcdC8vIFN0b3JlIHRoZSBjb3JyZWN0IGRlZmF1bHQgZGlzcGxheVxuXHRcdGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdID0gZGlzcGxheTtcblx0fVxuXG5cdHJldHVybiBkaXNwbGF5O1xufVxudmFyIHJtYXJnaW4gPSAoIC9ebWFyZ2luLyApO1xuXG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFPD0xMSssIEZpcmVmb3g8PTMwKyAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHBpeGVsTWFyZ2luUmlnaHRWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MDt3aWR0aDo4cHg7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O1wiICtcblx0XHRcInBhZGRpbmc6MDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRjb250YWluZXIuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXG5cdFx0XHQvLyBWZW5kb3ItcHJlZml4IGJveC1zaXppbmdcblx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O1wiICtcblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ0b3A6MSU7d2lkdGg6NTAlXCI7XG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gZGl2U3R5bGUubWFyZ2luTGVmdCA9PT0gXCIycHhcIjtcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IGRpdlN0eWxlLndpZHRoID09PSBcIjRweFwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IFwiNTAlXCI7XG5cdFx0cGl4ZWxNYXJnaW5SaWdodFZhbCA9IGRpdlN0eWxlLm1hcmdpblJpZ2h0ID09PSBcIjRweFwiO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblx0fVxuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gVGhpcyB0ZXN0IGlzIGV4ZWN1dGVkIG9ubHkgb25jZSBidXQgd2Ugc3RpbGwgZG8gbWVtb2l6aW5nXG5cdFx0XHQvLyBzaW5jZSB3ZSBjYW4gdXNlIHRoZSBib3hTaXppbmdSZWxpYWJsZSBwcmUtY29tcHV0aW5nLlxuXHRcdFx0Ly8gTm8gbmVlZCB0byBjaGVjayBpZiB0aGUgdGVzdCB3YXMgYWxyZWFkeSBwZXJmb3JtZWQsIHRob3VnaC5cblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggYm94U2l6aW5nUmVsaWFibGVWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMC00LjNcblx0XHRcdC8vIFdlJ3JlIGNoZWNraW5nIGZvciBib3hTaXppbmdSZWxpYWJsZVZhbCBoZXJlIGluc3RlYWQgb2YgcGl4ZWxNYXJnaW5SaWdodFZhbFxuXHRcdFx0Ly8gc2luY2UgdGhhdCBjb21wcmVzc2VzIGJldHRlciBhbmQgdGhleSdyZSBjb21wdXRlZCB0b2dldGhlciBhbnl3YXkuXG5cdFx0XHRpZiAoIGJveFNpemluZ1JlbGlhYmxlVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcGl4ZWxNYXJnaW5SaWdodFZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCBvbmx5LCBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDM3XG5cdFx0XHRpZiAoIGJveFNpemluZ1JlbGlhYmxlVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0XHQvLyBDaGVjayBpZiBkaXYgd2l0aCBleHBsaWNpdCB3aWR0aCBhbmQgbm8gbWFyZ2luLXJpZ2h0IGluY29ycmVjdGx5XG5cdFx0XHQvLyBnZXRzIGNvbXB1dGVkIG1hcmdpbi1yaWdodCBiYXNlZCBvbiB3aWR0aCBvZiBjb250YWluZXIuICgjMzMzMylcblx0XHRcdC8vIFdlYktpdCBCdWcgMTMzNDMgLSBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgd3JvbmcgdmFsdWUgZm9yIG1hcmdpbi1yaWdodFxuXHRcdFx0Ly8gVGhpcyBzdXBwb3J0IGZ1bmN0aW9uIGlzIG9ubHkgZXhlY3V0ZWQgb25jZSBzbyBubyBtZW1vaXppbmcgaXMgbmVlZGVkLlxuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0bWFyZ2luRGl2ID0gZGl2LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0Ly8gUmVzZXQgQ1NTOiBib3gtc2l6aW5nOyBkaXNwbGF5OyBtYXJnaW47IGJvcmRlcjsgcGFkZGluZ1xuXHRcdFx0bWFyZ2luRGl2LnN0eWxlLmNzc1RleHQgPSBkaXYuc3R5bGUuY3NzVGV4dCA9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcblx0XHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXG5cdFx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O2JveC1zaXppbmc6Y29udGVudC1ib3g7XCIgK1xuXHRcdFx0XHRcImRpc3BsYXk6YmxvY2s7bWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzowXCI7XG5cdFx0XHRtYXJnaW5EaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBtYXJnaW5EaXYuc3R5bGUud2lkdGggPSBcIjBcIjtcblx0XHRcdGRpdi5zdHlsZS53aWR0aCA9IFwiMXB4XCI7XG5cdFx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0XHRyZXQgPSAhcGFyc2VGbG9hdCggd2luZG93LmdldENvbXB1dGVkU3R5bGUoIG1hcmdpbkRpdiApLm1hcmdpblJpZ2h0ICk7XG5cblx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cdFx0XHRkaXYucmVtb3ZlQ2hpbGQoIG1hcmdpbkRpdiApO1xuXG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblx0cmV0ID0gY29tcHV0ZWQgPyBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXSA6IHVuZGVmaW5lZDtcblxuXHQvLyBTdXBwb3J0OiBPcGVyYSAxMi4xeCBvbmx5XG5cdC8vIEZhbGwgYmFjayB0byBzdHlsZSBldmVuIHdpdGhvdXQgY29tcHV0ZWRcblx0Ly8gY29tcHV0ZWQgaXMgdW5kZWZpbmVkIGZvciBlbGVtcyBvbiBkb2N1bWVudCBmcmFnbWVudHNcblx0aWYgKCAoIHJldCA9PT0gXCJcIiB8fCByZXQgPT09IHVuZGVmaW5lZCApICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUU5XG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgb25seSBuZWVkZWQgZm9yIC5jc3MoJ2ZpbHRlcicpICgjMTI1MzcpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cDovL2Rldi53My5vcmcvY3Nzd2cvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxNYXJnaW5SaWdodCgpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fSxcblxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJPXCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlO1xuXG4vLyBSZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XG5cdHZhciBpID0gZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSA/XG5cblx0XHQvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cblx0XHQ0IDpcblxuXHRcdC8vIE90aGVyd2lzZSBpbml0aWFsaXplIGZvciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnRpZXNcblx0XHRuYW1lID09PSBcIndpZHRoXCIgPyAxIDogMCxcblxuXHRcdHZhbCA9IDA7XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XG5cdFx0XHRpZiAoIGV4dHJhID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmdcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggb2Zmc2V0IHByb3BlcnR5LCB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHRoZSBib3JkZXItYm94IHZhbHVlXG5cdHZhciB2YWx1ZUlzQm9yZGVyQm94ID0gdHJ1ZSxcblx0XHR2YWwgPSBuYW1lID09PSBcIndpZHRoXCIgPyBlbGVtLm9mZnNldFdpZHRoIDogZWxlbS5vZmZzZXRIZWlnaHQsXG5cdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdC8vIFNvbWUgbm9uLWh0bWwgZWxlbWVudHMgcmV0dXJuIHVuZGVmaW5lZCBmb3Igb2Zmc2V0V2lkdGgsIHNvIGNoZWNrIGZvciBudWxsL3VuZGVmaW5lZFxuXHQvLyBzdmcgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02NDkyODVcblx0Ly8gTWF0aE1MIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDkxNjY4XG5cdGlmICggdmFsIDw9IDAgfHwgdmFsID09IG51bGwgKSB7XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gY29tcHV0ZWQgdGhlbiB1bmNvbXB1dGVkIGNzcyBpZiBuZWNlc3Nhcnlcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdGlmICggdmFsIDwgMCB8fCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdHZhbCA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBDb21wdXRlZCB1bml0IGlzIG5vdCBwaXhlbHMuIFN0b3AgaGVyZSBhbmQgcmV0dXJuLlxuXHRcdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHRcdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3ggJiZcblx0XHRcdCggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgbmFtZSBdICk7XG5cblx0XHQvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXG5cdFx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblx0fVxuXG5cdC8vIFVzZSB0aGUgYWN0aXZlIGJveC1zaXppbmcgbW9kZWwgdG8gYWRkL3N1YnRyYWN0IGlycmVsZXZhbnQgc3R5bGVzXG5cdHJldHVybiAoIHZhbCArXG5cdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0bmFtZSxcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXNcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sIGhpZGRlbixcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwib2xkZGlzcGxheVwiICk7XG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFJlc2V0IHRoZSBpbmxpbmUgZGlzcGxheSBvZiB0aGlzIGVsZW1lbnQgdG8gbGVhcm4gaWYgaXQgaXNcblx0XHRcdC8vIGJlaW5nIGhpZGRlbiBieSBjYXNjYWRlZCBydWxlcyBvciBub3Rcblx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSAmJiBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGVsZW1lbnRzIHdoaWNoIGhhdmUgYmVlbiBvdmVycmlkZGVuIHdpdGggZGlzcGxheTogbm9uZVxuXHRcdFx0Ly8gaW4gYSBzdHlsZXNoZWV0IHRvIHdoYXRldmVyIHRoZSBkZWZhdWx0IGJyb3dzZXIgc3R5bGUgaXNcblx0XHRcdC8vIGZvciBzdWNoIGFuIGVsZW1lbnRcblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmFjY2Vzcyhcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFwib2xkZGlzcGxheVwiLFxuXHRcdFx0XHRcdGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aGlkZGVuID0gaXNIaWRkZW4oIGVsZW0gKTtcblxuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiB8fCAhaGlkZGVuICkge1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcIm9sZGRpc3BsYXlcIixcblx0XHRcdFx0XHRoaWRkZW4gPyBkaXNwbGF5IDogalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiBtb3N0IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wXG5cdC8vIHRvIGF2b2lkIHRoZSBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHRpZiAoICFzaG93IHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gc2hvdyA/IHZhbHVlc1sgaW5kZXggXSB8fCBcIlwiIDogXCJub25lXCI7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge1xuXHRcdFwiZmxvYXRcIjogXCJjc3NGbG9hdFwiXG5cdH0sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fFxuXHRcdFx0KCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggb3JpZ05hbWUgKSB8fCBvcmlnTmFtZSApO1xuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8XG5cdFx0XHQoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBvcmlnTmFtZSApIHx8IG9yaWdOYW1lICk7XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblx0XHRcdFx0XHRlbGVtLm9mZnNldFdpZHRoID09PSAwID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZXh0cmEgJiYgZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgJiYgYXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdCk7XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luUmlnaHQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5SaWdodCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gc3dhcCggZWxlbSwgeyBcImRpc3BsYXlcIjogXCJpbmxpbmUtYmxvY2tcIiB9LFxuXHRcdFx0XHRjdXJDU1MsIFsgZWxlbSwgXCJtYXJnaW5SaWdodFwiIF0gKTtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbiggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHxcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFOVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgQ29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIHRpbWVySWQsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IGpRdWVyeS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0IDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIHR3ZWVuLCBob29rcywgb2xkZmlyZSwgZGlzcGxheSwgY2hlY2tEaXNwbGF5LFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbiggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gSGFuZGxlIHF1ZXVlOiBmYWxzZSBwcm9taXNlc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBIZWlnaHQvd2lkdGggb3ZlcmZsb3cgcGFzc1xuXHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcImhlaWdodFwiIGluIHByb3BzIHx8IFwid2lkdGhcIiBpbiBwcm9wcyApICkge1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbm90aGluZyBzbmVha3Mgb3V0XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRTktMTAgZG8gbm90XG5cdFx0Ly8gY2hhbmdlIHRoZSBvdmVyZmxvdyBhdHRyaWJ1dGUgd2hlbiBvdmVyZmxvd1ggYW5kXG5cdFx0Ly8gb3ZlcmZsb3dZIGFyZSBzZXQgdG8gdGhlIHNhbWUgdmFsdWVcblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIFNldCBkaXNwbGF5IHByb3BlcnR5IHRvIGlubGluZS1ibG9jayBmb3IgaGVpZ2h0L3dpZHRoXG5cdFx0Ly8gYW5pbWF0aW9ucyBvbiBpbmxpbmUgZWxlbWVudHMgdGhhdCBhcmUgaGF2aW5nIHdpZHRoL2hlaWdodCBhbmltYXRlZFxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXG5cdFx0Ly8gVGVzdCBkZWZhdWx0IGRpc3BsYXkgaWYgZGlzcGxheSBpcyBjdXJyZW50bHkgXCJub25lXCJcblx0XHRjaGVja0Rpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/XG5cdFx0XHRkYXRhUHJpdi5nZXQoIGVsZW0sIFwib2xkZGlzcGxheVwiICkgfHwgZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKSA6IGRpc3BsYXk7XG5cblx0XHRpZiAoIGNoZWNrRGlzcGxheSA9PT0gXCJpbmxpbmVcIiAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIHNob3cvaGlkZSBwYXNzXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMuZXhlYyggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgZGF0YVNob3cgbGVmdCBvdmVyIGZyb20gYSBzdG9wcGVkIGhpZGUgb3Igc2hvd1xuXHRcdFx0XHQvLyBhbmQgd2UgYXJlIGdvaW5nIHRvIHByb2NlZWQgd2l0aCBzaG93LCB3ZSBzaG91bGQgcHJldGVuZCB0byBiZSBoaWRkZW5cblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cblx0XHQvLyBBbnkgbm9uLWZ4IHZhbHVlIHN0b3BzIHVzIGZyb20gcmVzdG9yaW5nIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlXG5cdFx0fSBlbHNlIHtcblx0XHRcdGRpc3BsYXkgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7fSApO1xuXHRcdH1cblxuXHRcdC8vIFN0b3JlIHN0YXRlIGlmIGl0cyB0b2dnbGUgLSBlbmFibGVzIC5zdG9wKCkudG9nZ2xlKCkgdG8gXCJyZXZlcnNlXCJcblx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0fVxuXHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0alF1ZXJ5KCBlbGVtICkuc2hvdygpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5oaWRlKCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcHJvcDtcblxuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdHR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cblx0XHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gdHdlZW4uc3RhcnQ7XG5cdFx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRcdHR3ZWVuLmVuZCA9IHR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRcdHR3ZWVuLnN0YXJ0ID0gcHJvcCA9PT0gXCJ3aWR0aFwiIHx8IHByb3AgPT09IFwiaGVpZ2h0XCIgPyAxIDogMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHQvLyBJZiB0aGlzIGlzIGEgbm9vcCBsaWtlIC5oaWRlKCkuaGlkZSgpLCByZXN0b3JlIGFuIG92ZXJ3cml0dGVuIGRpc3BsYXkgdmFsdWVcblx0fSBlbHNlIGlmICggKCBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5ICkgPT09IFwiaW5saW5lXCIgKSB7XG5cdFx0c3R5bGUuZGlzcGxheSA9IGRpc3BsYXk7XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdGpRdWVyeS5wcm94eSggcmVzdWx0LnN0b3AsIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdC8vIGF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdHJldHVybiBhbmltYXRpb24ucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3R3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZngub2ZmID8gMCA6IHR5cGVvZiBvcHQuZHVyYXRpb24gPT09IFwibnVtYmVyXCIgP1xuXHRcdG9wdC5kdXJhdGlvbiA6IG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzID9cblx0XHRcdGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdIDogalF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbiApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIENoZWNrcyB0aGUgdGltZXIgaGFzIG5vdCBhbHJlYWR5IGJlZW4gcmVtb3ZlZFxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGlmICggdGltZXIoKSApIHtcblx0XHRqUXVlcnkuZnguc3RhcnQoKTtcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkudGltZXJzLnBvcCgpO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoICF0aW1lcklkICkge1xuXHRcdHRpbWVySWQgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoIGpRdWVyeS5meC50aWNrLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0fVxufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0d2luZG93LmNsZWFySW50ZXJ2YWwoIHRpbWVySWQgKTtcblxuXHR0aW1lcklkID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogaU9TPD01LjEsIEFuZHJvaWQ8PTQuMitcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPD0yLjNcblx0Ly8gT3B0aW9ucyBpbnNpZGUgZGlzYWJsZWQgc2VsZWN0cyBhcmUgaW5jb3JyZWN0bHkgbWFya2VkIGFzIGRpc2FibGVkXG5cdHNlbGVjdC5kaXNhYmxlZCA9IHRydWU7XG5cdHN1cHBvcnQub3B0RGlzYWJsZWQgPSAhb3B0LmRpc2FibGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBhdHRyaWJ1dGVzIGFyZSBsb3dlcmNhc2Vcblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0alF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLCBwcm9wTmFtZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRwcm9wTmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblxuXHRcdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgZ2V0IHNwZWNpYWwgdHJlYXRtZW50ICgjMTA4NzApXG5cdFx0XHRcdGlmICggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdFx0XHQvLyBTZXQgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB0byBmYWxzZVxuXHRcdFx0XHRcdGVsZW1bIHByb3BOYW1lIF0gPSBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlO1xuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBuYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0cmV0dXJuIHRhYmluZGV4ID9cblx0XHRcdFx0XHRwYXJzZUludCggdGFiaW5kZXgsIDEwICkgOlxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJiBlbGVtLmhyZWYgP1xuXHRcdFx0XHRcdFx0XHQwIDpcblx0XHRcdFx0XHRcdFx0LTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxudmFyIHJjbGFzcyA9IC9bXFx0XFxyXFxuXFxmXS9nO1xuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCBcIiBcIiArIGN1clZhbHVlICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0galF1ZXJ5LnRyaW0oIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIFwiIFwiICsgY3VyVmFsdWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IGpRdWVyeS50cmltKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgZ2V0Q2xhc3MoIGVsZW0gKSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTFcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2csXG5cdHJzcGFjZXMgPSAvW1xceDIwXFx0XFxyXFxuXFxmXSsvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgaXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiA/XG5cblx0XHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdFx0cmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKSA6XG5cblx0XHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0XHRyZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUxMC0xMStcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdGpRdWVyeS50cmltKCBqUXVlcnkudGV4dCggZWxlbSApICkucmVwbGFjZSggcnNwYWNlcywgXCIgXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiIHx8IGluZGV4IDwgMCxcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGgsXG5cdFx0XHRcdFx0aSA9IGluZGV4IDwgMCA/XG5cdFx0XHRcdFx0XHRtYXggOlxuXHRcdFx0XHRcdFx0b25lID8gaW5kZXggOiAwO1xuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQoIHN1cHBvcnQub3B0RGlzYWJsZWQgP1xuXHRcdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgOiBvcHRpb24uZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PT0gbnVsbCApICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IWpRdWVyeS5ub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLztcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgbG9hZCByZXNpemUgc2Nyb2xsIHVubG9hZCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3IgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxuXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUsIFNhZmFyaVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuLy8gV29ya2Fyb3VuZCBmYWlsdXJlIHRvIHN0cmluZy1jYXN0IG51bGwgaW5wdXRcbmpRdWVyeS5wYXJzZUpTT04gPSBmdW5jdGlvbiggZGF0YSApIHtcblx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKyBcIlwiICk7XG59O1xuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUU5XG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRydHMgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBqUXVlcnkucGFyc2VKU09OLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBUaGUganFYSFIgc3RhdGVcblx0XHRcdHN0YXRlID0gMCxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZSA9PT0gMiA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdHZhciBsbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRpZiAoICFzdGF0ZSApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoICFzdGF0ZSApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBzdGF0ZSA8IDIgKSB7XG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFjayBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICkuY29tcGxldGUgPSBjb21wbGV0ZURlZmVycmVkLmFkZDtcblx0XHRqcVhIUi5zdWNjZXNzID0ganFYSFIuZG9uZTtcblx0XHRqcVhIUi5lcnJvciA9IGpxWEhSLmZhaWw7XG5cblx0XHQvLyBSZW1vdmUgaGFzaCBjaGFyYWN0ZXIgKCM3NTMxOiBhbmQgc3RyaW5nIHByb21vdGlvbilcblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiICkucmVwbGFjZSggcmhhc2gsIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSBqUXVlcnkudHJpbSggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgtMTErXG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIGlmIHVybCBpcyBtYWxmb3JtZWQsIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU4LTExK1xuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdGNhY2hlVVJMID0gcy51cmw7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gKCBzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhICk7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgYW50aS1jYWNoZSBpbiB1cmwgaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRzLnVybCA9IHJ0cy50ZXN0KCBjYWNoZVVSTCApID9cblxuXHRcdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFscmVhZHkgYSAnXycgcGFyYW1ldGVyLCBzZXQgaXRzIHZhbHVlXG5cdFx0XHRcdFx0Y2FjaGVVUkwucmVwbGFjZSggcnRzLCBcIiQxXz1cIiArIG5vbmNlKysgKSA6XG5cblx0XHRcdFx0XHQvLyBPdGhlcndpc2UgYWRkIG9uZSB0byB0aGUgZW5kXG5cdFx0XHRcdFx0Y2FjaGVVUkwgKyAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgbm9uY2UrKztcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgc3RhdGUgPT09IDIgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGZvciAoIGkgaW4geyBzdWNjZXNzOiAxLCBlcnJvcjogMSwgY29tcGxldGU6IDEgfSApIHtcblx0XHRcdGpxWEhSWyBpIF0oIHNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRzdGF0ZSA9IDE7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIGV4Y2VwdGlvbiBhcyBlcnJvciBpZiBub3QgZG9uZVxuXHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcblx0XHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXG5cdFx0XHRcdC8vIFNpbXBseSByZXRocm93IG90aGVyd2lzZVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBDYWxsZWQgb25jZVxuXHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0ZSBpcyBcImRvbmVcIiBub3dcblx0XHRcdHN0YXRlID0gMjtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJib2R5XCIgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdFx0fVxuXHRcdH0gKS5lbmQoKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIuZmlsdGVycy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIuZmlsdGVycy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0Ly8gU3VwcG9ydDogT3BlcmEgPD0gMTIuMTJcblx0Ly8gT3BlcmEgcmVwb3J0cyBvZmZzZXRXaWR0aHMgYW5kIG9mZnNldEhlaWdodHMgbGVzcyB0aGFuIHplcm8gb24gc29tZSBlbGVtZW50c1xuXHQvLyBVc2UgT1IgaW5zdGVhZCBvZiBBTkQgYXMgdGhlIGVsZW1lbnQgaXMgbm90IHZpc2libGUgaWYgZWl0aGVyIGlzIHRydWVcblx0Ly8gU2VlIHRpY2tldHMgIzEwNDA2IGFuZCAjMTMxMzJcblx0cmV0dXJuIGVsZW0ub2Zmc2V0V2lkdGggPiAwIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0ID4gMCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoID4gMDtcbn07XG5cblxuXG5cbnZhciByMjAgPSAvJTIwL2csXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHJldHVybiBpdHMgdmFsdWVcblx0XHRcdHZhbHVlID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgPyB2YWx1ZSgpIDogKCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gU2V0IHRyYWRpdGlvbmFsIHRvIHRydWUgZm9yIGpRdWVyeSA8PSAxLjMuMiBiZWhhdmlvci5cblx0aWYgKCB0cmFkaXRpb25hbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHRyYWRpdGlvbmFsID0galF1ZXJ5LmFqYXhTZXR0aW5ncyAmJiBqUXVlcnkuYWpheFNldHRpbmdzLnRyYWRpdGlvbmFsO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBqUXVlcnkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICkucmVwbGFjZSggcjIwLCBcIitcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRyZXR1cm4gdmFsID09IG51bGwgP1xuXHRcdFx0XHRudWxsIDpcblx0XHRcdFx0alF1ZXJ5LmlzQXJyYXkoIHZhbCApID9cblx0XHRcdFx0XHRqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0eyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFOVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFOSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKS5wcm9wKCB7XG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0fSApLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0dmFyIHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApLFxuXHRcdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8vIEtlZXAgYSBjb3B5IG9mIHRoZSBvbGQgbG9hZCBtZXRob2RcbnZhciBfbG9hZCA9IGpRdWVyeS5mbi5sb2FkO1xuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHRpZiAoIHR5cGVvZiB1cmwgIT09IFwic3RyaW5nXCIgJiYgX2xvYWQgKSB7XG5cdFx0cmV0dXJuIF9sb2FkLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0fVxuXG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IGpRdWVyeS50cmltKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZXhwci5maWx0ZXJzLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxuLyoqXG4gKiBHZXRzIGEgd2luZG93IGZyb20gYW4gZWxlbWVudFxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSA/IGVsZW0gOiBlbGVtLm5vZGVUeXBlID09PSA5ICYmIGVsZW0uZGVmYXVsdFZpZXc7XG59XG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciBkb2NFbGVtLCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0Ym94ID0geyB0b3A6IDAsIGxlZnQ6IDAgfSxcblx0XHRcdGRvYyA9IGVsZW0gJiYgZWxlbS5vd25lckRvY3VtZW50O1xuXG5cdFx0aWYgKCAhZG9jICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0Ly8gTWFrZSBzdXJlIGl0J3Mgbm90IGEgZGlzY29ubmVjdGVkIERPTSBub2RlXG5cdFx0aWYgKCAhalF1ZXJ5LmNvbnRhaW5zKCBkb2NFbGVtLCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm4gYm94O1xuXHRcdH1cblxuXHRcdGJveCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZ2V0V2luZG93KCBkb2MgKTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBib3gudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXG5cdFx0XHRsZWZ0OiBib3gubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdFxuXHRcdH07XG5cdH0sXG5cblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sXG5cdFx0Ly8gYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIHRoZXJlIHdoZW4gY29tcHV0ZWQgcG9zaXRpb24gaXMgZml4ZWRcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBHZXQgKnJlYWwqIG9mZnNldFBhcmVudFxuXHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcblxuXHRcdFx0Ly8gR2V0IGNvcnJlY3Qgb2Zmc2V0c1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50WyAwIF0sIFwiaHRtbFwiICkgKSB7XG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IG9mZnNldFBhcmVudC5vZmZzZXQoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9mZnNldFBhcmVudCBib3JkZXJzXG5cdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cdFx0XHR2YXIgd2luID0gZ2V0V2luZG93KCBlbGVtICk7XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaTw3LTgrLCBDaHJvbWU8MzctNDQrXG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yMjkyODBcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQXMgb2YgNS84LzIwMTIgdGhpcyB3aWxsIHlpZWxkIGluY29ycmVjdCByZXN1bHRzIGZvciBNb2JpbGUgU2FmYXJpLCBidXQgdGhlcmVcblx0XHRcdFx0XHQvLyBpc24ndCBhIHdob2xlIGxvdCB3ZSBjYW4gZG8uIFNlZSBwdWxsIHJlcXVlc3QgYXQgdGhpcyBVUkwgZm9yIGRpc2N1c3Npb246XG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC83NjRcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUsIG51bGwgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fSxcblx0c2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubGVuZ3RoO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5hbmRTZWxmID0galF1ZXJ5LmZuLmFkZEJhY2s7XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCAhbm9HbG9iYWwgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxucmV0dXJuIGpRdWVyeTtcbn0pKTtcbi8qIVxuICAqIEJvb3RzdHJhcCB2NC40LjEgKGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS8pXG4gICogQ29weXJpZ2h0IDIwMTEtMjAxOSBUaGUgQm9vdHN0cmFwIEF1dGhvcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ncmFwaHMvY29udHJpYnV0b3JzKVxuICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICovXG4hZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9lKGV4cG9ydHMscmVxdWlyZShcImpxdWVyeVwiKSxyZXF1aXJlKFwicG9wcGVyLmpzXCIpKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImV4cG9ydHNcIixcImpxdWVyeVwiLFwicG9wcGVyLmpzXCJdLGUpOmUoKHQ9dHx8c2VsZikuYm9vdHN0cmFwPXt9LHQualF1ZXJ5LHQuUG9wcGVyKX0odGhpcyxmdW5jdGlvbih0LGcsdSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgaT1lW25dO2kuZW51bWVyYWJsZT1pLmVudW1lcmFibGV8fCExLGkuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIGkmJihpLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxpLmtleSxpKX19ZnVuY3Rpb24gcyh0LGUsbil7cmV0dXJuIGUmJmkodC5wcm90b3R5cGUsZSksbiYmaSh0LG4pLHR9ZnVuY3Rpb24gZShlLHQpe3ZhciBuPU9iamVjdC5rZXlzKGUpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBpPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7dCYmKGk9aS5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSx0KS5lbnVtZXJhYmxlfSkpLG4ucHVzaC5hcHBseShuLGkpfXJldHVybiBufWZ1bmN0aW9uIGwobyl7Zm9yKHZhciB0PTE7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl7dmFyIHI9bnVsbCE9YXJndW1lbnRzW3RdP2FyZ3VtZW50c1t0XTp7fTt0JTI/ZShPYmplY3QociksITApLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGUsbixpO2U9byxpPXJbbj10XSxuIGluIGU/T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7dmFsdWU6aSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOmVbbl09aX0pOk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG8sT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMocikpOmUoT2JqZWN0KHIpKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShvLHQsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLHQpKX0pfXJldHVybiBvfWc9ZyYmZy5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRcIik/Zy5kZWZhdWx0OmcsdT11JiZ1Lmhhc093blByb3BlcnR5KFwiZGVmYXVsdFwiKT91LmRlZmF1bHQ6dTt2YXIgbj1cInRyYW5zaXRpb25lbmRcIjtmdW5jdGlvbiBvKHQpe3ZhciBlPXRoaXMsbj0hMTtyZXR1cm4gZyh0aGlzKS5vbmUoXy5UUkFOU0lUSU9OX0VORCxmdW5jdGlvbigpe249ITB9KSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bnx8Xy50cmlnZ2VyVHJhbnNpdGlvbkVuZChlKX0sdCksdGhpc312YXIgXz17VFJBTlNJVElPTl9FTkQ6XCJic1RyYW5zaXRpb25FbmRcIixnZXRVSUQ6ZnVuY3Rpb24odCl7Zm9yKDt0Kz1+figxZTYqTWF0aC5yYW5kb20oKSksZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodCk7KTtyZXR1cm4gdH0sZ2V0U2VsZWN0b3JGcm9tRWxlbWVudDpmdW5jdGlvbih0KXt2YXIgZT10LmdldEF0dHJpYnV0ZShcImRhdGEtdGFyZ2V0XCIpO2lmKCFlfHxcIiNcIj09PWUpe3ZhciBuPXQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtlPW4mJlwiI1wiIT09bj9uLnRyaW0oKTpcIlwifXRyeXtyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKT9lOm51bGx9Y2F0Y2godCl7cmV0dXJuIG51bGx9fSxnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudDpmdW5jdGlvbih0KXtpZighdClyZXR1cm4gMDt2YXIgZT1nKHQpLmNzcyhcInRyYW5zaXRpb24tZHVyYXRpb25cIiksbj1nKHQpLmNzcyhcInRyYW5zaXRpb24tZGVsYXlcIiksaT1wYXJzZUZsb2F0KGUpLG89cGFyc2VGbG9hdChuKTtyZXR1cm4gaXx8bz8oZT1lLnNwbGl0KFwiLFwiKVswXSxuPW4uc3BsaXQoXCIsXCIpWzBdLDFlMyoocGFyc2VGbG9hdChlKStwYXJzZUZsb2F0KG4pKSk6MH0scmVmbG93OmZ1bmN0aW9uKHQpe3JldHVybiB0Lm9mZnNldEhlaWdodH0sdHJpZ2dlclRyYW5zaXRpb25FbmQ6ZnVuY3Rpb24odCl7Zyh0KS50cmlnZ2VyKG4pfSxzdXBwb3J0c1RyYW5zaXRpb25FbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbihuKX0saXNFbGVtZW50OmZ1bmN0aW9uKHQpe3JldHVybih0WzBdfHx0KS5ub2RlVHlwZX0sdHlwZUNoZWNrQ29uZmlnOmZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIGkgaW4gbilpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixpKSl7dmFyIG89bltpXSxyPWVbaV0scz1yJiZfLmlzRWxlbWVudChyKT9cImVsZW1lbnRcIjooYT1yLHt9LnRvU3RyaW5nLmNhbGwoYSkubWF0Y2goL1xccyhbYS16XSspL2kpWzFdLnRvTG93ZXJDYXNlKCkpO2lmKCFuZXcgUmVnRXhwKG8pLnRlc3QocykpdGhyb3cgbmV3IEVycm9yKHQudG9VcHBlckNhc2UoKSsnOiBPcHRpb24gXCInK2krJ1wiIHByb3ZpZGVkIHR5cGUgXCInK3MrJ1wiIGJ1dCBleHBlY3RlZCB0eXBlIFwiJytvKydcIi4nKX12YXIgYX0sZmluZFNoYWRvd1Jvb3Q6ZnVuY3Rpb24odCl7aWYoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hdHRhY2hTaGFkb3cpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdC5nZXRSb290Tm9kZSlyZXR1cm4gdCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3Q/dDp0LnBhcmVudE5vZGU/Xy5maW5kU2hhZG93Um9vdCh0LnBhcmVudE5vZGUpOm51bGw7dmFyIGU9dC5nZXRSb290Tm9kZSgpO3JldHVybiBlIGluc3RhbmNlb2YgU2hhZG93Um9vdD9lOm51bGx9LGpRdWVyeURldGVjdGlvbjpmdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBnKXRocm93IG5ldyBUeXBlRXJyb3IoXCJCb290c3RyYXAncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGpRdWVyeS4galF1ZXJ5IG11c3QgYmUgaW5jbHVkZWQgYmVmb3JlIEJvb3RzdHJhcCdzIEphdmFTY3JpcHQuXCIpO3ZhciB0PWcuZm4uanF1ZXJ5LnNwbGl0KFwiIFwiKVswXS5zcGxpdChcIi5cIik7aWYodFswXTwyJiZ0WzFdPDl8fDE9PT10WzBdJiY5PT09dFsxXSYmdFsyXTwxfHw0PD10WzBdKXRocm93IG5ldyBFcnJvcihcIkJvb3RzdHJhcCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgYXQgbGVhc3QgalF1ZXJ5IHYxLjkuMSBidXQgbGVzcyB0aGFuIHY0LjAuMFwiKX19O18ualF1ZXJ5RGV0ZWN0aW9uKCksZy5mbi5lbXVsYXRlVHJhbnNpdGlvbkVuZD1vLGcuZXZlbnQuc3BlY2lhbFtfLlRSQU5TSVRJT05fRU5EXT17YmluZFR5cGU6bixkZWxlZ2F0ZVR5cGU6bixoYW5kbGU6ZnVuY3Rpb24odCl7aWYoZyh0LnRhcmdldCkuaXModGhpcykpcmV0dXJuIHQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpfX07dmFyIHI9XCJhbGVydFwiLGE9XCJicy5hbGVydFwiLGM9XCIuXCIrYSxoPWcuZm5bcl0sZj17Q0xPU0U6XCJjbG9zZVwiK2MsQ0xPU0VEOlwiY2xvc2VkXCIrYyxDTElDS19EQVRBX0FQSTpcImNsaWNrXCIrYytcIi5kYXRhLWFwaVwifSxkPVwiYWxlcnRcIixtPVwiZmFkZVwiLHA9XCJzaG93XCIsdj1mdW5jdGlvbigpe2Z1bmN0aW9uIGkodCl7dGhpcy5fZWxlbWVudD10fXZhciB0PWkucHJvdG90eXBlO3JldHVybiB0LmNsb3NlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2VsZW1lbnQ7dCYmKGU9dGhpcy5fZ2V0Um9vdEVsZW1lbnQodCkpLHRoaXMuX3RyaWdnZXJDbG9zZUV2ZW50KGUpLmlzRGVmYXVsdFByZXZlbnRlZCgpfHx0aGlzLl9yZW1vdmVFbGVtZW50KGUpfSx0LmRpc3Bvc2U9ZnVuY3Rpb24oKXtnLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCxhKSx0aGlzLl9lbGVtZW50PW51bGx9LHQuX2dldFJvb3RFbGVtZW50PWZ1bmN0aW9uKHQpe3ZhciBlPV8uZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0KSxuPSExO3JldHVybiBlJiYobj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUpKSxuPW58fGcodCkuY2xvc2VzdChcIi5cIitkKVswXX0sdC5fdHJpZ2dlckNsb3NlRXZlbnQ9ZnVuY3Rpb24odCl7dmFyIGU9Zy5FdmVudChmLkNMT1NFKTtyZXR1cm4gZyh0KS50cmlnZ2VyKGUpLGV9LHQuX3JlbW92ZUVsZW1lbnQ9ZnVuY3Rpb24oZSl7dmFyIG49dGhpcztpZihnKGUpLnJlbW92ZUNsYXNzKHApLGcoZSkuaGFzQ2xhc3MobSkpe3ZhciB0PV8uZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQoZSk7ZyhlKS5vbmUoXy5UUkFOU0lUSU9OX0VORCxmdW5jdGlvbih0KXtyZXR1cm4gbi5fZGVzdHJveUVsZW1lbnQoZSx0KX0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHQpfWVsc2UgdGhpcy5fZGVzdHJveUVsZW1lbnQoZSl9LHQuX2Rlc3Ryb3lFbGVtZW50PWZ1bmN0aW9uKHQpe2codCkuZGV0YWNoKCkudHJpZ2dlcihmLkNMT1NFRCkucmVtb3ZlKCl9LGkuX2pRdWVyeUludGVyZmFjZT1mdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9Zyh0aGlzKSxlPXQuZGF0YShhKTtlfHwoZT1uZXcgaSh0aGlzKSx0LmRhdGEoYSxlKSksXCJjbG9zZVwiPT09biYmZVtuXSh0aGlzKX0pfSxpLl9oYW5kbGVEaXNtaXNzPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXt0JiZ0LnByZXZlbnREZWZhdWx0KCksZS5jbG9zZSh0aGlzKX19LHMoaSxudWxsLFt7a2V5OlwiVkVSU0lPTlwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiNC40LjFcIn19XSksaX0oKTtnKGRvY3VtZW50KS5vbihmLkNMSUNLX0RBVEFfQVBJLCdbZGF0YS1kaXNtaXNzPVwiYWxlcnRcIl0nLHYuX2hhbmRsZURpc21pc3MobmV3IHYpKSxnLmZuW3JdPXYuX2pRdWVyeUludGVyZmFjZSxnLmZuW3JdLkNvbnN0cnVjdG9yPXYsZy5mbltyXS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGcuZm5bcl09aCx2Ll9qUXVlcnlJbnRlcmZhY2V9O3ZhciB5PVwiYnV0dG9uXCIsRT1cImJzLmJ1dHRvblwiLEM9XCIuXCIrRSxUPVwiLmRhdGEtYXBpXCIsYj1nLmZuW3ldLFM9XCJhY3RpdmVcIixEPVwiYnRuXCIsST1cImZvY3VzXCIsdz0nW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsQT0nW2RhdGEtdG9nZ2xlPVwiYnV0dG9uc1wiXScsTj0nW2RhdGEtdG9nZ2xlPVwiYnV0dG9uXCJdJyxPPSdbZGF0YS10b2dnbGU9XCJidXR0b25zXCJdIC5idG4nLGs9J2lucHV0Om5vdChbdHlwZT1cImhpZGRlblwiXSknLFA9XCIuYWN0aXZlXCIsTD1cIi5idG5cIixqPXtDTElDS19EQVRBX0FQSTpcImNsaWNrXCIrQytULEZPQ1VTX0JMVVJfREFUQV9BUEk6XCJmb2N1c1wiK0MrVCtcIiBibHVyXCIrQytULExPQURfREFUQV9BUEk6XCJsb2FkXCIrQytUfSxIPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbih0KXt0aGlzLl9lbGVtZW50PXR9dmFyIHQ9bi5wcm90b3R5cGU7cmV0dXJuIHQudG9nZ2xlPWZ1bmN0aW9uKCl7dmFyIHQ9ITAsZT0hMCxuPWcodGhpcy5fZWxlbWVudCkuY2xvc2VzdChBKVswXTtpZihuKXt2YXIgaT10aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3Ioayk7aWYoaSl7aWYoXCJyYWRpb1wiPT09aS50eXBlKWlmKGkuY2hlY2tlZCYmdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoUykpdD0hMTtlbHNle3ZhciBvPW4ucXVlcnlTZWxlY3RvcihQKTtvJiZnKG8pLnJlbW92ZUNsYXNzKFMpfWVsc2VcImNoZWNrYm94XCI9PT1pLnR5cGU/XCJMQUJFTFwiPT09dGhpcy5fZWxlbWVudC50YWdOYW1lJiZpLmNoZWNrZWQ9PT10aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhTKSYmKHQ9ITEpOnQ9ITE7dCYmKGkuY2hlY2tlZD0hdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoUyksZyhpKS50cmlnZ2VyKFwiY2hhbmdlXCIpKSxpLmZvY3VzKCksZT0hMX19dGhpcy5fZWxlbWVudC5oYXNBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKXx8dGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJkaXNhYmxlZFwiKXx8KGUmJnRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1wcmVzc2VkXCIsIXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFMpKSx0JiZnKHRoaXMuX2VsZW1lbnQpLnRvZ2dsZUNsYXNzKFMpKX0sdC5kaXNwb3NlPWZ1bmN0aW9uKCl7Zy5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsRSksdGhpcy5fZWxlbWVudD1udWxsfSxuLl9qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PWcodGhpcykuZGF0YShFKTt0fHwodD1uZXcgbih0aGlzKSxnKHRoaXMpLmRhdGEoRSx0KSksXCJ0b2dnbGVcIj09PWUmJnRbZV0oKX0pfSxzKG4sbnVsbCxbe2tleTpcIlZFUlNJT05cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjQuNC4xXCJ9fV0pLG59KCk7Zyhkb2N1bWVudCkub24oai5DTElDS19EQVRBX0FQSSx3LGZ1bmN0aW9uKHQpe3ZhciBlPXQudGFyZ2V0O2lmKGcoZSkuaGFzQ2xhc3MoRCl8fChlPWcoZSkuY2xvc2VzdChMKVswXSksIWV8fGUuaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIil8fGUuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGlzYWJsZWRcIikpdC5wcmV2ZW50RGVmYXVsdCgpO2Vsc2V7dmFyIG49ZS5xdWVyeVNlbGVjdG9yKGspO2lmKG4mJihuLmhhc0F0dHJpYnV0ZShcImRpc2FibGVkXCIpfHxuLmNsYXNzTGlzdC5jb250YWlucyhcImRpc2FibGVkXCIpKSlyZXR1cm4gdm9pZCB0LnByZXZlbnREZWZhdWx0KCk7SC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoZyhlKSxcInRvZ2dsZVwiKX19KS5vbihqLkZPQ1VTX0JMVVJfREFUQV9BUEksdyxmdW5jdGlvbih0KXt2YXIgZT1nKHQudGFyZ2V0KS5jbG9zZXN0KEwpWzBdO2coZSkudG9nZ2xlQ2xhc3MoSSwvXmZvY3VzKGluKT8kLy50ZXN0KHQudHlwZSkpfSksZyh3aW5kb3cpLm9uKGouTE9BRF9EQVRBX0FQSSxmdW5jdGlvbigpe2Zvcih2YXIgdD1bXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoTykpLGU9MCxuPXQubGVuZ3RoO2U8bjtlKyspe3ZhciBpPXRbZV0sbz1pLnF1ZXJ5U2VsZWN0b3Ioayk7by5jaGVja2VkfHxvLmhhc0F0dHJpYnV0ZShcImNoZWNrZWRcIik/aS5jbGFzc0xpc3QuYWRkKFMpOmkuY2xhc3NMaXN0LnJlbW92ZShTKX1mb3IodmFyIHI9MCxzPSh0PVtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChOKSkpLmxlbmd0aDtyPHM7cisrKXt2YXIgYT10W3JdO1widHJ1ZVwiPT09YS5nZXRBdHRyaWJ1dGUoXCJhcmlhLXByZXNzZWRcIik/YS5jbGFzc0xpc3QuYWRkKFMpOmEuY2xhc3NMaXN0LnJlbW92ZShTKX19KSxnLmZuW3ldPUguX2pRdWVyeUludGVyZmFjZSxnLmZuW3ldLkNvbnN0cnVjdG9yPUgsZy5mblt5XS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGcuZm5beV09YixILl9qUXVlcnlJbnRlcmZhY2V9O3ZhciBSPVwiY2Fyb3VzZWxcIix4PVwiYnMuY2Fyb3VzZWxcIixGPVwiLlwiK3gsVT1cIi5kYXRhLWFwaVwiLFc9Zy5mbltSXSxxPXtpbnRlcnZhbDo1ZTMsa2V5Ym9hcmQ6ITAsc2xpZGU6ITEscGF1c2U6XCJob3ZlclwiLHdyYXA6ITAsdG91Y2g6ITB9LE09e2ludGVydmFsOlwiKG51bWJlcnxib29sZWFuKVwiLGtleWJvYXJkOlwiYm9vbGVhblwiLHNsaWRlOlwiKGJvb2xlYW58c3RyaW5nKVwiLHBhdXNlOlwiKHN0cmluZ3xib29sZWFuKVwiLHdyYXA6XCJib29sZWFuXCIsdG91Y2g6XCJib29sZWFuXCJ9LEs9XCJuZXh0XCIsUT1cInByZXZcIixCPVwibGVmdFwiLFY9XCJyaWdodFwiLFk9e1NMSURFOlwic2xpZGVcIitGLFNMSUQ6XCJzbGlkXCIrRixLRVlET1dOOlwia2V5ZG93blwiK0YsTU9VU0VFTlRFUjpcIm1vdXNlZW50ZXJcIitGLE1PVVNFTEVBVkU6XCJtb3VzZWxlYXZlXCIrRixUT1VDSFNUQVJUOlwidG91Y2hzdGFydFwiK0YsVE9VQ0hNT1ZFOlwidG91Y2htb3ZlXCIrRixUT1VDSEVORDpcInRvdWNoZW5kXCIrRixQT0lOVEVSRE9XTjpcInBvaW50ZXJkb3duXCIrRixQT0lOVEVSVVA6XCJwb2ludGVydXBcIitGLERSQUdfU1RBUlQ6XCJkcmFnc3RhcnRcIitGLExPQURfREFUQV9BUEk6XCJsb2FkXCIrRitVLENMSUNLX0RBVEFfQVBJOlwiY2xpY2tcIitGK1V9LHo9XCJjYXJvdXNlbFwiLFg9XCJhY3RpdmVcIiwkPVwic2xpZGVcIixHPVwiY2Fyb3VzZWwtaXRlbS1yaWdodFwiLEo9XCJjYXJvdXNlbC1pdGVtLWxlZnRcIixaPVwiY2Fyb3VzZWwtaXRlbS1uZXh0XCIsdHQ9XCJjYXJvdXNlbC1pdGVtLXByZXZcIixldD1cInBvaW50ZXItZXZlbnRcIixudD1cIi5hY3RpdmVcIixpdD1cIi5hY3RpdmUuY2Fyb3VzZWwtaXRlbVwiLG90PVwiLmNhcm91c2VsLWl0ZW1cIixydD1cIi5jYXJvdXNlbC1pdGVtIGltZ1wiLHN0PVwiLmNhcm91c2VsLWl0ZW0tbmV4dCwgLmNhcm91c2VsLWl0ZW0tcHJldlwiLGF0PVwiLmNhcm91c2VsLWluZGljYXRvcnNcIixsdD1cIltkYXRhLXNsaWRlXSwgW2RhdGEtc2xpZGUtdG9dXCIsY3Q9J1tkYXRhLXJpZGU9XCJjYXJvdXNlbFwiXScsaHQ9e1RPVUNIOlwidG91Y2hcIixQRU46XCJwZW5cIn0sdXQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiByKHQsZSl7dGhpcy5faXRlbXM9bnVsbCx0aGlzLl9pbnRlcnZhbD1udWxsLHRoaXMuX2FjdGl2ZUVsZW1lbnQ9bnVsbCx0aGlzLl9pc1BhdXNlZD0hMSx0aGlzLl9pc1NsaWRpbmc9ITEsdGhpcy50b3VjaFRpbWVvdXQ9bnVsbCx0aGlzLnRvdWNoU3RhcnRYPTAsdGhpcy50b3VjaERlbHRhWD0wLHRoaXMuX2NvbmZpZz10aGlzLl9nZXRDb25maWcoZSksdGhpcy5fZWxlbWVudD10LHRoaXMuX2luZGljYXRvcnNFbGVtZW50PXRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihhdCksdGhpcy5fdG91Y2hTdXBwb3J0ZWQ9XCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudHx8MDxuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMsdGhpcy5fcG9pbnRlckV2ZW50PUJvb2xlYW4od2luZG93LlBvaW50ZXJFdmVudHx8d2luZG93Lk1TUG9pbnRlckV2ZW50KSx0aGlzLl9hZGRFdmVudExpc3RlbmVycygpfXZhciB0PXIucHJvdG90eXBlO3JldHVybiB0Lm5leHQ9ZnVuY3Rpb24oKXt0aGlzLl9pc1NsaWRpbmd8fHRoaXMuX3NsaWRlKEspfSx0Lm5leHRXaGVuVmlzaWJsZT1mdW5jdGlvbigpeyFkb2N1bWVudC5oaWRkZW4mJmcodGhpcy5fZWxlbWVudCkuaXMoXCI6dmlzaWJsZVwiKSYmXCJoaWRkZW5cIiE9PWcodGhpcy5fZWxlbWVudCkuY3NzKFwidmlzaWJpbGl0eVwiKSYmdGhpcy5uZXh0KCl9LHQucHJldj1mdW5jdGlvbigpe3RoaXMuX2lzU2xpZGluZ3x8dGhpcy5fc2xpZGUoUSl9LHQucGF1c2U9ZnVuY3Rpb24odCl7dHx8KHRoaXMuX2lzUGF1c2VkPSEwKSx0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3Ioc3QpJiYoXy50cmlnZ2VyVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50KSx0aGlzLmN5Y2xlKCEwKSksY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCksdGhpcy5faW50ZXJ2YWw9bnVsbH0sdC5jeWNsZT1mdW5jdGlvbih0KXt0fHwodGhpcy5faXNQYXVzZWQ9ITEpLHRoaXMuX2ludGVydmFsJiYoY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCksdGhpcy5faW50ZXJ2YWw9bnVsbCksdGhpcy5fY29uZmlnLmludGVydmFsJiYhdGhpcy5faXNQYXVzZWQmJih0aGlzLl9pbnRlcnZhbD1zZXRJbnRlcnZhbCgoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlP3RoaXMubmV4dFdoZW5WaXNpYmxlOnRoaXMubmV4dCkuYmluZCh0aGlzKSx0aGlzLl9jb25maWcuaW50ZXJ2YWwpKX0sdC50bz1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3RoaXMuX2FjdGl2ZUVsZW1lbnQ9dGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKGl0KTt2YXIgbj10aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fYWN0aXZlRWxlbWVudCk7aWYoISh0PnRoaXMuX2l0ZW1zLmxlbmd0aC0xfHx0PDApKWlmKHRoaXMuX2lzU2xpZGluZylnKHRoaXMuX2VsZW1lbnQpLm9uZShZLlNMSUQsZnVuY3Rpb24oKXtyZXR1cm4gZS50byh0KX0pO2Vsc2V7aWYobj09PXQpcmV0dXJuIHRoaXMucGF1c2UoKSx2b2lkIHRoaXMuY3ljbGUoKTt2YXIgaT1uPHQ/SzpRO3RoaXMuX3NsaWRlKGksdGhpcy5faXRlbXNbdF0pfX0sdC5kaXNwb3NlPWZ1bmN0aW9uKCl7Zyh0aGlzLl9lbGVtZW50KS5vZmYoRiksZy5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQseCksdGhpcy5faXRlbXM9bnVsbCx0aGlzLl9jb25maWc9bnVsbCx0aGlzLl9lbGVtZW50PW51bGwsdGhpcy5faW50ZXJ2YWw9bnVsbCx0aGlzLl9pc1BhdXNlZD1udWxsLHRoaXMuX2lzU2xpZGluZz1udWxsLHRoaXMuX2FjdGl2ZUVsZW1lbnQ9bnVsbCx0aGlzLl9pbmRpY2F0b3JzRWxlbWVudD1udWxsfSx0Ll9nZXRDb25maWc9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9bCh7fSxxLHt9LHQpLF8udHlwZUNoZWNrQ29uZmlnKFIsdCxNKSx0fSx0Ll9oYW5kbGVTd2lwZT1mdW5jdGlvbigpe3ZhciB0PU1hdGguYWJzKHRoaXMudG91Y2hEZWx0YVgpO2lmKCEodDw9NDApKXt2YXIgZT10L3RoaXMudG91Y2hEZWx0YVg7KHRoaXMudG91Y2hEZWx0YVg9MCk8ZSYmdGhpcy5wcmV2KCksZTwwJiZ0aGlzLm5leHQoKX19LHQuX2FkZEV2ZW50TGlzdGVuZXJzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLl9jb25maWcua2V5Ym9hcmQmJmcodGhpcy5fZWxlbWVudCkub24oWS5LRVlET1dOLGZ1bmN0aW9uKHQpe3JldHVybiBlLl9rZXlkb3duKHQpfSksXCJob3ZlclwiPT09dGhpcy5fY29uZmlnLnBhdXNlJiZnKHRoaXMuX2VsZW1lbnQpLm9uKFkuTU9VU0VFTlRFUixmdW5jdGlvbih0KXtyZXR1cm4gZS5wYXVzZSh0KX0pLm9uKFkuTU9VU0VMRUFWRSxmdW5jdGlvbih0KXtyZXR1cm4gZS5jeWNsZSh0KX0pLHRoaXMuX2NvbmZpZy50b3VjaCYmdGhpcy5fYWRkVG91Y2hFdmVudExpc3RlbmVycygpfSx0Ll9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZih0aGlzLl90b3VjaFN1cHBvcnRlZCl7dmFyIG49ZnVuY3Rpb24odCl7ZS5fcG9pbnRlckV2ZW50JiZodFt0Lm9yaWdpbmFsRXZlbnQucG9pbnRlclR5cGUudG9VcHBlckNhc2UoKV0/ZS50b3VjaFN0YXJ0WD10Lm9yaWdpbmFsRXZlbnQuY2xpZW50WDplLl9wb2ludGVyRXZlbnR8fChlLnRvdWNoU3RhcnRYPXQub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdLmNsaWVudFgpfSxpPWZ1bmN0aW9uKHQpe2UuX3BvaW50ZXJFdmVudCYmaHRbdC5vcmlnaW5hbEV2ZW50LnBvaW50ZXJUeXBlLnRvVXBwZXJDYXNlKCldJiYoZS50b3VjaERlbHRhWD10Lm9yaWdpbmFsRXZlbnQuY2xpZW50WC1lLnRvdWNoU3RhcnRYKSxlLl9oYW5kbGVTd2lwZSgpLFwiaG92ZXJcIj09PWUuX2NvbmZpZy5wYXVzZSYmKGUucGF1c2UoKSxlLnRvdWNoVGltZW91dCYmY2xlYXJUaW1lb3V0KGUudG91Y2hUaW1lb3V0KSxlLnRvdWNoVGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKHQpe3JldHVybiBlLmN5Y2xlKHQpfSw1MDArZS5fY29uZmlnLmludGVydmFsKSl9O2codGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHJ0KSkub24oWS5EUkFHX1NUQVJULGZ1bmN0aW9uKHQpe3JldHVybiB0LnByZXZlbnREZWZhdWx0KCl9KSx0aGlzLl9wb2ludGVyRXZlbnQ/KGcodGhpcy5fZWxlbWVudCkub24oWS5QT0lOVEVSRE9XTixmdW5jdGlvbih0KXtyZXR1cm4gbih0KX0pLGcodGhpcy5fZWxlbWVudCkub24oWS5QT0lOVEVSVVAsZnVuY3Rpb24odCl7cmV0dXJuIGkodCl9KSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoZXQpKTooZyh0aGlzLl9lbGVtZW50KS5vbihZLlRPVUNIU1RBUlQsZnVuY3Rpb24odCl7cmV0dXJuIG4odCl9KSxnKHRoaXMuX2VsZW1lbnQpLm9uKFkuVE9VQ0hNT1ZFLGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbih0KXt0Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyYmMTx0Lm9yaWdpbmFsRXZlbnQudG91Y2hlcy5sZW5ndGg/ZS50b3VjaERlbHRhWD0wOmUudG91Y2hEZWx0YVg9dC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WC1lLnRvdWNoU3RhcnRYfSh0KX0pLGcodGhpcy5fZWxlbWVudCkub24oWS5UT1VDSEVORCxmdW5jdGlvbih0KXtyZXR1cm4gaSh0KX0pKX19LHQuX2tleWRvd249ZnVuY3Rpb24odCl7aWYoIS9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QodC50YXJnZXQudGFnTmFtZSkpc3dpdGNoKHQud2hpY2gpe2Nhc2UgMzc6dC5wcmV2ZW50RGVmYXVsdCgpLHRoaXMucHJldigpO2JyZWFrO2Nhc2UgMzk6dC5wcmV2ZW50RGVmYXVsdCgpLHRoaXMubmV4dCgpfX0sdC5fZ2V0SXRlbUluZGV4PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9pdGVtcz10JiZ0LnBhcmVudE5vZGU/W10uc2xpY2UuY2FsbCh0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChvdCkpOltdLHRoaXMuX2l0ZW1zLmluZGV4T2YodCl9LHQuX2dldEl0ZW1CeURpcmVjdGlvbj1mdW5jdGlvbih0LGUpe3ZhciBuPXQ9PT1LLGk9dD09PVEsbz10aGlzLl9nZXRJdGVtSW5kZXgoZSkscj10aGlzLl9pdGVtcy5sZW5ndGgtMTtpZigoaSYmMD09PW98fG4mJm89PT1yKSYmIXRoaXMuX2NvbmZpZy53cmFwKXJldHVybiBlO3ZhciBzPShvKyh0PT09UT8tMToxKSkldGhpcy5faXRlbXMubGVuZ3RoO3JldHVybi0xPT1zP3RoaXMuX2l0ZW1zW3RoaXMuX2l0ZW1zLmxlbmd0aC0xXTp0aGlzLl9pdGVtc1tzXX0sdC5fdHJpZ2dlclNsaWRlRXZlbnQ9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLl9nZXRJdGVtSW5kZXgodCksaT10aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKGl0KSksbz1nLkV2ZW50KFkuU0xJREUse3JlbGF0ZWRUYXJnZXQ6dCxkaXJlY3Rpb246ZSxmcm9tOmksdG86bn0pO3JldHVybiBnKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIobyksb30sdC5fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudD1mdW5jdGlvbih0KXtpZih0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCl7dmFyIGU9W10uc2xpY2UuY2FsbCh0aGlzLl9pbmRpY2F0b3JzRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKG50KSk7ZyhlKS5yZW1vdmVDbGFzcyhYKTt2YXIgbj10aGlzLl9pbmRpY2F0b3JzRWxlbWVudC5jaGlsZHJlblt0aGlzLl9nZXRJdGVtSW5kZXgodCldO24mJmcobikuYWRkQ2xhc3MoWCl9fSx0Ll9zbGlkZT1mdW5jdGlvbih0LGUpe3ZhciBuLGksbyxyPXRoaXMscz10aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoaXQpLGE9dGhpcy5fZ2V0SXRlbUluZGV4KHMpLGw9ZXx8cyYmdGhpcy5fZ2V0SXRlbUJ5RGlyZWN0aW9uKHQscyksYz10aGlzLl9nZXRJdGVtSW5kZXgobCksaD1Cb29sZWFuKHRoaXMuX2ludGVydmFsKTtpZihvPXQ9PT1LPyhuPUosaT1aLEIpOihuPUcsaT10dCxWKSxsJiZnKGwpLmhhc0NsYXNzKFgpKXRoaXMuX2lzU2xpZGluZz0hMTtlbHNlIGlmKCF0aGlzLl90cmlnZ2VyU2xpZGVFdmVudChsLG8pLmlzRGVmYXVsdFByZXZlbnRlZCgpJiZzJiZsKXt0aGlzLl9pc1NsaWRpbmc9ITAsaCYmdGhpcy5wYXVzZSgpLHRoaXMuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQobCk7dmFyIHU9Zy5FdmVudChZLlNMSUQse3JlbGF0ZWRUYXJnZXQ6bCxkaXJlY3Rpb246byxmcm9tOmEsdG86Y30pO2lmKGcodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoJCkpe2cobCkuYWRkQ2xhc3MoaSksXy5yZWZsb3cobCksZyhzKS5hZGRDbGFzcyhuKSxnKGwpLmFkZENsYXNzKG4pO3ZhciBmPXBhcnNlSW50KGwuZ2V0QXR0cmlidXRlKFwiZGF0YS1pbnRlcnZhbFwiKSwxMCk7Zj8odGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbD10aGlzLl9jb25maWcuZGVmYXVsdEludGVydmFsfHx0aGlzLl9jb25maWcuaW50ZXJ2YWwsdGhpcy5fY29uZmlnLmludGVydmFsPWYpOnRoaXMuX2NvbmZpZy5pbnRlcnZhbD10aGlzLl9jb25maWcuZGVmYXVsdEludGVydmFsfHx0aGlzLl9jb25maWcuaW50ZXJ2YWw7dmFyIGQ9Xy5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChzKTtnKHMpLm9uZShfLlRSQU5TSVRJT05fRU5ELGZ1bmN0aW9uKCl7ZyhsKS5yZW1vdmVDbGFzcyhuK1wiIFwiK2kpLmFkZENsYXNzKFgpLGcocykucmVtb3ZlQ2xhc3MoWCtcIiBcIitpK1wiIFwiK24pLHIuX2lzU2xpZGluZz0hMSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cmV0dXJuIGcoci5fZWxlbWVudCkudHJpZ2dlcih1KX0sMCl9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZChkKX1lbHNlIGcocykucmVtb3ZlQ2xhc3MoWCksZyhsKS5hZGRDbGFzcyhYKSx0aGlzLl9pc1NsaWRpbmc9ITEsZyh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHUpO2gmJnRoaXMuY3ljbGUoKX19LHIuX2pRdWVyeUludGVyZmFjZT1mdW5jdGlvbihpKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9Zyh0aGlzKS5kYXRhKHgpLGU9bCh7fSxxLHt9LGcodGhpcykuZGF0YSgpKTtcIm9iamVjdFwiPT10eXBlb2YgaSYmKGU9bCh7fSxlLHt9LGkpKTt2YXIgbj1cInN0cmluZ1wiPT10eXBlb2YgaT9pOmUuc2xpZGU7aWYodHx8KHQ9bmV3IHIodGhpcyxlKSxnKHRoaXMpLmRhdGEoeCx0KSksXCJudW1iZXJcIj09dHlwZW9mIGkpdC50byhpKTtlbHNlIGlmKFwic3RyaW5nXCI9PXR5cGVvZiBuKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgdFtuXSl0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInK24rJ1wiJyk7dFtuXSgpfWVsc2UgZS5pbnRlcnZhbCYmZS5yaWRlJiYodC5wYXVzZSgpLHQuY3ljbGUoKSl9KX0sci5fZGF0YUFwaUNsaWNrSGFuZGxlcj1mdW5jdGlvbih0KXt2YXIgZT1fLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7aWYoZSl7dmFyIG49ZyhlKVswXTtpZihuJiZnKG4pLmhhc0NsYXNzKHopKXt2YXIgaT1sKHt9LGcobikuZGF0YSgpLHt9LGcodGhpcykuZGF0YSgpKSxvPXRoaXMuZ2V0QXR0cmlidXRlKFwiZGF0YS1zbGlkZS10b1wiKTtvJiYoaS5pbnRlcnZhbD0hMSksci5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoZyhuKSxpKSxvJiZnKG4pLmRhdGEoeCkudG8obyksdC5wcmV2ZW50RGVmYXVsdCgpfX19LHMocixudWxsLFt7a2V5OlwiVkVSU0lPTlwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiNC40LjFcIn19LHtrZXk6XCJEZWZhdWx0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHF9fV0pLHJ9KCk7Zyhkb2N1bWVudCkub24oWS5DTElDS19EQVRBX0FQSSxsdCx1dC5fZGF0YUFwaUNsaWNrSGFuZGxlciksZyh3aW5kb3cpLm9uKFkuTE9BRF9EQVRBX0FQSSxmdW5jdGlvbigpe2Zvcih2YXIgdD1bXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY3QpKSxlPTAsbj10Lmxlbmd0aDtlPG47ZSsrKXt2YXIgaT1nKHRbZV0pO3V0Ll9qUXVlcnlJbnRlcmZhY2UuY2FsbChpLGkuZGF0YSgpKX19KSxnLmZuW1JdPXV0Ll9qUXVlcnlJbnRlcmZhY2UsZy5mbltSXS5Db25zdHJ1Y3Rvcj11dCxnLmZuW1JdLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gZy5mbltSXT1XLHV0Ll9qUXVlcnlJbnRlcmZhY2V9O3ZhciBmdD1cImNvbGxhcHNlXCIsZHQ9XCJicy5jb2xsYXBzZVwiLGd0PVwiLlwiK2R0LF90PWcuZm5bZnRdLG10PXt0b2dnbGU6ITAscGFyZW50OlwiXCJ9LHB0PXt0b2dnbGU6XCJib29sZWFuXCIscGFyZW50OlwiKHN0cmluZ3xlbGVtZW50KVwifSx2dD17U0hPVzpcInNob3dcIitndCxTSE9XTjpcInNob3duXCIrZ3QsSElERTpcImhpZGVcIitndCxISURERU46XCJoaWRkZW5cIitndCxDTElDS19EQVRBX0FQSTpcImNsaWNrXCIrZ3QrXCIuZGF0YS1hcGlcIn0seXQ9XCJzaG93XCIsRXQ9XCJjb2xsYXBzZVwiLEN0PVwiY29sbGFwc2luZ1wiLFR0PVwiY29sbGFwc2VkXCIsYnQ9XCJ3aWR0aFwiLFN0PVwiaGVpZ2h0XCIsRHQ9XCIuc2hvdywgLmNvbGxhcHNpbmdcIixJdD0nW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nLHd0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShlLHQpe3RoaXMuX2lzVHJhbnNpdGlvbmluZz0hMSx0aGlzLl9lbGVtZW50PWUsdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyh0KSx0aGlzLl90cmlnZ2VyQXJyYXk9W10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtocmVmPVwiIycrZS5pZCsnXCJdLFtkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtdGFyZ2V0PVwiIycrZS5pZCsnXCJdJykpO2Zvcih2YXIgbj1bXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoSXQpKSxpPTAsbz1uLmxlbmd0aDtpPG87aSsrKXt2YXIgcj1uW2ldLHM9Xy5nZXRTZWxlY3RvckZyb21FbGVtZW50KHIpLGE9W10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHMpKS5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT1lfSk7bnVsbCE9PXMmJjA8YS5sZW5ndGgmJih0aGlzLl9zZWxlY3Rvcj1zLHRoaXMuX3RyaWdnZXJBcnJheS5wdXNoKHIpKX10aGlzLl9wYXJlbnQ9dGhpcy5fY29uZmlnLnBhcmVudD90aGlzLl9nZXRQYXJlbnQoKTpudWxsLHRoaXMuX2NvbmZpZy5wYXJlbnR8fHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl9lbGVtZW50LHRoaXMuX3RyaWdnZXJBcnJheSksdGhpcy5fY29uZmlnLnRvZ2dsZSYmdGhpcy50b2dnbGUoKX12YXIgdD1hLnByb3RvdHlwZTtyZXR1cm4gdC50b2dnbGU9ZnVuY3Rpb24oKXtnKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKHl0KT90aGlzLmhpZGUoKTp0aGlzLnNob3coKX0sdC5zaG93PWZ1bmN0aW9uKCl7dmFyIHQsZSxuPXRoaXM7aWYoIXRoaXMuX2lzVHJhbnNpdGlvbmluZyYmIWcodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoeXQpJiYodGhpcy5fcGFyZW50JiYwPT09KHQ9W10uc2xpY2UuY2FsbCh0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChEdCkpLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2Ygbi5fY29uZmlnLnBhcmVudD90LmdldEF0dHJpYnV0ZShcImRhdGEtcGFyZW50XCIpPT09bi5fY29uZmlnLnBhcmVudDp0LmNsYXNzTGlzdC5jb250YWlucyhFdCl9KSkubGVuZ3RoJiYodD1udWxsKSwhKHQmJihlPWcodCkubm90KHRoaXMuX3NlbGVjdG9yKS5kYXRhKGR0KSkmJmUuX2lzVHJhbnNpdGlvbmluZykpKXt2YXIgaT1nLkV2ZW50KHZ0LlNIT1cpO2lmKGcodGhpcy5fZWxlbWVudCkudHJpZ2dlcihpKSwhaS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSl7dCYmKGEuX2pRdWVyeUludGVyZmFjZS5jYWxsKGcodCkubm90KHRoaXMuX3NlbGVjdG9yKSxcImhpZGVcIiksZXx8Zyh0KS5kYXRhKGR0LG51bGwpKTt2YXIgbz10aGlzLl9nZXREaW1lbnNpb24oKTtnKHRoaXMuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKEV0KS5hZGRDbGFzcyhDdCksdGhpcy5fZWxlbWVudC5zdHlsZVtvXT0wLHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGgmJmcodGhpcy5fdHJpZ2dlckFycmF5KS5yZW1vdmVDbGFzcyhUdCkuYXR0cihcImFyaWEtZXhwYW5kZWRcIiwhMCksdGhpcy5zZXRUcmFuc2l0aW9uaW5nKCEwKTt2YXIgcj1cInNjcm9sbFwiKyhvWzBdLnRvVXBwZXJDYXNlKCkrby5zbGljZSgxKSkscz1fLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO2codGhpcy5fZWxlbWVudCkub25lKF8uVFJBTlNJVElPTl9FTkQsZnVuY3Rpb24oKXtnKG4uX2VsZW1lbnQpLnJlbW92ZUNsYXNzKEN0KS5hZGRDbGFzcyhFdCkuYWRkQ2xhc3MoeXQpLG4uX2VsZW1lbnQuc3R5bGVbb109XCJcIixuLnNldFRyYW5zaXRpb25pbmcoITEpLGcobi5fZWxlbWVudCkudHJpZ2dlcih2dC5TSE9XTil9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZChzKSx0aGlzLl9lbGVtZW50LnN0eWxlW29dPXRoaXMuX2VsZW1lbnRbcl0rXCJweFwifX19LHQuaGlkZT1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYoIXRoaXMuX2lzVHJhbnNpdGlvbmluZyYmZyh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyh5dCkpe3ZhciBlPWcuRXZlbnQodnQuSElERSk7aWYoZyh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKGUpLCFlLmlzRGVmYXVsdFByZXZlbnRlZCgpKXt2YXIgbj10aGlzLl9nZXREaW1lbnNpb24oKTt0aGlzLl9lbGVtZW50LnN0eWxlW25dPXRoaXMuX2VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbbl0rXCJweFwiLF8ucmVmbG93KHRoaXMuX2VsZW1lbnQpLGcodGhpcy5fZWxlbWVudCkuYWRkQ2xhc3MoQ3QpLnJlbW92ZUNsYXNzKEV0KS5yZW1vdmVDbGFzcyh5dCk7dmFyIGk9dGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aDtpZigwPGkpZm9yKHZhciBvPTA7bzxpO28rKyl7dmFyIHI9dGhpcy5fdHJpZ2dlckFycmF5W29dLHM9Xy5nZXRTZWxlY3RvckZyb21FbGVtZW50KHIpO2lmKG51bGwhPT1zKWcoW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHMpKSkuaGFzQ2xhc3MoeXQpfHxnKHIpLmFkZENsYXNzKFR0KS5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLCExKX10aGlzLnNldFRyYW5zaXRpb25pbmcoITApO3RoaXMuX2VsZW1lbnQuc3R5bGVbbl09XCJcIjt2YXIgYT1fLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO2codGhpcy5fZWxlbWVudCkub25lKF8uVFJBTlNJVElPTl9FTkQsZnVuY3Rpb24oKXt0LnNldFRyYW5zaXRpb25pbmcoITEpLGcodC5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ3QpLmFkZENsYXNzKEV0KS50cmlnZ2VyKHZ0LkhJRERFTil9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZChhKX19fSx0LnNldFRyYW5zaXRpb25pbmc9ZnVuY3Rpb24odCl7dGhpcy5faXNUcmFuc2l0aW9uaW5nPXR9LHQuZGlzcG9zZT1mdW5jdGlvbigpe2cucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LGR0KSx0aGlzLl9jb25maWc9bnVsbCx0aGlzLl9wYXJlbnQ9bnVsbCx0aGlzLl9lbGVtZW50PW51bGwsdGhpcy5fdHJpZ2dlckFycmF5PW51bGwsdGhpcy5faXNUcmFuc2l0aW9uaW5nPW51bGx9LHQuX2dldENvbmZpZz1mdW5jdGlvbih0KXtyZXR1cm4odD1sKHt9LG10LHt9LHQpKS50b2dnbGU9Qm9vbGVhbih0LnRvZ2dsZSksXy50eXBlQ2hlY2tDb25maWcoZnQsdCxwdCksdH0sdC5fZ2V0RGltZW5zaW9uPWZ1bmN0aW9uKCl7cmV0dXJuIGcodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoYnQpP2J0OlN0fSx0Ll9nZXRQYXJlbnQ9ZnVuY3Rpb24oKXt2YXIgdCxuPXRoaXM7Xy5pc0VsZW1lbnQodGhpcy5fY29uZmlnLnBhcmVudCk/KHQ9dGhpcy5fY29uZmlnLnBhcmVudCxcInVuZGVmaW5lZFwiIT10eXBlb2YgdGhpcy5fY29uZmlnLnBhcmVudC5qcXVlcnkmJih0PXRoaXMuX2NvbmZpZy5wYXJlbnRbMF0pKTp0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fY29uZmlnLnBhcmVudCk7dmFyIGU9J1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtcGFyZW50PVwiJyt0aGlzLl9jb25maWcucGFyZW50KydcIl0nLGk9W10uc2xpY2UuY2FsbCh0LnF1ZXJ5U2VsZWN0b3JBbGwoZSkpO3JldHVybiBnKGkpLmVhY2goZnVuY3Rpb24odCxlKXtuLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoYS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQoZSksW2VdKX0pLHR9LHQuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcz1mdW5jdGlvbih0LGUpe3ZhciBuPWcodCkuaGFzQ2xhc3MoeXQpO2UubGVuZ3RoJiZnKGUpLnRvZ2dsZUNsYXNzKFR0LCFuKS5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLG4pfSxhLl9nZXRUYXJnZXRGcm9tRWxlbWVudD1mdW5jdGlvbih0KXt2YXIgZT1fLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodCk7cmV0dXJuIGU/ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKTpudWxsfSxhLl9qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24oaSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PWcodGhpcyksZT10LmRhdGEoZHQpLG49bCh7fSxtdCx7fSx0LmRhdGEoKSx7fSxcIm9iamVjdFwiPT10eXBlb2YgaSYmaT9pOnt9KTtpZighZSYmbi50b2dnbGUmJi9zaG93fGhpZGUvLnRlc3QoaSkmJihuLnRvZ2dsZT0hMSksZXx8KGU9bmV3IGEodGhpcyxuKSx0LmRhdGEoZHQsZSkpLFwic3RyaW5nXCI9PXR5cGVvZiBpKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgZVtpXSl0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInK2krJ1wiJyk7ZVtpXSgpfX0pfSxzKGEsbnVsbCxbe2tleTpcIlZFUlNJT05cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjQuNC4xXCJ9fSx7a2V5OlwiRGVmYXVsdFwiLGdldDpmdW5jdGlvbigpe3JldHVybiBtdH19XSksYX0oKTtnKGRvY3VtZW50KS5vbih2dC5DTElDS19EQVRBX0FQSSxJdCxmdW5jdGlvbih0KXtcIkFcIj09PXQuY3VycmVudFRhcmdldC50YWdOYW1lJiZ0LnByZXZlbnREZWZhdWx0KCk7dmFyIG49Zyh0aGlzKSxlPV8uZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKSxpPVtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlKSk7ZyhpKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9Zyh0aGlzKSxlPXQuZGF0YShkdCk/XCJ0b2dnbGVcIjpuLmRhdGEoKTt3dC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwodCxlKX0pfSksZy5mbltmdF09d3QuX2pRdWVyeUludGVyZmFjZSxnLmZuW2Z0XS5Db25zdHJ1Y3Rvcj13dCxnLmZuW2Z0XS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGcuZm5bZnRdPV90LHd0Ll9qUXVlcnlJbnRlcmZhY2V9O3ZhciBBdD1cImRyb3Bkb3duXCIsTnQ9XCJicy5kcm9wZG93blwiLE90PVwiLlwiK050LGt0PVwiLmRhdGEtYXBpXCIsUHQ9Zy5mbltBdF0sTHQ9bmV3IFJlZ0V4cChcIjM4fDQwfDI3XCIpLGp0PXtISURFOlwiaGlkZVwiK090LEhJRERFTjpcImhpZGRlblwiK090LFNIT1c6XCJzaG93XCIrT3QsU0hPV046XCJzaG93blwiK090LENMSUNLOlwiY2xpY2tcIitPdCxDTElDS19EQVRBX0FQSTpcImNsaWNrXCIrT3Qra3QsS0VZRE9XTl9EQVRBX0FQSTpcImtleWRvd25cIitPdCtrdCxLRVlVUF9EQVRBX0FQSTpcImtleXVwXCIrT3Qra3R9LEh0PVwiZGlzYWJsZWRcIixSdD1cInNob3dcIix4dD1cImRyb3B1cFwiLEZ0PVwiZHJvcHJpZ2h0XCIsVXQ9XCJkcm9wbGVmdFwiLFd0PVwiZHJvcGRvd24tbWVudS1yaWdodFwiLHF0PVwicG9zaXRpb24tc3RhdGljXCIsTXQ9J1tkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJdJyxLdD1cIi5kcm9wZG93biBmb3JtXCIsUXQ9XCIuZHJvcGRvd24tbWVudVwiLEJ0PVwiLm5hdmJhci1uYXZcIixWdD1cIi5kcm9wZG93bi1tZW51IC5kcm9wZG93bi1pdGVtOm5vdCguZGlzYWJsZWQpOm5vdCg6ZGlzYWJsZWQpXCIsWXQ9XCJ0b3Atc3RhcnRcIix6dD1cInRvcC1lbmRcIixYdD1cImJvdHRvbS1zdGFydFwiLCR0PVwiYm90dG9tLWVuZFwiLEd0PVwicmlnaHQtc3RhcnRcIixKdD1cImxlZnQtc3RhcnRcIixadD17b2Zmc2V0OjAsZmxpcDohMCxib3VuZGFyeTpcInNjcm9sbFBhcmVudFwiLHJlZmVyZW5jZTpcInRvZ2dsZVwiLGRpc3BsYXk6XCJkeW5hbWljXCIscG9wcGVyQ29uZmlnOm51bGx9LHRlPXtvZmZzZXQ6XCIobnVtYmVyfHN0cmluZ3xmdW5jdGlvbilcIixmbGlwOlwiYm9vbGVhblwiLGJvdW5kYXJ5OlwiKHN0cmluZ3xlbGVtZW50KVwiLHJlZmVyZW5jZTpcIihzdHJpbmd8ZWxlbWVudClcIixkaXNwbGF5Olwic3RyaW5nXCIscG9wcGVyQ29uZmlnOlwiKG51bGx8b2JqZWN0KVwifSxlZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGModCxlKXt0aGlzLl9lbGVtZW50PXQsdGhpcy5fcG9wcGVyPW51bGwsdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhlKSx0aGlzLl9tZW51PXRoaXMuX2dldE1lbnVFbGVtZW50KCksdGhpcy5faW5OYXZiYXI9dGhpcy5fZGV0ZWN0TmF2YmFyKCksdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKX12YXIgdD1jLnByb3RvdHlwZTtyZXR1cm4gdC50b2dnbGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZWxlbWVudC5kaXNhYmxlZCYmIWcodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoSHQpKXt2YXIgdD1nKHRoaXMuX21lbnUpLmhhc0NsYXNzKFJ0KTtjLl9jbGVhck1lbnVzKCksdHx8dGhpcy5zaG93KCEwKX19LHQuc2hvdz1mdW5jdGlvbih0KXtpZih2b2lkIDA9PT10JiYodD0hMSksISh0aGlzLl9lbGVtZW50LmRpc2FibGVkfHxnKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKEh0KXx8Zyh0aGlzLl9tZW51KS5oYXNDbGFzcyhSdCkpKXt2YXIgZT17cmVsYXRlZFRhcmdldDp0aGlzLl9lbGVtZW50fSxuPWcuRXZlbnQoanQuU0hPVyxlKSxpPWMuX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO2lmKGcoaSkudHJpZ2dlcihuKSwhbi5pc0RlZmF1bHRQcmV2ZW50ZWQoKSl7aWYoIXRoaXMuX2luTmF2YmFyJiZ0KXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgdSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQm9vdHN0cmFwJ3MgZHJvcGRvd25zIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcvKVwiKTt2YXIgbz10aGlzLl9lbGVtZW50O1wicGFyZW50XCI9PT10aGlzLl9jb25maWcucmVmZXJlbmNlP289aTpfLmlzRWxlbWVudCh0aGlzLl9jb25maWcucmVmZXJlbmNlKSYmKG89dGhpcy5fY29uZmlnLnJlZmVyZW5jZSxcInVuZGVmaW5lZFwiIT10eXBlb2YgdGhpcy5fY29uZmlnLnJlZmVyZW5jZS5qcXVlcnkmJihvPXRoaXMuX2NvbmZpZy5yZWZlcmVuY2VbMF0pKSxcInNjcm9sbFBhcmVudFwiIT09dGhpcy5fY29uZmlnLmJvdW5kYXJ5JiZnKGkpLmFkZENsYXNzKHF0KSx0aGlzLl9wb3BwZXI9bmV3IHUobyx0aGlzLl9tZW51LHRoaXMuX2dldFBvcHBlckNvbmZpZygpKX1cIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50JiYwPT09ZyhpKS5jbG9zZXN0KEJ0KS5sZW5ndGgmJmcoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vbihcIm1vdXNlb3ZlclwiLG51bGwsZy5ub29wKSx0aGlzLl9lbGVtZW50LmZvY3VzKCksdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsITApLGcodGhpcy5fbWVudSkudG9nZ2xlQ2xhc3MoUnQpLGcoaSkudG9nZ2xlQ2xhc3MoUnQpLnRyaWdnZXIoZy5FdmVudChqdC5TSE9XTixlKSl9fX0sdC5oaWRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2VsZW1lbnQuZGlzYWJsZWQmJiFnKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKEh0KSYmZyh0aGlzLl9tZW51KS5oYXNDbGFzcyhSdCkpe3ZhciB0PXtyZWxhdGVkVGFyZ2V0OnRoaXMuX2VsZW1lbnR9LGU9Zy5FdmVudChqdC5ISURFLHQpLG49Yy5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7ZyhuKS50cmlnZ2VyKGUpLGUuaXNEZWZhdWx0UHJldmVudGVkKCl8fCh0aGlzLl9wb3BwZXImJnRoaXMuX3BvcHBlci5kZXN0cm95KCksZyh0aGlzLl9tZW51KS50b2dnbGVDbGFzcyhSdCksZyhuKS50b2dnbGVDbGFzcyhSdCkudHJpZ2dlcihnLkV2ZW50KGp0LkhJRERFTix0KSkpfX0sdC5kaXNwb3NlPWZ1bmN0aW9uKCl7Zy5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsTnQpLGcodGhpcy5fZWxlbWVudCkub2ZmKE90KSx0aGlzLl9lbGVtZW50PW51bGwsKHRoaXMuX21lbnU9bnVsbCkhPT10aGlzLl9wb3BwZXImJih0aGlzLl9wb3BwZXIuZGVzdHJveSgpLHRoaXMuX3BvcHBlcj1udWxsKX0sdC51cGRhdGU9ZnVuY3Rpb24oKXt0aGlzLl9pbk5hdmJhcj10aGlzLl9kZXRlY3ROYXZiYXIoKSxudWxsIT09dGhpcy5fcG9wcGVyJiZ0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKX0sdC5fYWRkRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2codGhpcy5fZWxlbWVudCkub24oanQuQ0xJQ0ssZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLHQuc3RvcFByb3BhZ2F0aW9uKCksZS50b2dnbGUoKX0pfSx0Ll9nZXRDb25maWc9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9bCh7fSx0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQse30sZyh0aGlzLl9lbGVtZW50KS5kYXRhKCkse30sdCksXy50eXBlQ2hlY2tDb25maWcoQXQsdCx0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKSx0fSx0Ll9nZXRNZW51RWxlbWVudD1mdW5jdGlvbigpe2lmKCF0aGlzLl9tZW51KXt2YXIgdD1jLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTt0JiYodGhpcy5fbWVudT10LnF1ZXJ5U2VsZWN0b3IoUXQpKX1yZXR1cm4gdGhpcy5fbWVudX0sdC5fZ2V0UGxhY2VtZW50PWZ1bmN0aW9uKCl7dmFyIHQ9Zyh0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUpLGU9WHQ7cmV0dXJuIHQuaGFzQ2xhc3MoeHQpPyhlPVl0LGcodGhpcy5fbWVudSkuaGFzQ2xhc3MoV3QpJiYoZT16dCkpOnQuaGFzQ2xhc3MoRnQpP2U9R3Q6dC5oYXNDbGFzcyhVdCk/ZT1KdDpnKHRoaXMuX21lbnUpLmhhc0NsYXNzKFd0KSYmKGU9JHQpLGV9LHQuX2RldGVjdE5hdmJhcj1mdW5jdGlvbigpe3JldHVybiAwPGcodGhpcy5fZWxlbWVudCkuY2xvc2VzdChcIi5uYXZiYXJcIikubGVuZ3RofSx0Ll9nZXRPZmZzZXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9e307cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5fY29uZmlnLm9mZnNldD90LmZuPWZ1bmN0aW9uKHQpe3JldHVybiB0Lm9mZnNldHM9bCh7fSx0Lm9mZnNldHMse30sZS5fY29uZmlnLm9mZnNldCh0Lm9mZnNldHMsZS5fZWxlbWVudCl8fHt9KSx0fTp0Lm9mZnNldD10aGlzLl9jb25maWcub2Zmc2V0LHR9LHQuX2dldFBvcHBlckNvbmZpZz1mdW5jdGlvbigpe3ZhciB0PXtwbGFjZW1lbnQ6dGhpcy5fZ2V0UGxhY2VtZW50KCksbW9kaWZpZXJzOntvZmZzZXQ6dGhpcy5fZ2V0T2Zmc2V0KCksZmxpcDp7ZW5hYmxlZDp0aGlzLl9jb25maWcuZmxpcH0scHJldmVudE92ZXJmbG93Ontib3VuZGFyaWVzRWxlbWVudDp0aGlzLl9jb25maWcuYm91bmRhcnl9fX07cmV0dXJuXCJzdGF0aWNcIj09PXRoaXMuX2NvbmZpZy5kaXNwbGF5JiYodC5tb2RpZmllcnMuYXBwbHlTdHlsZT17ZW5hYmxlZDohMX0pLGwoe30sdCx7fSx0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnKX0sYy5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1nKHRoaXMpLmRhdGEoTnQpO2lmKHR8fCh0PW5ldyBjKHRoaXMsXCJvYmplY3RcIj09dHlwZW9mIGU/ZTpudWxsKSxnKHRoaXMpLmRhdGEoTnQsdCkpLFwic3RyaW5nXCI9PXR5cGVvZiBlKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgdFtlXSl0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInK2UrJ1wiJyk7dFtlXSgpfX0pfSxjLl9jbGVhck1lbnVzPWZ1bmN0aW9uKHQpe2lmKCF0fHwzIT09dC53aGljaCYmKFwia2V5dXBcIiE9PXQudHlwZXx8OT09PXQud2hpY2gpKWZvcih2YXIgZT1bXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoTXQpKSxuPTAsaT1lLmxlbmd0aDtuPGk7bisrKXt2YXIgbz1jLl9nZXRQYXJlbnRGcm9tRWxlbWVudChlW25dKSxyPWcoZVtuXSkuZGF0YShOdCkscz17cmVsYXRlZFRhcmdldDplW25dfTtpZih0JiZcImNsaWNrXCI9PT10LnR5cGUmJihzLmNsaWNrRXZlbnQ9dCkscil7dmFyIGE9ci5fbWVudTtpZihnKG8pLmhhc0NsYXNzKFJ0KSYmISh0JiYoXCJjbGlja1wiPT09dC50eXBlJiYvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KHQudGFyZ2V0LnRhZ05hbWUpfHxcImtleXVwXCI9PT10LnR5cGUmJjk9PT10LndoaWNoKSYmZy5jb250YWlucyhvLHQudGFyZ2V0KSkpe3ZhciBsPWcuRXZlbnQoanQuSElERSxzKTtnKG8pLnRyaWdnZXIobCksbC5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8KFwib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQmJmcoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vZmYoXCJtb3VzZW92ZXJcIixudWxsLGcubm9vcCksZVtuXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsXCJmYWxzZVwiKSxyLl9wb3BwZXImJnIuX3BvcHBlci5kZXN0cm95KCksZyhhKS5yZW1vdmVDbGFzcyhSdCksZyhvKS5yZW1vdmVDbGFzcyhSdCkudHJpZ2dlcihnLkV2ZW50KGp0LkhJRERFTixzKSkpfX19fSxjLl9nZXRQYXJlbnRGcm9tRWxlbWVudD1mdW5jdGlvbih0KXt2YXIgZSxuPV8uZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0KTtyZXR1cm4gbiYmKGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihuKSksZXx8dC5wYXJlbnROb2RlfSxjLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXI9ZnVuY3Rpb24odCl7aWYoKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QodC50YXJnZXQudGFnTmFtZSk/ISgzMj09PXQud2hpY2h8fDI3IT09dC53aGljaCYmKDQwIT09dC53aGljaCYmMzghPT10LndoaWNofHxnKHQudGFyZ2V0KS5jbG9zZXN0KFF0KS5sZW5ndGgpKTpMdC50ZXN0KHQud2hpY2gpKSYmKHQucHJldmVudERlZmF1bHQoKSx0LnN0b3BQcm9wYWdhdGlvbigpLCF0aGlzLmRpc2FibGVkJiYhZyh0aGlzKS5oYXNDbGFzcyhIdCkpKXt2YXIgZT1jLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzKSxuPWcoZSkuaGFzQ2xhc3MoUnQpO2lmKG58fDI3IT09dC53aGljaClpZihuJiYoIW58fDI3IT09dC53aGljaCYmMzIhPT10LndoaWNoKSl7dmFyIGk9W10uc2xpY2UuY2FsbChlLnF1ZXJ5U2VsZWN0b3JBbGwoVnQpKS5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIGcodCkuaXMoXCI6dmlzaWJsZVwiKX0pO2lmKDAhPT1pLmxlbmd0aCl7dmFyIG89aS5pbmRleE9mKHQudGFyZ2V0KTszOD09PXQud2hpY2gmJjA8byYmby0tLDQwPT09dC53aGljaCYmbzxpLmxlbmd0aC0xJiZvKyssbzwwJiYobz0wKSxpW29dLmZvY3VzKCl9fWVsc2V7aWYoMjc9PT10LndoaWNoKXt2YXIgcj1lLnF1ZXJ5U2VsZWN0b3IoTXQpO2cocikudHJpZ2dlcihcImZvY3VzXCIpfWcodGhpcykudHJpZ2dlcihcImNsaWNrXCIpfX19LHMoYyxudWxsLFt7a2V5OlwiVkVSU0lPTlwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiNC40LjFcIn19LHtrZXk6XCJEZWZhdWx0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFp0fX0se2tleTpcIkRlZmF1bHRUeXBlXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRlfX1dKSxjfSgpO2coZG9jdW1lbnQpLm9uKGp0LktFWURPV05fREFUQV9BUEksTXQsZWUuX2RhdGFBcGlLZXlkb3duSGFuZGxlcikub24oanQuS0VZRE9XTl9EQVRBX0FQSSxRdCxlZS5fZGF0YUFwaUtleWRvd25IYW5kbGVyKS5vbihqdC5DTElDS19EQVRBX0FQSStcIiBcIitqdC5LRVlVUF9EQVRBX0FQSSxlZS5fY2xlYXJNZW51cykub24oanQuQ0xJQ0tfREFUQV9BUEksTXQsZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLHQuc3RvcFByb3BhZ2F0aW9uKCksZWUuX2pRdWVyeUludGVyZmFjZS5jYWxsKGcodGhpcyksXCJ0b2dnbGVcIil9KS5vbihqdC5DTElDS19EQVRBX0FQSSxLdCxmdW5jdGlvbih0KXt0LnN0b3BQcm9wYWdhdGlvbigpfSksZy5mbltBdF09ZWUuX2pRdWVyeUludGVyZmFjZSxnLmZuW0F0XS5Db25zdHJ1Y3Rvcj1lZSxnLmZuW0F0XS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGcuZm5bQXRdPVB0LGVlLl9qUXVlcnlJbnRlcmZhY2V9O3ZhciBuZT1cIm1vZGFsXCIsaWU9XCJicy5tb2RhbFwiLG9lPVwiLlwiK2llLHJlPWcuZm5bbmVdLHNlPXtiYWNrZHJvcDohMCxrZXlib2FyZDohMCxmb2N1czohMCxzaG93OiEwfSxhZT17YmFja2Ryb3A6XCIoYm9vbGVhbnxzdHJpbmcpXCIsa2V5Ym9hcmQ6XCJib29sZWFuXCIsZm9jdXM6XCJib29sZWFuXCIsc2hvdzpcImJvb2xlYW5cIn0sbGU9e0hJREU6XCJoaWRlXCIrb2UsSElERV9QUkVWRU5URUQ6XCJoaWRlUHJldmVudGVkXCIrb2UsSElEREVOOlwiaGlkZGVuXCIrb2UsU0hPVzpcInNob3dcIitvZSxTSE9XTjpcInNob3duXCIrb2UsRk9DVVNJTjpcImZvY3VzaW5cIitvZSxSRVNJWkU6XCJyZXNpemVcIitvZSxDTElDS19ESVNNSVNTOlwiY2xpY2suZGlzbWlzc1wiK29lLEtFWURPV05fRElTTUlTUzpcImtleWRvd24uZGlzbWlzc1wiK29lLE1PVVNFVVBfRElTTUlTUzpcIm1vdXNldXAuZGlzbWlzc1wiK29lLE1PVVNFRE9XTl9ESVNNSVNTOlwibW91c2Vkb3duLmRpc21pc3NcIitvZSxDTElDS19EQVRBX0FQSTpcImNsaWNrXCIrb2UrXCIuZGF0YS1hcGlcIn0sY2U9XCJtb2RhbC1kaWFsb2ctc2Nyb2xsYWJsZVwiLGhlPVwibW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmVcIix1ZT1cIm1vZGFsLWJhY2tkcm9wXCIsZmU9XCJtb2RhbC1vcGVuXCIsZGU9XCJmYWRlXCIsZ2U9XCJzaG93XCIsX2U9XCJtb2RhbC1zdGF0aWNcIixtZT1cIi5tb2RhbC1kaWFsb2dcIixwZT1cIi5tb2RhbC1ib2R5XCIsdmU9J1tkYXRhLXRvZ2dsZT1cIm1vZGFsXCJdJyx5ZT0nW2RhdGEtZGlzbWlzcz1cIm1vZGFsXCJdJyxFZT1cIi5maXhlZC10b3AsIC5maXhlZC1ib3R0b20sIC5pcy1maXhlZCwgLnN0aWNreS10b3BcIixDZT1cIi5zdGlja3ktdG9wXCIsVGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBvKHQsZSl7dGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhlKSx0aGlzLl9lbGVtZW50PXQsdGhpcy5fZGlhbG9nPXQucXVlcnlTZWxlY3RvcihtZSksdGhpcy5fYmFja2Ryb3A9bnVsbCx0aGlzLl9pc1Nob3duPSExLHRoaXMuX2lzQm9keU92ZXJmbG93aW5nPSExLHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2s9ITEsdGhpcy5faXNUcmFuc2l0aW9uaW5nPSExLHRoaXMuX3Njcm9sbGJhcldpZHRoPTB9dmFyIHQ9by5wcm90b3R5cGU7cmV0dXJuIHQudG9nZ2xlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9pc1Nob3duP3RoaXMuaGlkZSgpOnRoaXMuc2hvdyh0KX0sdC5zaG93PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7aWYoIXRoaXMuX2lzU2hvd24mJiF0aGlzLl9pc1RyYW5zaXRpb25pbmcpe2codGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoZGUpJiYodGhpcy5faXNUcmFuc2l0aW9uaW5nPSEwKTt2YXIgbj1nLkV2ZW50KGxlLlNIT1cse3JlbGF0ZWRUYXJnZXQ6dH0pO2codGhpcy5fZWxlbWVudCkudHJpZ2dlcihuKSx0aGlzLl9pc1Nob3dufHxuLmlzRGVmYXVsdFByZXZlbnRlZCgpfHwodGhpcy5faXNTaG93bj0hMCx0aGlzLl9jaGVja1Njcm9sbGJhcigpLHRoaXMuX3NldFNjcm9sbGJhcigpLHRoaXMuX2FkanVzdERpYWxvZygpLHRoaXMuX3NldEVzY2FwZUV2ZW50KCksdGhpcy5fc2V0UmVzaXplRXZlbnQoKSxnKHRoaXMuX2VsZW1lbnQpLm9uKGxlLkNMSUNLX0RJU01JU1MseWUsZnVuY3Rpb24odCl7cmV0dXJuIGUuaGlkZSh0KX0pLGcodGhpcy5fZGlhbG9nKS5vbihsZS5NT1VTRURPV05fRElTTUlTUyxmdW5jdGlvbigpe2coZS5fZWxlbWVudCkub25lKGxlLk1PVVNFVVBfRElTTUlTUyxmdW5jdGlvbih0KXtnKHQudGFyZ2V0KS5pcyhlLl9lbGVtZW50KSYmKGUuX2lnbm9yZUJhY2tkcm9wQ2xpY2s9ITApfSl9KSx0aGlzLl9zaG93QmFja2Ryb3AoZnVuY3Rpb24oKXtyZXR1cm4gZS5fc2hvd0VsZW1lbnQodCl9KSl9fSx0LmhpZGU9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztpZih0JiZ0LnByZXZlbnREZWZhdWx0KCksdGhpcy5faXNTaG93biYmIXRoaXMuX2lzVHJhbnNpdGlvbmluZyl7dmFyIG49Zy5FdmVudChsZS5ISURFKTtpZihnKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIobiksdGhpcy5faXNTaG93biYmIW4uaXNEZWZhdWx0UHJldmVudGVkKCkpe3RoaXMuX2lzU2hvd249ITE7dmFyIGk9Zyh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhkZSk7aWYoaSYmKHRoaXMuX2lzVHJhbnNpdGlvbmluZz0hMCksdGhpcy5fc2V0RXNjYXBlRXZlbnQoKSx0aGlzLl9zZXRSZXNpemVFdmVudCgpLGcoZG9jdW1lbnQpLm9mZihsZS5GT0NVU0lOKSxnKHRoaXMuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKGdlKSxnKHRoaXMuX2VsZW1lbnQpLm9mZihsZS5DTElDS19ESVNNSVNTKSxnKHRoaXMuX2RpYWxvZykub2ZmKGxlLk1PVVNFRE9XTl9ESVNNSVNTKSxpKXt2YXIgbz1fLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO2codGhpcy5fZWxlbWVudCkub25lKF8uVFJBTlNJVElPTl9FTkQsZnVuY3Rpb24odCl7cmV0dXJuIGUuX2hpZGVNb2RhbCh0KX0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKG8pfWVsc2UgdGhpcy5faGlkZU1vZGFsKCl9fX0sdC5kaXNwb3NlPWZ1bmN0aW9uKCl7W3dpbmRvdyx0aGlzLl9lbGVtZW50LHRoaXMuX2RpYWxvZ10uZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gZyh0KS5vZmYob2UpfSksZyhkb2N1bWVudCkub2ZmKGxlLkZPQ1VTSU4pLGcucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LGllKSx0aGlzLl9jb25maWc9bnVsbCx0aGlzLl9lbGVtZW50PW51bGwsdGhpcy5fZGlhbG9nPW51bGwsdGhpcy5fYmFja2Ryb3A9bnVsbCx0aGlzLl9pc1Nob3duPW51bGwsdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmc9bnVsbCx0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrPW51bGwsdGhpcy5faXNUcmFuc2l0aW9uaW5nPW51bGwsdGhpcy5fc2Nyb2xsYmFyV2lkdGg9bnVsbH0sdC5oYW5kbGVVcGRhdGU9ZnVuY3Rpb24oKXt0aGlzLl9hZGp1c3REaWFsb2coKX0sdC5fZ2V0Q29uZmlnPWZ1bmN0aW9uKHQpe3JldHVybiB0PWwoe30sc2Use30sdCksXy50eXBlQ2hlY2tDb25maWcobmUsdCxhZSksdH0sdC5fdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbj1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYoXCJzdGF0aWNcIj09PXRoaXMuX2NvbmZpZy5iYWNrZHJvcCl7dmFyIGU9Zy5FdmVudChsZS5ISURFX1BSRVZFTlRFRCk7aWYoZyh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKGUpLGUuZGVmYXVsdFByZXZlbnRlZClyZXR1cm47dGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKF9lKTt2YXIgbj1fLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO2codGhpcy5fZWxlbWVudCkub25lKF8uVFJBTlNJVElPTl9FTkQsZnVuY3Rpb24oKXt0Ll9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoX2UpfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQobiksdGhpcy5fZWxlbWVudC5mb2N1cygpfWVsc2UgdGhpcy5oaWRlKCl9LHQuX3Nob3dFbGVtZW50PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj1nKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKGRlKSxpPXRoaXMuX2RpYWxvZz90aGlzLl9kaWFsb2cucXVlcnlTZWxlY3RvcihwZSk6bnVsbDt0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUmJnRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFfHxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2VsZW1lbnQpLHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheT1cImJsb2NrXCIsdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiKSx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtbW9kYWxcIiwhMCksZyh0aGlzLl9kaWFsb2cpLmhhc0NsYXNzKGNlKSYmaT9pLnNjcm9sbFRvcD0wOnRoaXMuX2VsZW1lbnQuc2Nyb2xsVG9wPTAsbiYmXy5yZWZsb3codGhpcy5fZWxlbWVudCksZyh0aGlzLl9lbGVtZW50KS5hZGRDbGFzcyhnZSksdGhpcy5fY29uZmlnLmZvY3VzJiZ0aGlzLl9lbmZvcmNlRm9jdXMoKTtmdW5jdGlvbiBvKCl7ZS5fY29uZmlnLmZvY3VzJiZlLl9lbGVtZW50LmZvY3VzKCksZS5faXNUcmFuc2l0aW9uaW5nPSExLGcoZS5fZWxlbWVudCkudHJpZ2dlcihyKX12YXIgcj1nLkV2ZW50KGxlLlNIT1dOLHtyZWxhdGVkVGFyZ2V0OnR9KTtpZihuKXt2YXIgcz1fLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2RpYWxvZyk7Zyh0aGlzLl9kaWFsb2cpLm9uZShfLlRSQU5TSVRJT05fRU5ELG8pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHMpfWVsc2UgbygpfSx0Ll9lbmZvcmNlRm9jdXM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2coZG9jdW1lbnQpLm9mZihsZS5GT0NVU0lOKS5vbihsZS5GT0NVU0lOLGZ1bmN0aW9uKHQpe2RvY3VtZW50IT09dC50YXJnZXQmJmUuX2VsZW1lbnQhPT10LnRhcmdldCYmMD09PWcoZS5fZWxlbWVudCkuaGFzKHQudGFyZ2V0KS5sZW5ndGgmJmUuX2VsZW1lbnQuZm9jdXMoKX0pfSx0Ll9zZXRFc2NhcGVFdmVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5faXNTaG93biYmdGhpcy5fY29uZmlnLmtleWJvYXJkP2codGhpcy5fZWxlbWVudCkub24obGUuS0VZRE9XTl9ESVNNSVNTLGZ1bmN0aW9uKHQpezI3PT09dC53aGljaCYmZS5fdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbigpfSk6dGhpcy5faXNTaG93bnx8Zyh0aGlzLl9lbGVtZW50KS5vZmYobGUuS0VZRE9XTl9ESVNNSVNTKX0sdC5fc2V0UmVzaXplRXZlbnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuX2lzU2hvd24/Zyh3aW5kb3cpLm9uKGxlLlJFU0laRSxmdW5jdGlvbih0KXtyZXR1cm4gZS5oYW5kbGVVcGRhdGUodCl9KTpnKHdpbmRvdykub2ZmKGxlLlJFU0laRSl9LHQuX2hpZGVNb2RhbD1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwhMCksdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLW1vZGFsXCIpLHRoaXMuX2lzVHJhbnNpdGlvbmluZz0hMSx0aGlzLl9zaG93QmFja2Ryb3AoZnVuY3Rpb24oKXtnKGRvY3VtZW50LmJvZHkpLnJlbW92ZUNsYXNzKGZlKSx0Ll9yZXNldEFkanVzdG1lbnRzKCksdC5fcmVzZXRTY3JvbGxiYXIoKSxnKHQuX2VsZW1lbnQpLnRyaWdnZXIobGUuSElEREVOKX0pfSx0Ll9yZW1vdmVCYWNrZHJvcD1mdW5jdGlvbigpe3RoaXMuX2JhY2tkcm9wJiYoZyh0aGlzLl9iYWNrZHJvcCkucmVtb3ZlKCksdGhpcy5fYmFja2Ryb3A9bnVsbCl9LHQuX3Nob3dCYWNrZHJvcD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLG49Zyh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhkZSk/ZGU6XCJcIjtpZih0aGlzLl9pc1Nob3duJiZ0aGlzLl9jb25maWcuYmFja2Ryb3Ape2lmKHRoaXMuX2JhY2tkcm9wPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5fYmFja2Ryb3AuY2xhc3NOYW1lPXVlLG4mJnRoaXMuX2JhY2tkcm9wLmNsYXNzTGlzdC5hZGQobiksZyh0aGlzLl9iYWNrZHJvcCkuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSksZyh0aGlzLl9lbGVtZW50KS5vbihsZS5DTElDS19ESVNNSVNTLGZ1bmN0aW9uKHQpe2UuX2lnbm9yZUJhY2tkcm9wQ2xpY2s/ZS5faWdub3JlQmFja2Ryb3BDbGljaz0hMTp0LnRhcmdldD09PXQuY3VycmVudFRhcmdldCYmZS5fdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbigpfSksbiYmXy5yZWZsb3codGhpcy5fYmFja2Ryb3ApLGcodGhpcy5fYmFja2Ryb3ApLmFkZENsYXNzKGdlKSwhdClyZXR1cm47aWYoIW4pcmV0dXJuIHZvaWQgdCgpO3ZhciBpPV8uZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fYmFja2Ryb3ApO2codGhpcy5fYmFja2Ryb3ApLm9uZShfLlRSQU5TSVRJT05fRU5ELHQpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGkpfWVsc2UgaWYoIXRoaXMuX2lzU2hvd24mJnRoaXMuX2JhY2tkcm9wKXtnKHRoaXMuX2JhY2tkcm9wKS5yZW1vdmVDbGFzcyhnZSk7dmFyIG89ZnVuY3Rpb24oKXtlLl9yZW1vdmVCYWNrZHJvcCgpLHQmJnQoKX07aWYoZyh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhkZSkpe3ZhciByPV8uZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fYmFja2Ryb3ApO2codGhpcy5fYmFja2Ryb3ApLm9uZShfLlRSQU5TSVRJT05fRU5ELG8pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHIpfWVsc2UgbygpfWVsc2UgdCYmdCgpfSx0Ll9hZGp1c3REaWFsb2c9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodD5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0OyF0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyYmdCYmKHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQ9dGhpcy5fc2Nyb2xsYmFyV2lkdGgrXCJweFwiKSx0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyYmIXQmJih0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodD10aGlzLl9zY3JvbGxiYXJXaWR0aCtcInB4XCIpfSx0Ll9yZXNldEFkanVzdG1lbnRzPWZ1bmN0aW9uKCl7dGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdD1cIlwiLHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0PVwiXCJ9LHQuX2NoZWNrU2Nyb2xsYmFyPWZ1bmN0aW9uKCl7dmFyIHQ9ZG9jdW1lbnQuYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTt0aGlzLl9pc0JvZHlPdmVyZmxvd2luZz10LmxlZnQrdC5yaWdodDx3aW5kb3cuaW5uZXJXaWR0aCx0aGlzLl9zY3JvbGxiYXJXaWR0aD10aGlzLl9nZXRTY3JvbGxiYXJXaWR0aCgpfSx0Ll9zZXRTY3JvbGxiYXI9ZnVuY3Rpb24oKXt2YXIgbz10aGlzO2lmKHRoaXMuX2lzQm9keU92ZXJmbG93aW5nKXt2YXIgdD1bXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoRWUpKSxlPVtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChDZSkpO2codCkuZWFjaChmdW5jdGlvbih0LGUpe3ZhciBuPWUuc3R5bGUucGFkZGluZ1JpZ2h0LGk9ZyhlKS5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIpO2coZSkuZGF0YShcInBhZGRpbmctcmlnaHRcIixuKS5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIscGFyc2VGbG9hdChpKStvLl9zY3JvbGxiYXJXaWR0aCtcInB4XCIpfSksZyhlKS5lYWNoKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZS5zdHlsZS5tYXJnaW5SaWdodCxpPWcoZSkuY3NzKFwibWFyZ2luLXJpZ2h0XCIpO2coZSkuZGF0YShcIm1hcmdpbi1yaWdodFwiLG4pLmNzcyhcIm1hcmdpbi1yaWdodFwiLHBhcnNlRmxvYXQoaSktby5fc2Nyb2xsYmFyV2lkdGgrXCJweFwiKX0pO3ZhciBuPWRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0LGk9Zyhkb2N1bWVudC5ib2R5KS5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIpO2coZG9jdW1lbnQuYm9keSkuZGF0YShcInBhZGRpbmctcmlnaHRcIixuKS5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIscGFyc2VGbG9hdChpKSt0aGlzLl9zY3JvbGxiYXJXaWR0aCtcInB4XCIpfWcoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoZmUpfSx0Ll9yZXNldFNjcm9sbGJhcj1mdW5jdGlvbigpe3ZhciB0PVtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChFZSkpO2codCkuZWFjaChmdW5jdGlvbih0LGUpe3ZhciBuPWcoZSkuZGF0YShcInBhZGRpbmctcmlnaHRcIik7ZyhlKS5yZW1vdmVEYXRhKFwicGFkZGluZy1yaWdodFwiKSxlLnN0eWxlLnBhZGRpbmdSaWdodD1ufHxcIlwifSk7dmFyIGU9W10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiXCIrQ2UpKTtnKGUpLmVhY2goZnVuY3Rpb24odCxlKXt2YXIgbj1nKGUpLmRhdGEoXCJtYXJnaW4tcmlnaHRcIik7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG4mJmcoZSkuY3NzKFwibWFyZ2luLXJpZ2h0XCIsbikucmVtb3ZlRGF0YShcIm1hcmdpbi1yaWdodFwiKX0pO3ZhciBuPWcoZG9jdW1lbnQuYm9keSkuZGF0YShcInBhZGRpbmctcmlnaHRcIik7Zyhkb2N1bWVudC5ib2R5KS5yZW1vdmVEYXRhKFwicGFkZGluZy1yaWdodFwiKSxkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodD1ufHxcIlwifSx0Ll9nZXRTY3JvbGxiYXJXaWR0aD1mdW5jdGlvbigpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7dC5jbGFzc05hbWU9aGUsZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0KTt2YXIgZT10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoLXQuY2xpZW50V2lkdGg7cmV0dXJuIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodCksZX0sby5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKG4saSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PWcodGhpcykuZGF0YShpZSksZT1sKHt9LHNlLHt9LGcodGhpcykuZGF0YSgpLHt9LFwib2JqZWN0XCI9PXR5cGVvZiBuJiZuP246e30pO2lmKHR8fCh0PW5ldyBvKHRoaXMsZSksZyh0aGlzKS5kYXRhKGllLHQpKSxcInN0cmluZ1wiPT10eXBlb2Ygbil7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHRbbl0pdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJytuKydcIicpO3Rbbl0oaSl9ZWxzZSBlLnNob3cmJnQuc2hvdyhpKX0pfSxzKG8sbnVsbCxbe2tleTpcIlZFUlNJT05cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjQuNC4xXCJ9fSx7a2V5OlwiRGVmYXVsdFwiLGdldDpmdW5jdGlvbigpe3JldHVybiBzZX19XSksb30oKTtnKGRvY3VtZW50KS5vbihsZS5DTElDS19EQVRBX0FQSSx2ZSxmdW5jdGlvbih0KXt2YXIgZSxuPXRoaXMsaT1fLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7aSYmKGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihpKSk7dmFyIG89ZyhlKS5kYXRhKGllKT9cInRvZ2dsZVwiOmwoe30sZyhlKS5kYXRhKCkse30sZyh0aGlzKS5kYXRhKCkpO1wiQVwiIT09dGhpcy50YWdOYW1lJiZcIkFSRUFcIiE9PXRoaXMudGFnTmFtZXx8dC5wcmV2ZW50RGVmYXVsdCgpO3ZhciByPWcoZSkub25lKGxlLlNIT1csZnVuY3Rpb24odCl7dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8ci5vbmUobGUuSElEREVOLGZ1bmN0aW9uKCl7ZyhuKS5pcyhcIjp2aXNpYmxlXCIpJiZuLmZvY3VzKCl9KX0pO1RlLl9qUXVlcnlJbnRlcmZhY2UuY2FsbChnKGUpLG8sdGhpcyl9KSxnLmZuW25lXT1UZS5falF1ZXJ5SW50ZXJmYWNlLGcuZm5bbmVdLkNvbnN0cnVjdG9yPVRlLGcuZm5bbmVdLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gZy5mbltuZV09cmUsVGUuX2pRdWVyeUludGVyZmFjZX07dmFyIGJlPVtcImJhY2tncm91bmRcIixcImNpdGVcIixcImhyZWZcIixcIml0ZW10eXBlXCIsXCJsb25nZGVzY1wiLFwicG9zdGVyXCIsXCJzcmNcIixcInhsaW5rOmhyZWZcIl0sU2U9e1wiKlwiOltcImNsYXNzXCIsXCJkaXJcIixcImlkXCIsXCJsYW5nXCIsXCJyb2xlXCIsL15hcmlhLVtcXHctXSokL2ldLGE6W1widGFyZ2V0XCIsXCJocmVmXCIsXCJ0aXRsZVwiLFwicmVsXCJdLGFyZWE6W10sYjpbXSxicjpbXSxjb2w6W10sY29kZTpbXSxkaXY6W10sZW06W10saHI6W10saDE6W10saDI6W10saDM6W10saDQ6W10saDU6W10saDY6W10saTpbXSxpbWc6W1wic3JjXCIsXCJhbHRcIixcInRpdGxlXCIsXCJ3aWR0aFwiLFwiaGVpZ2h0XCJdLGxpOltdLG9sOltdLHA6W10scHJlOltdLHM6W10sc21hbGw6W10sc3BhbjpbXSxzdWI6W10sc3VwOltdLHN0cm9uZzpbXSx1OltdLHVsOltdfSxEZT0vXig/Oig/Omh0dHBzP3xtYWlsdG98ZnRwfHRlbHxmaWxlKTp8W14mOi8/I10qKD86Wy8/I118JCkpL2dpLEllPS9eZGF0YTooPzppbWFnZVxcLyg/OmJtcHxnaWZ8anBlZ3xqcGd8cG5nfHRpZmZ8d2VicCl8dmlkZW9cXC8oPzptcGVnfG1wNHxvZ2d8d2VibSl8YXVkaW9cXC8oPzptcDN8b2dhfG9nZ3xvcHVzKSk7YmFzZTY0LFthLXowLTkrL10rPSokL2k7ZnVuY3Rpb24gd2UodCxyLGUpe2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gdDtpZihlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKXJldHVybiBlKHQpO2Zvcih2YXIgbj0obmV3IHdpbmRvdy5ET01QYXJzZXIpLnBhcnNlRnJvbVN0cmluZyh0LFwidGV4dC9odG1sXCIpLHM9T2JqZWN0LmtleXMociksYT1bXS5zbGljZS5jYWxsKG4uYm9keS5xdWVyeVNlbGVjdG9yQWxsKFwiKlwiKSksaT1mdW5jdGlvbih0KXt2YXIgZT1hW3RdLG49ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKC0xPT09cy5pbmRleE9mKGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkpcmV0dXJuIGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKSxcImNvbnRpbnVlXCI7dmFyIGk9W10uc2xpY2UuY2FsbChlLmF0dHJpYnV0ZXMpLG89W10uY29uY2F0KHJbXCIqXCJdfHxbXSxyW25dfHxbXSk7aS5mb3JFYWNoKGZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe3ZhciBuPXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZigtMSE9PWUuaW5kZXhPZihuKSlyZXR1cm4tMT09PWJlLmluZGV4T2Yobil8fEJvb2xlYW4odC5ub2RlVmFsdWUubWF0Y2goRGUpfHx0Lm5vZGVWYWx1ZS5tYXRjaChJZSkpO2Zvcih2YXIgaT1lLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIFJlZ0V4cH0pLG89MCxyPWkubGVuZ3RoO288cjtvKyspaWYobi5tYXRjaChpW29dKSlyZXR1cm4hMDtyZXR1cm4hMX0odCxvKSYmZS5yZW1vdmVBdHRyaWJ1dGUodC5ub2RlTmFtZSl9KX0sbz0wLGw9YS5sZW5ndGg7bzxsO28rKylpKG8pO3JldHVybiBuLmJvZHkuaW5uZXJIVE1MfXZhciBBZT1cInRvb2x0aXBcIixOZT1cImJzLnRvb2x0aXBcIixPZT1cIi5cIitOZSxrZT1nLmZuW0FlXSxQZT1cImJzLXRvb2x0aXBcIixMZT1uZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIrUGUrXCJcXFxcUytcIixcImdcIiksamU9W1wic2FuaXRpemVcIixcIndoaXRlTGlzdFwiLFwic2FuaXRpemVGblwiXSxIZT17YW5pbWF0aW9uOlwiYm9vbGVhblwiLHRlbXBsYXRlOlwic3RyaW5nXCIsdGl0bGU6XCIoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pXCIsdHJpZ2dlcjpcInN0cmluZ1wiLGRlbGF5OlwiKG51bWJlcnxvYmplY3QpXCIsaHRtbDpcImJvb2xlYW5cIixzZWxlY3RvcjpcIihzdHJpbmd8Ym9vbGVhbilcIixwbGFjZW1lbnQ6XCIoc3RyaW5nfGZ1bmN0aW9uKVwiLG9mZnNldDpcIihudW1iZXJ8c3RyaW5nfGZ1bmN0aW9uKVwiLGNvbnRhaW5lcjpcIihzdHJpbmd8ZWxlbWVudHxib29sZWFuKVwiLGZhbGxiYWNrUGxhY2VtZW50OlwiKHN0cmluZ3xhcnJheSlcIixib3VuZGFyeTpcIihzdHJpbmd8ZWxlbWVudClcIixzYW5pdGl6ZTpcImJvb2xlYW5cIixzYW5pdGl6ZUZuOlwiKG51bGx8ZnVuY3Rpb24pXCIsd2hpdGVMaXN0Olwib2JqZWN0XCIscG9wcGVyQ29uZmlnOlwiKG51bGx8b2JqZWN0KVwifSxSZT17QVVUTzpcImF1dG9cIixUT1A6XCJ0b3BcIixSSUdIVDpcInJpZ2h0XCIsQk9UVE9NOlwiYm90dG9tXCIsTEVGVDpcImxlZnRcIn0seGU9e2FuaW1hdGlvbjohMCx0ZW1wbGF0ZTonPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPjxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+Jyx0cmlnZ2VyOlwiaG92ZXIgZm9jdXNcIix0aXRsZTpcIlwiLGRlbGF5OjAsaHRtbDohMSxzZWxlY3RvcjohMSxwbGFjZW1lbnQ6XCJ0b3BcIixvZmZzZXQ6MCxjb250YWluZXI6ITEsZmFsbGJhY2tQbGFjZW1lbnQ6XCJmbGlwXCIsYm91bmRhcnk6XCJzY3JvbGxQYXJlbnRcIixzYW5pdGl6ZTohMCxzYW5pdGl6ZUZuOm51bGwsd2hpdGVMaXN0OlNlLHBvcHBlckNvbmZpZzpudWxsfSxGZT1cInNob3dcIixVZT1cIm91dFwiLFdlPXtISURFOlwiaGlkZVwiK09lLEhJRERFTjpcImhpZGRlblwiK09lLFNIT1c6XCJzaG93XCIrT2UsU0hPV046XCJzaG93blwiK09lLElOU0VSVEVEOlwiaW5zZXJ0ZWRcIitPZSxDTElDSzpcImNsaWNrXCIrT2UsRk9DVVNJTjpcImZvY3VzaW5cIitPZSxGT0NVU09VVDpcImZvY3Vzb3V0XCIrT2UsTU9VU0VFTlRFUjpcIm1vdXNlZW50ZXJcIitPZSxNT1VTRUxFQVZFOlwibW91c2VsZWF2ZVwiK09lfSxxZT1cImZhZGVcIixNZT1cInNob3dcIixLZT1cIi50b29sdGlwLWlubmVyXCIsUWU9XCIuYXJyb3dcIixCZT1cImhvdmVyXCIsVmU9XCJmb2N1c1wiLFllPVwiY2xpY2tcIix6ZT1cIm1hbnVhbFwiLFhlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gaSh0LGUpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB1KXRocm93IG5ldyBUeXBlRXJyb3IoXCJCb290c3RyYXAncyB0b29sdGlwcyByZXF1aXJlIFBvcHBlci5qcyAoaHR0cHM6Ly9wb3BwZXIuanMub3JnLylcIik7dGhpcy5faXNFbmFibGVkPSEwLHRoaXMuX3RpbWVvdXQ9MCx0aGlzLl9ob3ZlclN0YXRlPVwiXCIsdGhpcy5fYWN0aXZlVHJpZ2dlcj17fSx0aGlzLl9wb3BwZXI9bnVsbCx0aGlzLmVsZW1lbnQ9dCx0aGlzLmNvbmZpZz10aGlzLl9nZXRDb25maWcoZSksdGhpcy50aXA9bnVsbCx0aGlzLl9zZXRMaXN0ZW5lcnMoKX12YXIgdD1pLnByb3RvdHlwZTtyZXR1cm4gdC5lbmFibGU9ZnVuY3Rpb24oKXt0aGlzLl9pc0VuYWJsZWQ9ITB9LHQuZGlzYWJsZT1mdW5jdGlvbigpe3RoaXMuX2lzRW5hYmxlZD0hMX0sdC50b2dnbGVFbmFibGVkPWZ1bmN0aW9uKCl7dGhpcy5faXNFbmFibGVkPSF0aGlzLl9pc0VuYWJsZWR9LHQudG9nZ2xlPWZ1bmN0aW9uKHQpe2lmKHRoaXMuX2lzRW5hYmxlZClpZih0KXt2YXIgZT10aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLG49Zyh0LmN1cnJlbnRUYXJnZXQpLmRhdGEoZSk7bnx8KG49bmV3IHRoaXMuY29uc3RydWN0b3IodC5jdXJyZW50VGFyZ2V0LHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpLGcodC5jdXJyZW50VGFyZ2V0KS5kYXRhKGUsbikpLG4uX2FjdGl2ZVRyaWdnZXIuY2xpY2s9IW4uX2FjdGl2ZVRyaWdnZXIuY2xpY2ssbi5faXNXaXRoQWN0aXZlVHJpZ2dlcigpP24uX2VudGVyKG51bGwsbik6bi5fbGVhdmUobnVsbCxuKX1lbHNle2lmKGcodGhpcy5nZXRUaXBFbGVtZW50KCkpLmhhc0NsYXNzKE1lKSlyZXR1cm4gdm9pZCB0aGlzLl9sZWF2ZShudWxsLHRoaXMpO3RoaXMuX2VudGVyKG51bGwsdGhpcyl9fSx0LmRpc3Bvc2U9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCksZy5yZW1vdmVEYXRhKHRoaXMuZWxlbWVudCx0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZKSxnKHRoaXMuZWxlbWVudCkub2ZmKHRoaXMuY29uc3RydWN0b3IuRVZFTlRfS0VZKSxnKHRoaXMuZWxlbWVudCkuY2xvc2VzdChcIi5tb2RhbFwiKS5vZmYoXCJoaWRlLmJzLm1vZGFsXCIsdGhpcy5faGlkZU1vZGFsSGFuZGxlciksdGhpcy50aXAmJmcodGhpcy50aXApLnJlbW92ZSgpLHRoaXMuX2lzRW5hYmxlZD1udWxsLHRoaXMuX3RpbWVvdXQ9bnVsbCx0aGlzLl9ob3ZlclN0YXRlPW51bGwsdGhpcy5fYWN0aXZlVHJpZ2dlcj1udWxsLHRoaXMuX3BvcHBlciYmdGhpcy5fcG9wcGVyLmRlc3Ryb3koKSx0aGlzLl9wb3BwZXI9bnVsbCx0aGlzLmVsZW1lbnQ9bnVsbCx0aGlzLmNvbmZpZz1udWxsLHRoaXMudGlwPW51bGx9LHQuc2hvdz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYoXCJub25lXCI9PT1nKHRoaXMuZWxlbWVudCkuY3NzKFwiZGlzcGxheVwiKSl0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgdXNlIHNob3cgb24gdmlzaWJsZSBlbGVtZW50c1wiKTt2YXIgdD1nLkV2ZW50KHRoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPVyk7aWYodGhpcy5pc1dpdGhDb250ZW50KCkmJnRoaXMuX2lzRW5hYmxlZCl7Zyh0aGlzLmVsZW1lbnQpLnRyaWdnZXIodCk7dmFyIG49Xy5maW5kU2hhZG93Um9vdCh0aGlzLmVsZW1lbnQpLGk9Zy5jb250YWlucyhudWxsIT09bj9uOnRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCx0aGlzLmVsZW1lbnQpO2lmKHQuaXNEZWZhdWx0UHJldmVudGVkKCl8fCFpKXJldHVybjt2YXIgbz10aGlzLmdldFRpcEVsZW1lbnQoKSxyPV8uZ2V0VUlEKHRoaXMuY29uc3RydWN0b3IuTkFNRSk7by5zZXRBdHRyaWJ1dGUoXCJpZFwiLHIpLHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRlc2NyaWJlZGJ5XCIsciksdGhpcy5zZXRDb250ZW50KCksdGhpcy5jb25maWcuYW5pbWF0aW9uJiZnKG8pLmFkZENsYXNzKHFlKTt2YXIgcz1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLmNvbmZpZy5wbGFjZW1lbnQ/dGhpcy5jb25maWcucGxhY2VtZW50LmNhbGwodGhpcyxvLHRoaXMuZWxlbWVudCk6dGhpcy5jb25maWcucGxhY2VtZW50LGE9dGhpcy5fZ2V0QXR0YWNobWVudChzKTt0aGlzLmFkZEF0dGFjaG1lbnRDbGFzcyhhKTt2YXIgbD10aGlzLl9nZXRDb250YWluZXIoKTtnKG8pLmRhdGEodGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSx0aGlzKSxnLmNvbnRhaW5zKHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCx0aGlzLnRpcCl8fGcobykuYXBwZW5kVG8obCksZyh0aGlzLmVsZW1lbnQpLnRyaWdnZXIodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5JTlNFUlRFRCksdGhpcy5fcG9wcGVyPW5ldyB1KHRoaXMuZWxlbWVudCxvLHRoaXMuX2dldFBvcHBlckNvbmZpZyhhKSksZyhvKS5hZGRDbGFzcyhNZSksXCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCYmZyhkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9uKFwibW91c2VvdmVyXCIsbnVsbCxnLm5vb3ApO3ZhciBjPWZ1bmN0aW9uKCl7ZS5jb25maWcuYW5pbWF0aW9uJiZlLl9maXhUcmFuc2l0aW9uKCk7dmFyIHQ9ZS5faG92ZXJTdGF0ZTtlLl9ob3ZlclN0YXRlPW51bGwsZyhlLmVsZW1lbnQpLnRyaWdnZXIoZS5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XTiksdD09PVVlJiZlLl9sZWF2ZShudWxsLGUpfTtpZihnKHRoaXMudGlwKS5oYXNDbGFzcyhxZSkpe3ZhciBoPV8uZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy50aXApO2codGhpcy50aXApLm9uZShfLlRSQU5TSVRJT05fRU5ELGMpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGgpfWVsc2UgYygpfX0sdC5oaWRlPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtuLl9ob3ZlclN0YXRlIT09RmUmJmkucGFyZW50Tm9kZSYmaS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGkpLG4uX2NsZWFuVGlwQ2xhc3MoKSxuLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1kZXNjcmliZWRieVwiKSxnKG4uZWxlbWVudCkudHJpZ2dlcihuLmNvbnN0cnVjdG9yLkV2ZW50LkhJRERFTiksbnVsbCE9PW4uX3BvcHBlciYmbi5fcG9wcGVyLmRlc3Ryb3koKSx0JiZ0KCl9dmFyIG49dGhpcyxpPXRoaXMuZ2V0VGlwRWxlbWVudCgpLG89Zy5FdmVudCh0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJREUpO2lmKGcodGhpcy5lbGVtZW50KS50cmlnZ2VyKG8pLCFvLmlzRGVmYXVsdFByZXZlbnRlZCgpKXtpZihnKGkpLnJlbW92ZUNsYXNzKE1lKSxcIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50JiZnKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub2ZmKFwibW91c2VvdmVyXCIsbnVsbCxnLm5vb3ApLHRoaXMuX2FjdGl2ZVRyaWdnZXJbWWVdPSExLHRoaXMuX2FjdGl2ZVRyaWdnZXJbVmVdPSExLHRoaXMuX2FjdGl2ZVRyaWdnZXJbQmVdPSExLGcodGhpcy50aXApLmhhc0NsYXNzKHFlKSl7dmFyIHI9Xy5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChpKTtnKGkpLm9uZShfLlRSQU5TSVRJT05fRU5ELGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHIpfWVsc2UgZSgpO3RoaXMuX2hvdmVyU3RhdGU9XCJcIn19LHQudXBkYXRlPWZ1bmN0aW9uKCl7bnVsbCE9PXRoaXMuX3BvcHBlciYmdGhpcy5fcG9wcGVyLnNjaGVkdWxlVXBkYXRlKCl9LHQuaXNXaXRoQ29udGVudD1mdW5jdGlvbigpe3JldHVybiBCb29sZWFuKHRoaXMuZ2V0VGl0bGUoKSl9LHQuYWRkQXR0YWNobWVudENsYXNzPWZ1bmN0aW9uKHQpe2codGhpcy5nZXRUaXBFbGVtZW50KCkpLmFkZENsYXNzKFBlK1wiLVwiK3QpfSx0LmdldFRpcEVsZW1lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aXA9dGhpcy50aXB8fGcodGhpcy5jb25maWcudGVtcGxhdGUpWzBdLHRoaXMudGlwfSx0LnNldENvbnRlbnQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmdldFRpcEVsZW1lbnQoKTt0aGlzLnNldEVsZW1lbnRDb250ZW50KGcodC5xdWVyeVNlbGVjdG9yQWxsKEtlKSksdGhpcy5nZXRUaXRsZSgpKSxnKHQpLnJlbW92ZUNsYXNzKHFlK1wiIFwiK01lKX0sdC5zZXRFbGVtZW50Q29udGVudD1mdW5jdGlvbih0LGUpe1wib2JqZWN0XCIhPXR5cGVvZiBlfHwhZS5ub2RlVHlwZSYmIWUuanF1ZXJ5P3RoaXMuY29uZmlnLmh0bWw/KHRoaXMuY29uZmlnLnNhbml0aXplJiYoZT13ZShlLHRoaXMuY29uZmlnLndoaXRlTGlzdCx0aGlzLmNvbmZpZy5zYW5pdGl6ZUZuKSksdC5odG1sKGUpKTp0LnRleHQoZSk6dGhpcy5jb25maWcuaHRtbD9nKGUpLnBhcmVudCgpLmlzKHQpfHx0LmVtcHR5KCkuYXBwZW5kKGUpOnQudGV4dChnKGUpLnRleHQoKSl9LHQuZ2V0VGl0bGU9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1vcmlnaW5hbC10aXRsZVwiKTtyZXR1cm4gdD10fHwoXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5jb25maWcudGl0bGU/dGhpcy5jb25maWcudGl0bGUuY2FsbCh0aGlzLmVsZW1lbnQpOnRoaXMuY29uZmlnLnRpdGxlKX0sdC5fZ2V0UG9wcGVyQ29uZmlnPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7cmV0dXJuIGwoe30se3BsYWNlbWVudDp0LG1vZGlmaWVyczp7b2Zmc2V0OnRoaXMuX2dldE9mZnNldCgpLGZsaXA6e2JlaGF2aW9yOnRoaXMuY29uZmlnLmZhbGxiYWNrUGxhY2VtZW50fSxhcnJvdzp7ZWxlbWVudDpRZX0scHJldmVudE92ZXJmbG93Ontib3VuZGFyaWVzRWxlbWVudDp0aGlzLmNvbmZpZy5ib3VuZGFyeX19LG9uQ3JlYXRlOmZ1bmN0aW9uKHQpe3Qub3JpZ2luYWxQbGFjZW1lbnQhPT10LnBsYWNlbWVudCYmZS5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKHQpfSxvblVwZGF0ZTpmdW5jdGlvbih0KXtyZXR1cm4gZS5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKHQpfX0se30sdGhpcy5jb25maWcucG9wcGVyQ29uZmlnKX0sdC5fZ2V0T2Zmc2V0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXt9O3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuY29uZmlnLm9mZnNldD90LmZuPWZ1bmN0aW9uKHQpe3JldHVybiB0Lm9mZnNldHM9bCh7fSx0Lm9mZnNldHMse30sZS5jb25maWcub2Zmc2V0KHQub2Zmc2V0cyxlLmVsZW1lbnQpfHx7fSksdH06dC5vZmZzZXQ9dGhpcy5jb25maWcub2Zmc2V0LHR9LHQuX2dldENvbnRhaW5lcj1mdW5jdGlvbigpe3JldHVybiExPT09dGhpcy5jb25maWcuY29udGFpbmVyP2RvY3VtZW50LmJvZHk6Xy5pc0VsZW1lbnQodGhpcy5jb25maWcuY29udGFpbmVyKT9nKHRoaXMuY29uZmlnLmNvbnRhaW5lcik6Zyhkb2N1bWVudCkuZmluZCh0aGlzLmNvbmZpZy5jb250YWluZXIpfSx0Ll9nZXRBdHRhY2htZW50PWZ1bmN0aW9uKHQpe3JldHVybiBSZVt0LnRvVXBwZXJDYXNlKCldfSx0Ll9zZXRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO3RoaXMuY29uZmlnLnRyaWdnZXIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24odCl7aWYoXCJjbGlja1wiPT09dClnKGkuZWxlbWVudCkub24oaS5jb25zdHJ1Y3Rvci5FdmVudC5DTElDSyxpLmNvbmZpZy5zZWxlY3RvcixmdW5jdGlvbih0KXtyZXR1cm4gaS50b2dnbGUodCl9KTtlbHNlIGlmKHQhPT16ZSl7dmFyIGU9dD09PUJlP2kuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VFTlRFUjppLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTSU4sbj10PT09QmU/aS5jb25zdHJ1Y3Rvci5FdmVudC5NT1VTRUxFQVZFOmkuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNPVVQ7ZyhpLmVsZW1lbnQpLm9uKGUsaS5jb25maWcuc2VsZWN0b3IsZnVuY3Rpb24odCl7cmV0dXJuIGkuX2VudGVyKHQpfSkub24obixpLmNvbmZpZy5zZWxlY3RvcixmdW5jdGlvbih0KXtyZXR1cm4gaS5fbGVhdmUodCl9KX19KSx0aGlzLl9oaWRlTW9kYWxIYW5kbGVyPWZ1bmN0aW9uKCl7aS5lbGVtZW50JiZpLmhpZGUoKX0sZyh0aGlzLmVsZW1lbnQpLmNsb3Nlc3QoXCIubW9kYWxcIikub24oXCJoaWRlLmJzLm1vZGFsXCIsdGhpcy5faGlkZU1vZGFsSGFuZGxlciksdGhpcy5jb25maWcuc2VsZWN0b3I/dGhpcy5jb25maWc9bCh7fSx0aGlzLmNvbmZpZyx7dHJpZ2dlcjpcIm1hbnVhbFwiLHNlbGVjdG9yOlwiXCJ9KTp0aGlzLl9maXhUaXRsZSgpfSx0Ll9maXhUaXRsZT1mdW5jdGlvbigpe3ZhciB0PXR5cGVvZiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1vcmlnaW5hbC10aXRsZVwiKTshdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcInRpdGxlXCIpJiZcInN0cmluZ1wiPT10fHwodGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtb3JpZ2luYWwtdGl0bGVcIix0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGl0bGVcIil8fFwiXCIpLHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLFwiXCIpKX0sdC5fZW50ZXI9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZOyhlPWV8fGcodC5jdXJyZW50VGFyZ2V0KS5kYXRhKG4pKXx8KGU9bmV3IHRoaXMuY29uc3RydWN0b3IodC5jdXJyZW50VGFyZ2V0LHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpLGcodC5jdXJyZW50VGFyZ2V0KS5kYXRhKG4sZSkpLHQmJihlLl9hY3RpdmVUcmlnZ2VyW1wiZm9jdXNpblwiPT09dC50eXBlP1ZlOkJlXT0hMCksZyhlLmdldFRpcEVsZW1lbnQoKSkuaGFzQ2xhc3MoTWUpfHxlLl9ob3ZlclN0YXRlPT09RmU/ZS5faG92ZXJTdGF0ZT1GZTooY2xlYXJUaW1lb3V0KGUuX3RpbWVvdXQpLGUuX2hvdmVyU3RhdGU9RmUsZS5jb25maWcuZGVsYXkmJmUuY29uZmlnLmRlbGF5LnNob3c/ZS5fdGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5faG92ZXJTdGF0ZT09PUZlJiZlLnNob3coKX0sZS5jb25maWcuZGVsYXkuc2hvdyk6ZS5zaG93KCkpfSx0Ll9sZWF2ZT1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7KGU9ZXx8Zyh0LmN1cnJlbnRUYXJnZXQpLmRhdGEobikpfHwoZT1uZXcgdGhpcy5jb25zdHJ1Y3Rvcih0LmN1cnJlbnRUYXJnZXQsdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSksZyh0LmN1cnJlbnRUYXJnZXQpLmRhdGEobixlKSksdCYmKGUuX2FjdGl2ZVRyaWdnZXJbXCJmb2N1c291dFwiPT09dC50eXBlP1ZlOkJlXT0hMSksZS5faXNXaXRoQWN0aXZlVHJpZ2dlcigpfHwoY2xlYXJUaW1lb3V0KGUuX3RpbWVvdXQpLGUuX2hvdmVyU3RhdGU9VWUsZS5jb25maWcuZGVsYXkmJmUuY29uZmlnLmRlbGF5LmhpZGU/ZS5fdGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5faG92ZXJTdGF0ZT09PVVlJiZlLmhpZGUoKX0sZS5jb25maWcuZGVsYXkuaGlkZSk6ZS5oaWRlKCkpfSx0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyPWZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIHRoaXMuX2FjdGl2ZVRyaWdnZXIpaWYodGhpcy5fYWN0aXZlVHJpZ2dlclt0XSlyZXR1cm4hMDtyZXR1cm4hMX0sdC5fZ2V0Q29uZmlnPWZ1bmN0aW9uKHQpe3ZhciBlPWcodGhpcy5lbGVtZW50KS5kYXRhKCk7cmV0dXJuIE9iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24odCl7LTEhPT1qZS5pbmRleE9mKHQpJiZkZWxldGUgZVt0XX0pLFwibnVtYmVyXCI9PXR5cGVvZih0PWwoe30sdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LHt9LGUse30sXCJvYmplY3RcIj09dHlwZW9mIHQmJnQ/dDp7fSkpLmRlbGF5JiYodC5kZWxheT17c2hvdzp0LmRlbGF5LGhpZGU6dC5kZWxheX0pLFwibnVtYmVyXCI9PXR5cGVvZiB0LnRpdGxlJiYodC50aXRsZT10LnRpdGxlLnRvU3RyaW5nKCkpLFwibnVtYmVyXCI9PXR5cGVvZiB0LmNvbnRlbnQmJih0LmNvbnRlbnQ9dC5jb250ZW50LnRvU3RyaW5nKCkpLF8udHlwZUNoZWNrQ29uZmlnKEFlLHQsdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSksdC5zYW5pdGl6ZSYmKHQudGVtcGxhdGU9d2UodC50ZW1wbGF0ZSx0LndoaXRlTGlzdCx0LnNhbml0aXplRm4pKSx0fSx0Ll9nZXREZWxlZ2F0ZUNvbmZpZz1mdW5jdGlvbigpe3ZhciB0PXt9O2lmKHRoaXMuY29uZmlnKWZvcih2YXIgZSBpbiB0aGlzLmNvbmZpZyl0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRbZV0hPT10aGlzLmNvbmZpZ1tlXSYmKHRbZV09dGhpcy5jb25maWdbZV0pO3JldHVybiB0fSx0Ll9jbGVhblRpcENsYXNzPWZ1bmN0aW9uKCl7dmFyIHQ9Zyh0aGlzLmdldFRpcEVsZW1lbnQoKSksZT10LmF0dHIoXCJjbGFzc1wiKS5tYXRjaChMZSk7bnVsbCE9PWUmJmUubGVuZ3RoJiZ0LnJlbW92ZUNsYXNzKGUuam9pbihcIlwiKSl9LHQuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZT1mdW5jdGlvbih0KXt2YXIgZT10Lmluc3RhbmNlO3RoaXMudGlwPWUucG9wcGVyLHRoaXMuX2NsZWFuVGlwQ2xhc3MoKSx0aGlzLmFkZEF0dGFjaG1lbnRDbGFzcyh0aGlzLl9nZXRBdHRhY2htZW50KHQucGxhY2VtZW50KSl9LHQuX2ZpeFRyYW5zaXRpb249ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmdldFRpcEVsZW1lbnQoKSxlPXRoaXMuY29uZmlnLmFuaW1hdGlvbjtudWxsPT09dC5nZXRBdHRyaWJ1dGUoXCJ4LXBsYWNlbWVudFwiKSYmKGcodCkucmVtb3ZlQ2xhc3MocWUpLHRoaXMuY29uZmlnLmFuaW1hdGlvbj0hMSx0aGlzLmhpZGUoKSx0aGlzLnNob3coKSx0aGlzLmNvbmZpZy5hbmltYXRpb249ZSl9LGkuX2pRdWVyeUludGVyZmFjZT1mdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9Zyh0aGlzKS5kYXRhKE5lKSxlPVwib2JqZWN0XCI9PXR5cGVvZiBuJiZuO2lmKCh0fHwhL2Rpc3Bvc2V8aGlkZS8udGVzdChuKSkmJih0fHwodD1uZXcgaSh0aGlzLGUpLGcodGhpcykuZGF0YShOZSx0KSksXCJzdHJpbmdcIj09dHlwZW9mIG4pKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgdFtuXSl0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInK24rJ1wiJyk7dFtuXSgpfX0pfSxzKGksbnVsbCxbe2tleTpcIlZFUlNJT05cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjQuNC4xXCJ9fSx7a2V5OlwiRGVmYXVsdFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB4ZX19LHtrZXk6XCJOQU1FXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEFlfX0se2tleTpcIkRBVEFfS0VZXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIE5lfX0se2tleTpcIkV2ZW50XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFdlfX0se2tleTpcIkVWRU5UX0tFWVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBPZX19LHtrZXk6XCJEZWZhdWx0VHlwZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBIZX19XSksaX0oKTtnLmZuW0FlXT1YZS5falF1ZXJ5SW50ZXJmYWNlLGcuZm5bQWVdLkNvbnN0cnVjdG9yPVhlLGcuZm5bQWVdLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gZy5mbltBZV09a2UsWGUuX2pRdWVyeUludGVyZmFjZX07dmFyICRlPVwicG9wb3ZlclwiLEdlPVwiYnMucG9wb3ZlclwiLEplPVwiLlwiK0dlLFplPWcuZm5bJGVdLHRuPVwiYnMtcG9wb3ZlclwiLGVuPW5ldyBSZWdFeHAoXCIoXnxcXFxccylcIit0bitcIlxcXFxTK1wiLFwiZ1wiKSxubj1sKHt9LFhlLkRlZmF1bHQse3BsYWNlbWVudDpcInJpZ2h0XCIsdHJpZ2dlcjpcImNsaWNrXCIsY29udGVudDpcIlwiLHRlbXBsYXRlOic8ZGl2IGNsYXNzPVwicG9wb3ZlclwiIHJvbGU9XCJ0b29sdGlwXCI+PGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+PGgzIGNsYXNzPVwicG9wb3Zlci1oZWFkZXJcIj48L2gzPjxkaXYgY2xhc3M9XCJwb3BvdmVyLWJvZHlcIj48L2Rpdj48L2Rpdj4nfSksb249bCh7fSxYZS5EZWZhdWx0VHlwZSx7Y29udGVudDpcIihzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbilcIn0pLHJuPVwiZmFkZVwiLHNuPVwic2hvd1wiLGFuPVwiLnBvcG92ZXItaGVhZGVyXCIsbG49XCIucG9wb3Zlci1ib2R5XCIsY249e0hJREU6XCJoaWRlXCIrSmUsSElEREVOOlwiaGlkZGVuXCIrSmUsU0hPVzpcInNob3dcIitKZSxTSE9XTjpcInNob3duXCIrSmUsSU5TRVJURUQ6XCJpbnNlcnRlZFwiK0plLENMSUNLOlwiY2xpY2tcIitKZSxGT0NVU0lOOlwiZm9jdXNpblwiK0plLEZPQ1VTT1VUOlwiZm9jdXNvdXRcIitKZSxNT1VTRUVOVEVSOlwibW91c2VlbnRlclwiK0plLE1PVVNFTEVBVkU6XCJtb3VzZWxlYXZlXCIrSmV9LGhuPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGkoKXtyZXR1cm4gdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9IWZ1bmN0aW9uKHQsZSl7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlLnByb3RvdHlwZSksKHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPXQpLl9fcHJvdG9fXz1lfShpLHQpO3ZhciBlPWkucHJvdG90eXBlO3JldHVybiBlLmlzV2l0aENvbnRlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRUaXRsZSgpfHx0aGlzLl9nZXRDb250ZW50KCl9LGUuYWRkQXR0YWNobWVudENsYXNzPWZ1bmN0aW9uKHQpe2codGhpcy5nZXRUaXBFbGVtZW50KCkpLmFkZENsYXNzKHRuK1wiLVwiK3QpfSxlLmdldFRpcEVsZW1lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aXA9dGhpcy50aXB8fGcodGhpcy5jb25maWcudGVtcGxhdGUpWzBdLHRoaXMudGlwfSxlLnNldENvbnRlbnQ9ZnVuY3Rpb24oKXt2YXIgdD1nKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTt0aGlzLnNldEVsZW1lbnRDb250ZW50KHQuZmluZChhbiksdGhpcy5nZXRUaXRsZSgpKTt2YXIgZT10aGlzLl9nZXRDb250ZW50KCk7XCJmdW5jdGlvblwiPT10eXBlb2YgZSYmKGU9ZS5jYWxsKHRoaXMuZWxlbWVudCkpLHRoaXMuc2V0RWxlbWVudENvbnRlbnQodC5maW5kKGxuKSxlKSx0LnJlbW92ZUNsYXNzKHJuK1wiIFwiK3NuKX0sZS5fZ2V0Q29udGVudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jb250ZW50XCIpfHx0aGlzLmNvbmZpZy5jb250ZW50fSxlLl9jbGVhblRpcENsYXNzPWZ1bmN0aW9uKCl7dmFyIHQ9Zyh0aGlzLmdldFRpcEVsZW1lbnQoKSksZT10LmF0dHIoXCJjbGFzc1wiKS5tYXRjaChlbik7bnVsbCE9PWUmJjA8ZS5sZW5ndGgmJnQucmVtb3ZlQ2xhc3MoZS5qb2luKFwiXCIpKX0saS5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1nKHRoaXMpLmRhdGEoR2UpLGU9XCJvYmplY3RcIj09dHlwZW9mIG4/bjpudWxsO2lmKCh0fHwhL2Rpc3Bvc2V8aGlkZS8udGVzdChuKSkmJih0fHwodD1uZXcgaSh0aGlzLGUpLGcodGhpcykuZGF0YShHZSx0KSksXCJzdHJpbmdcIj09dHlwZW9mIG4pKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgdFtuXSl0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInK24rJ1wiJyk7dFtuXSgpfX0pfSxzKGksbnVsbCxbe2tleTpcIlZFUlNJT05cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjQuNC4xXCJ9fSx7a2V5OlwiRGVmYXVsdFwiLGdldDpmdW5jdGlvbigpe3JldHVybiBubn19LHtrZXk6XCJOQU1FXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuICRlfX0se2tleTpcIkRBVEFfS0VZXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEdlfX0se2tleTpcIkV2ZW50XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGNufX0se2tleTpcIkVWRU5UX0tFWVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBKZX19LHtrZXk6XCJEZWZhdWx0VHlwZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBvbn19XSksaX0oWGUpO2cuZm5bJGVdPWhuLl9qUXVlcnlJbnRlcmZhY2UsZy5mblskZV0uQ29uc3RydWN0b3I9aG4sZy5mblskZV0ubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBnLmZuWyRlXT1aZSxobi5falF1ZXJ5SW50ZXJmYWNlfTt2YXIgdW49XCJzY3JvbGxzcHlcIixmbj1cImJzLnNjcm9sbHNweVwiLGRuPVwiLlwiK2ZuLGduPWcuZm5bdW5dLF9uPXtvZmZzZXQ6MTAsbWV0aG9kOlwiYXV0b1wiLHRhcmdldDpcIlwifSxtbj17b2Zmc2V0OlwibnVtYmVyXCIsbWV0aG9kOlwic3RyaW5nXCIsdGFyZ2V0OlwiKHN0cmluZ3xlbGVtZW50KVwifSxwbj17QUNUSVZBVEU6XCJhY3RpdmF0ZVwiK2RuLFNDUk9MTDpcInNjcm9sbFwiK2RuLExPQURfREFUQV9BUEk6XCJsb2FkXCIrZG4rXCIuZGF0YS1hcGlcIn0sdm49XCJkcm9wZG93bi1pdGVtXCIseW49XCJhY3RpdmVcIixFbj0nW2RhdGEtc3B5PVwic2Nyb2xsXCJdJyxDbj1cIi5uYXYsIC5saXN0LWdyb3VwXCIsVG49XCIubmF2LWxpbmtcIixibj1cIi5uYXYtaXRlbVwiLFNuPVwiLmxpc3QtZ3JvdXAtaXRlbVwiLERuPVwiLmRyb3Bkb3duXCIsSW49XCIuZHJvcGRvd24taXRlbVwiLHduPVwiLmRyb3Bkb3duLXRvZ2dsZVwiLEFuPVwib2Zmc2V0XCIsTm49XCJwb3NpdGlvblwiLE9uPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbih0LGUpe3ZhciBuPXRoaXM7dGhpcy5fZWxlbWVudD10LHRoaXMuX3Njcm9sbEVsZW1lbnQ9XCJCT0RZXCI9PT10LnRhZ05hbWU/d2luZG93OnQsdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhlKSx0aGlzLl9zZWxlY3Rvcj10aGlzLl9jb25maWcudGFyZ2V0K1wiIFwiK1RuK1wiLFwiK3RoaXMuX2NvbmZpZy50YXJnZXQrXCIgXCIrU24rXCIsXCIrdGhpcy5fY29uZmlnLnRhcmdldCtcIiBcIitJbix0aGlzLl9vZmZzZXRzPVtdLHRoaXMuX3RhcmdldHM9W10sdGhpcy5fYWN0aXZlVGFyZ2V0PW51bGwsdGhpcy5fc2Nyb2xsSGVpZ2h0PTAsZyh0aGlzLl9zY3JvbGxFbGVtZW50KS5vbihwbi5TQ1JPTEwsZnVuY3Rpb24odCl7cmV0dXJuIG4uX3Byb2Nlc3ModCl9KSx0aGlzLnJlZnJlc2goKSx0aGlzLl9wcm9jZXNzKCl9dmFyIHQ9bi5wcm90b3R5cGU7cmV0dXJuIHQucmVmcmVzaD1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLl9zY3JvbGxFbGVtZW50PT09dGhpcy5fc2Nyb2xsRWxlbWVudC53aW5kb3c/QW46Tm4sbz1cImF1dG9cIj09PXRoaXMuX2NvbmZpZy5tZXRob2Q/dDp0aGlzLl9jb25maWcubWV0aG9kLHI9bz09PU5uP3RoaXMuX2dldFNjcm9sbFRvcCgpOjA7dGhpcy5fb2Zmc2V0cz1bXSx0aGlzLl90YXJnZXRzPVtdLHRoaXMuX3Njcm9sbEhlaWdodD10aGlzLl9nZXRTY3JvbGxIZWlnaHQoKSxbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fc2VsZWN0b3IpKS5tYXAoZnVuY3Rpb24odCl7dmFyIGUsbj1fLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodCk7aWYobiYmKGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihuKSksZSl7dmFyIGk9ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtpZihpLndpZHRofHxpLmhlaWdodClyZXR1cm5bZyhlKVtvXSgpLnRvcCtyLG5dfXJldHVybiBudWxsfSkuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiB0fSkuc29ydChmdW5jdGlvbih0LGUpe3JldHVybiB0WzBdLWVbMF19KS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UuX29mZnNldHMucHVzaCh0WzBdKSxlLl90YXJnZXRzLnB1c2godFsxXSl9KX0sdC5kaXNwb3NlPWZ1bmN0aW9uKCl7Zy5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsZm4pLGcodGhpcy5fc2Nyb2xsRWxlbWVudCkub2ZmKGRuKSx0aGlzLl9lbGVtZW50PW51bGwsdGhpcy5fc2Nyb2xsRWxlbWVudD1udWxsLHRoaXMuX2NvbmZpZz1udWxsLHRoaXMuX3NlbGVjdG9yPW51bGwsdGhpcy5fb2Zmc2V0cz1udWxsLHRoaXMuX3RhcmdldHM9bnVsbCx0aGlzLl9hY3RpdmVUYXJnZXQ9bnVsbCx0aGlzLl9zY3JvbGxIZWlnaHQ9bnVsbH0sdC5fZ2V0Q29uZmlnPWZ1bmN0aW9uKHQpe2lmKFwic3RyaW5nXCIhPXR5cGVvZih0PWwoe30sX24se30sXCJvYmplY3RcIj09dHlwZW9mIHQmJnQ/dDp7fSkpLnRhcmdldCl7dmFyIGU9Zyh0LnRhcmdldCkuYXR0cihcImlkXCIpO2V8fChlPV8uZ2V0VUlEKHVuKSxnKHQudGFyZ2V0KS5hdHRyKFwiaWRcIixlKSksdC50YXJnZXQ9XCIjXCIrZX1yZXR1cm4gXy50eXBlQ2hlY2tDb25maWcodW4sdCxtbiksdH0sdC5fZ2V0U2Nyb2xsVG9wPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQ9PT13aW5kb3c/dGhpcy5fc2Nyb2xsRWxlbWVudC5wYWdlWU9mZnNldDp0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbFRvcH0sdC5fZ2V0U2Nyb2xsSGVpZ2h0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsSGVpZ2h0fHxNYXRoLm1heChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0KX0sdC5fZ2V0T2Zmc2V0SGVpZ2h0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQ9PT13aW5kb3c/d2luZG93LmlubmVySGVpZ2h0OnRoaXMuX3Njcm9sbEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0fSx0Ll9wcm9jZXNzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZ2V0U2Nyb2xsVG9wKCkrdGhpcy5fY29uZmlnLm9mZnNldCxlPXRoaXMuX2dldFNjcm9sbEhlaWdodCgpLG49dGhpcy5fY29uZmlnLm9mZnNldCtlLXRoaXMuX2dldE9mZnNldEhlaWdodCgpO2lmKHRoaXMuX3Njcm9sbEhlaWdodCE9PWUmJnRoaXMucmVmcmVzaCgpLG48PXQpe3ZhciBpPXRoaXMuX3RhcmdldHNbdGhpcy5fdGFyZ2V0cy5sZW5ndGgtMV07dGhpcy5fYWN0aXZlVGFyZ2V0IT09aSYmdGhpcy5fYWN0aXZhdGUoaSl9ZWxzZXtpZih0aGlzLl9hY3RpdmVUYXJnZXQmJnQ8dGhpcy5fb2Zmc2V0c1swXSYmMDx0aGlzLl9vZmZzZXRzWzBdKXJldHVybiB0aGlzLl9hY3RpdmVUYXJnZXQ9bnVsbCx2b2lkIHRoaXMuX2NsZWFyKCk7Zm9yKHZhciBvPXRoaXMuX29mZnNldHMubGVuZ3RoO28tLTspe3RoaXMuX2FjdGl2ZVRhcmdldCE9PXRoaXMuX3RhcmdldHNbb10mJnQ+PXRoaXMuX29mZnNldHNbb10mJihcInVuZGVmaW5lZFwiPT10eXBlb2YgdGhpcy5fb2Zmc2V0c1tvKzFdfHx0PHRoaXMuX29mZnNldHNbbysxXSkmJnRoaXMuX2FjdGl2YXRlKHRoaXMuX3RhcmdldHNbb10pfX19LHQuX2FjdGl2YXRlPWZ1bmN0aW9uKGUpe3RoaXMuX2FjdGl2ZVRhcmdldD1lLHRoaXMuX2NsZWFyKCk7dmFyIHQ9dGhpcy5fc2VsZWN0b3Iuc3BsaXQoXCIsXCIpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdCsnW2RhdGEtdGFyZ2V0PVwiJytlKydcIl0sJyt0KydbaHJlZj1cIicrZSsnXCJdJ30pLG49ZyhbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodC5qb2luKFwiLFwiKSkpKTtuLmhhc0NsYXNzKHZuKT8obi5jbG9zZXN0KERuKS5maW5kKHduKS5hZGRDbGFzcyh5biksbi5hZGRDbGFzcyh5bikpOihuLmFkZENsYXNzKHluKSxuLnBhcmVudHMoQ24pLnByZXYoVG4rXCIsIFwiK1NuKS5hZGRDbGFzcyh5biksbi5wYXJlbnRzKENuKS5wcmV2KGJuKS5jaGlsZHJlbihUbikuYWRkQ2xhc3MoeW4pKSxnKHRoaXMuX3Njcm9sbEVsZW1lbnQpLnRyaWdnZXIocG4uQUNUSVZBVEUse3JlbGF0ZWRUYXJnZXQ6ZX0pfSx0Ll9jbGVhcj1mdW5jdGlvbigpe1tdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9zZWxlY3RvcikpLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gdC5jbGFzc0xpc3QuY29udGFpbnMoeW4pfSkuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gdC5jbGFzc0xpc3QucmVtb3ZlKHluKX0pfSxuLl9qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PWcodGhpcykuZGF0YShmbik7aWYodHx8KHQ9bmV3IG4odGhpcyxcIm9iamVjdFwiPT10eXBlb2YgZSYmZSksZyh0aGlzKS5kYXRhKGZuLHQpKSxcInN0cmluZ1wiPT10eXBlb2YgZSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHRbZV0pdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJytlKydcIicpO3RbZV0oKX19KX0scyhuLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjQuMVwifX0se2tleTpcIkRlZmF1bHRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gX259fV0pLG59KCk7Zyh3aW5kb3cpLm9uKHBuLkxPQURfREFUQV9BUEksZnVuY3Rpb24oKXtmb3IodmFyIHQ9W10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKEVuKSksZT10Lmxlbmd0aDtlLS07KXt2YXIgbj1nKHRbZV0pO09uLl9qUXVlcnlJbnRlcmZhY2UuY2FsbChuLG4uZGF0YSgpKX19KSxnLmZuW3VuXT1Pbi5falF1ZXJ5SW50ZXJmYWNlLGcuZm5bdW5dLkNvbnN0cnVjdG9yPU9uLGcuZm5bdW5dLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gZy5mblt1bl09Z24sT24uX2pRdWVyeUludGVyZmFjZX07dmFyIGtuPVwiYnMudGFiXCIsUG49XCIuXCIra24sTG49Zy5mbi50YWIsam49e0hJREU6XCJoaWRlXCIrUG4sSElEREVOOlwiaGlkZGVuXCIrUG4sU0hPVzpcInNob3dcIitQbixTSE9XTjpcInNob3duXCIrUG4sQ0xJQ0tfREFUQV9BUEk6XCJjbGlja1wiK1BuK1wiLmRhdGEtYXBpXCJ9LEhuPVwiZHJvcGRvd24tbWVudVwiLFJuPVwiYWN0aXZlXCIseG49XCJkaXNhYmxlZFwiLEZuPVwiZmFkZVwiLFVuPVwic2hvd1wiLFduPVwiLmRyb3Bkb3duXCIscW49XCIubmF2LCAubGlzdC1ncm91cFwiLE1uPVwiLmFjdGl2ZVwiLEtuPVwiPiBsaSA+IC5hY3RpdmVcIixRbj0nW2RhdGEtdG9nZ2xlPVwidGFiXCJdLCBbZGF0YS10b2dnbGU9XCJwaWxsXCJdLCBbZGF0YS10b2dnbGU9XCJsaXN0XCJdJyxCbj1cIi5kcm9wZG93bi10b2dnbGVcIixWbj1cIj4gLmRyb3Bkb3duLW1lbnUgLmFjdGl2ZVwiLFluPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gaSh0KXt0aGlzLl9lbGVtZW50PXR9dmFyIHQ9aS5wcm90b3R5cGU7cmV0dXJuIHQuc2hvdz1mdW5jdGlvbigpe3ZhciBuPXRoaXM7aWYoISh0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUmJnRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFJiZnKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKFJuKXx8Zyh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyh4bikpKXt2YXIgdCxpLGU9Zyh0aGlzLl9lbGVtZW50KS5jbG9zZXN0KHFuKVswXSxvPV8uZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtpZihlKXt2YXIgcj1cIlVMXCI9PT1lLm5vZGVOYW1lfHxcIk9MXCI9PT1lLm5vZGVOYW1lP0tuOk1uO2k9KGk9Zy5tYWtlQXJyYXkoZyhlKS5maW5kKHIpKSlbaS5sZW5ndGgtMV19dmFyIHM9Zy5FdmVudChqbi5ISURFLHtyZWxhdGVkVGFyZ2V0OnRoaXMuX2VsZW1lbnR9KSxhPWcuRXZlbnQoam4uU0hPVyx7cmVsYXRlZFRhcmdldDppfSk7aWYoaSYmZyhpKS50cmlnZ2VyKHMpLGcodGhpcy5fZWxlbWVudCkudHJpZ2dlcihhKSwhYS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSYmIXMuaXNEZWZhdWx0UHJldmVudGVkKCkpe28mJih0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobykpLHRoaXMuX2FjdGl2YXRlKHRoaXMuX2VsZW1lbnQsZSk7dmFyIGw9ZnVuY3Rpb24oKXt2YXIgdD1nLkV2ZW50KGpuLkhJRERFTix7cmVsYXRlZFRhcmdldDpuLl9lbGVtZW50fSksZT1nLkV2ZW50KGpuLlNIT1dOLHtyZWxhdGVkVGFyZ2V0Oml9KTtnKGkpLnRyaWdnZXIodCksZyhuLl9lbGVtZW50KS50cmlnZ2VyKGUpfTt0P3RoaXMuX2FjdGl2YXRlKHQsdC5wYXJlbnROb2RlLGwpOmwoKX19fSx0LmRpc3Bvc2U9ZnVuY3Rpb24oKXtnLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCxrbiksdGhpcy5fZWxlbWVudD1udWxsfSx0Ll9hY3RpdmF0ZT1mdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gaSgpe3JldHVybiBvLl90cmFuc2l0aW9uQ29tcGxldGUodCxyLG4pfXZhciBvPXRoaXMscj0oIWV8fFwiVUxcIiE9PWUubm9kZU5hbWUmJlwiT0xcIiE9PWUubm9kZU5hbWU/ZyhlKS5jaGlsZHJlbihNbik6ZyhlKS5maW5kKEtuKSlbMF0scz1uJiZyJiZnKHIpLmhhc0NsYXNzKEZuKTtpZihyJiZzKXt2YXIgYT1fLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHIpO2cocikucmVtb3ZlQ2xhc3MoVW4pLm9uZShfLlRSQU5TSVRJT05fRU5ELGkpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGEpfWVsc2UgaSgpfSx0Ll90cmFuc2l0aW9uQ29tcGxldGU9ZnVuY3Rpb24odCxlLG4pe2lmKGUpe2coZSkucmVtb3ZlQ2xhc3MoUm4pO3ZhciBpPWcoZS5wYXJlbnROb2RlKS5maW5kKFZuKVswXTtpJiZnKGkpLnJlbW92ZUNsYXNzKFJuKSxcInRhYlwiPT09ZS5nZXRBdHRyaWJ1dGUoXCJyb2xlXCIpJiZlLnNldEF0dHJpYnV0ZShcImFyaWEtc2VsZWN0ZWRcIiwhMSl9aWYoZyh0KS5hZGRDbGFzcyhSbiksXCJ0YWJcIj09PXQuZ2V0QXR0cmlidXRlKFwicm9sZVwiKSYmdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIsITApLF8ucmVmbG93KHQpLHQuY2xhc3NMaXN0LmNvbnRhaW5zKEZuKSYmdC5jbGFzc0xpc3QuYWRkKFVuKSx0LnBhcmVudE5vZGUmJmcodC5wYXJlbnROb2RlKS5oYXNDbGFzcyhIbikpe3ZhciBvPWcodCkuY2xvc2VzdChXbilbMF07aWYobyl7dmFyIHI9W10uc2xpY2UuY2FsbChvLnF1ZXJ5U2VsZWN0b3JBbGwoQm4pKTtnKHIpLmFkZENsYXNzKFJuKX10LnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwhMCl9biYmbigpfSxpLl9qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PWcodGhpcyksZT10LmRhdGEoa24pO2lmKGV8fChlPW5ldyBpKHRoaXMpLHQuZGF0YShrbixlKSksXCJzdHJpbmdcIj09dHlwZW9mIG4pe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlW25dKXRocm93IG5ldyBUeXBlRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicrbisnXCInKTtlW25dKCl9fSl9LHMoaSxudWxsLFt7a2V5OlwiVkVSU0lPTlwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiNC40LjFcIn19XSksaX0oKTtnKGRvY3VtZW50KS5vbihqbi5DTElDS19EQVRBX0FQSSxRbixmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksWW4uX2pRdWVyeUludGVyZmFjZS5jYWxsKGcodGhpcyksXCJzaG93XCIpfSksZy5mbi50YWI9WW4uX2pRdWVyeUludGVyZmFjZSxnLmZuLnRhYi5Db25zdHJ1Y3Rvcj1ZbixnLmZuLnRhYi5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGcuZm4udGFiPUxuLFluLl9qUXVlcnlJbnRlcmZhY2V9O3ZhciB6bj1cInRvYXN0XCIsWG49XCJicy50b2FzdFwiLCRuPVwiLlwiK1huLEduPWcuZm5bem5dLEpuPXtDTElDS19ESVNNSVNTOlwiY2xpY2suZGlzbWlzc1wiKyRuLEhJREU6XCJoaWRlXCIrJG4sSElEREVOOlwiaGlkZGVuXCIrJG4sU0hPVzpcInNob3dcIiskbixTSE9XTjpcInNob3duXCIrJG59LFpuPVwiZmFkZVwiLHRpPVwiaGlkZVwiLGVpPVwic2hvd1wiLG5pPVwic2hvd2luZ1wiLGlpPXthbmltYXRpb246XCJib29sZWFuXCIsYXV0b2hpZGU6XCJib29sZWFuXCIsZGVsYXk6XCJudW1iZXJcIn0sb2k9e2FuaW1hdGlvbjohMCxhdXRvaGlkZTohMCxkZWxheTo1MDB9LHJpPSdbZGF0YS1kaXNtaXNzPVwidG9hc3RcIl0nLHNpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gaSh0LGUpe3RoaXMuX2VsZW1lbnQ9dCx0aGlzLl9jb25maWc9dGhpcy5fZ2V0Q29uZmlnKGUpLHRoaXMuX3RpbWVvdXQ9bnVsbCx0aGlzLl9zZXRMaXN0ZW5lcnMoKX12YXIgdD1pLnByb3RvdHlwZTtyZXR1cm4gdC5zaG93PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPWcuRXZlbnQoSm4uU0hPVyk7aWYoZyh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKGUpLCFlLmlzRGVmYXVsdFByZXZlbnRlZCgpKXt0aGlzLl9jb25maWcuYW5pbWF0aW9uJiZ0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoWm4pO3ZhciBuPWZ1bmN0aW9uKCl7dC5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKG5pKSx0Ll9lbGVtZW50LmNsYXNzTGlzdC5hZGQoZWkpLGcodC5fZWxlbWVudCkudHJpZ2dlcihKbi5TSE9XTiksdC5fY29uZmlnLmF1dG9oaWRlJiYodC5fdGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC5oaWRlKCl9LHQuX2NvbmZpZy5kZWxheSkpfTtpZih0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGkpLF8ucmVmbG93KHRoaXMuX2VsZW1lbnQpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChuaSksdGhpcy5fY29uZmlnLmFuaW1hdGlvbil7dmFyIGk9Xy5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtnKHRoaXMuX2VsZW1lbnQpLm9uZShfLlRSQU5TSVRJT05fRU5ELG4pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGkpfWVsc2UgbigpfX0sdC5oaWRlPWZ1bmN0aW9uKCl7aWYodGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoZWkpKXt2YXIgdD1nLkV2ZW50KEpuLkhJREUpO2codGhpcy5fZWxlbWVudCkudHJpZ2dlcih0KSx0LmlzRGVmYXVsdFByZXZlbnRlZCgpfHx0aGlzLl9jbG9zZSgpfX0sdC5kaXNwb3NlPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpLHRoaXMuX3RpbWVvdXQ9bnVsbCx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhlaSkmJnRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShlaSksZyh0aGlzLl9lbGVtZW50KS5vZmYoSm4uQ0xJQ0tfRElTTUlTUyksZy5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsWG4pLHRoaXMuX2VsZW1lbnQ9bnVsbCx0aGlzLl9jb25maWc9bnVsbH0sdC5fZ2V0Q29uZmlnPWZ1bmN0aW9uKHQpe3JldHVybiB0PWwoe30sb2kse30sZyh0aGlzLl9lbGVtZW50KS5kYXRhKCkse30sXCJvYmplY3RcIj09dHlwZW9mIHQmJnQ/dDp7fSksXy50eXBlQ2hlY2tDb25maWcoem4sdCx0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKSx0fSx0Ll9zZXRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2codGhpcy5fZWxlbWVudCkub24oSm4uQ0xJQ0tfRElTTUlTUyxyaSxmdW5jdGlvbigpe3JldHVybiB0LmhpZGUoKX0pfSx0Ll9jbG9zZT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXtlLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQodGkpLGcoZS5fZWxlbWVudCkudHJpZ2dlcihKbi5ISURERU4pfXZhciBlPXRoaXM7aWYodGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGVpKSx0aGlzLl9jb25maWcuYW5pbWF0aW9uKXt2YXIgbj1fLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO2codGhpcy5fZWxlbWVudCkub25lKF8uVFJBTlNJVElPTl9FTkQsdCkuZW11bGF0ZVRyYW5zaXRpb25FbmQobil9ZWxzZSB0KCl9LGkuX2pRdWVyeUludGVyZmFjZT1mdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9Zyh0aGlzKSxlPXQuZGF0YShYbik7aWYoZXx8KGU9bmV3IGkodGhpcyxcIm9iamVjdFwiPT10eXBlb2YgbiYmbiksdC5kYXRhKFhuLGUpKSxcInN0cmluZ1wiPT10eXBlb2Ygbil7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGVbbl0pdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJytuKydcIicpO2Vbbl0odGhpcyl9fSl9LHMoaSxudWxsLFt7a2V5OlwiVkVSU0lPTlwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiNC40LjFcIn19LHtrZXk6XCJEZWZhdWx0VHlwZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBpaX19LHtrZXk6XCJEZWZhdWx0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG9pfX1dKSxpfSgpO2cuZm5bem5dPXNpLl9qUXVlcnlJbnRlcmZhY2UsZy5mblt6bl0uQ29uc3RydWN0b3I9c2ksZy5mblt6bl0ubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBnLmZuW3puXT1HbixzaS5falF1ZXJ5SW50ZXJmYWNlfSx0LkFsZXJ0PXYsdC5CdXR0b249SCx0LkNhcm91c2VsPXV0LHQuQ29sbGFwc2U9d3QsdC5Ecm9wZG93bj1lZSx0Lk1vZGFsPVRlLHQuUG9wb3Zlcj1obix0LlNjcm9sbHNweT1Pbix0LlRhYj1Zbix0LlRvYXN0PXNpLHQuVG9vbHRpcD1YZSx0LlV0aWw9XyxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym9vdHN0cmFwLm1pbi5qcy5tYXBcblxuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgZGVmaW5lKFsnbW9kdWxlJywgJ2V4cG9ydHMnXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgZmFjdG9yeShtb2R1bGUsIGV4cG9ydHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbW9kID0ge1xuICAgICAgICBleHBvcnRzOiB7fVxuICAgICAgfTtcbiAgICAgIGZhY3RvcnkobW9kLCBtb2QuZXhwb3J0cyk7XG4gICAgICBnbG9iYWwuV09XID0gbW9kLmV4cG9ydHM7XG4gICAgfVxuICB9KSh0aGlzLCBmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICBcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICAgIHZhbHVlOiB0cnVlXG4gICAgfSk7XG4gIFxuICAgIHZhciBfY2xhc3MsIF90ZW1wO1xuICBcbiAgICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgICAgfVxuICAgIH1cbiAgXG4gICAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gIFxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICAgIH07XG4gICAgfSgpO1xuICBcbiAgICBmdW5jdGlvbiBpc0luKG5lZWRsZSwgaGF5c3RhY2spIHtcbiAgICAgIHJldHVybiBoYXlzdGFjay5pbmRleE9mKG5lZWRsZSkgPj0gMDtcbiAgICB9XG4gIFxuICAgIGZ1bmN0aW9uIGV4dGVuZChjdXN0b20sIGRlZmF1bHRzKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gZGVmYXVsdHMpIHtcbiAgICAgICAgaWYgKGN1c3RvbVtrZXldID09IG51bGwpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBkZWZhdWx0c1trZXldO1xuICAgICAgICAgIGN1c3RvbVtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjdXN0b207XG4gICAgfVxuICBcbiAgICBmdW5jdGlvbiBpc01vYmlsZShhZ2VudCkge1xuICAgICAgcmV0dXJuICgvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QoYWdlbnQpXG4gICAgICApO1xuICAgIH1cbiAgXG4gICAgZnVuY3Rpb24gY3JlYXRlRXZlbnQoZXZlbnQpIHtcbiAgICAgIHZhciBidWJibGUgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGFyZ3VtZW50c1sxXTtcbiAgICAgIHZhciBjYW5jZWwgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGFyZ3VtZW50c1syXTtcbiAgICAgIHZhciBkZXRhaWwgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDMgfHwgYXJndW1lbnRzWzNdID09PSB1bmRlZmluZWQgPyBudWxsIDogYXJndW1lbnRzWzNdO1xuICBcbiAgICAgIHZhciBjdXN0b21FdmVudCA9IHZvaWQgMDtcbiAgICAgIGlmIChkb2N1bWVudC5jcmVhdGVFdmVudCAhPSBudWxsKSB7XG4gICAgICAgIC8vIFczQyBET01cbiAgICAgICAgY3VzdG9tRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgICAgY3VzdG9tRXZlbnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LCBidWJibGUsIGNhbmNlbCwgZGV0YWlsKTtcbiAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QgIT0gbnVsbCkge1xuICAgICAgICAvLyBJRSBET00gPCA5XG4gICAgICAgIGN1c3RvbUV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QoKTtcbiAgICAgICAgY3VzdG9tRXZlbnQuZXZlbnRUeXBlID0gZXZlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXN0b21FdmVudC5ldmVudE5hbWUgPSBldmVudDtcbiAgICAgIH1cbiAgXG4gICAgICByZXR1cm4gY3VzdG9tRXZlbnQ7XG4gICAgfVxuICBcbiAgICBmdW5jdGlvbiBlbWl0RXZlbnQoZWxlbSwgZXZlbnQpIHtcbiAgICAgIGlmIChlbGVtLmRpc3BhdGNoRXZlbnQgIT0gbnVsbCkge1xuICAgICAgICAvLyBXM0MgRE9NXG4gICAgICAgIGVsZW0uZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICB9IGVsc2UgaWYgKGV2ZW50IGluIChlbGVtICE9IG51bGwpKSB7XG4gICAgICAgIGVsZW1bZXZlbnRdKCk7XG4gICAgICB9IGVsc2UgaWYgKCdvbicgKyBldmVudCBpbiAoZWxlbSAhPSBudWxsKSkge1xuICAgICAgICBlbGVtWydvbicgKyBldmVudF0oKTtcbiAgICAgIH1cbiAgICB9XG4gIFxuICAgIGZ1bmN0aW9uIGFkZEV2ZW50KGVsZW0sIGV2ZW50LCBmbikge1xuICAgICAgaWYgKGVsZW0uYWRkRXZlbnRMaXN0ZW5lciAhPSBudWxsKSB7XG4gICAgICAgIC8vIFczQyBET01cbiAgICAgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBmbiwgZmFsc2UpO1xuICAgICAgfSBlbHNlIGlmIChlbGVtLmF0dGFjaEV2ZW50ICE9IG51bGwpIHtcbiAgICAgICAgLy8gSUUgRE9NXG4gICAgICAgIGVsZW0uYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBmbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBmYWxsYmFja1xuICAgICAgICBlbGVtW2V2ZW50XSA9IGZuO1xuICAgICAgfVxuICAgIH1cbiAgXG4gICAgZnVuY3Rpb24gcmVtb3ZlRXZlbnQoZWxlbSwgZXZlbnQsIGZuKSB7XG4gICAgICBpZiAoZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICE9IG51bGwpIHtcbiAgICAgICAgLy8gVzNDIERPTVxuICAgICAgICBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGZuLCBmYWxzZSk7XG4gICAgICB9IGVsc2UgaWYgKGVsZW0uZGV0YWNoRXZlbnQgIT0gbnVsbCkge1xuICAgICAgICAvLyBJRSBET01cbiAgICAgICAgZWxlbS5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGZuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGZhbGxiYWNrXG4gICAgICAgIGRlbGV0ZSBlbGVtW2V2ZW50XTtcbiAgICAgIH1cbiAgICB9XG4gIFxuICAgIGZ1bmN0aW9uIGdldElubmVySGVpZ2h0KCkge1xuICAgICAgaWYgKCdpbm5lckhlaWdodCcgaW4gd2luZG93KSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICB9XG4gIFxuICAgICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgfVxuICBcbiAgICAvLyBNaW5pbWFsaXN0aWMgV2Vha01hcCBzaGltLCBqdXN0IGluIGNhc2UuXG4gICAgdmFyIFdlYWtNYXAgPSB3aW5kb3cuV2Vha01hcCB8fCB3aW5kb3cuTW96V2Vha01hcCB8fCBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2Vha01hcCk7XG4gIFxuICAgICAgICB0aGlzLmtleXMgPSBbXTtcbiAgICAgICAgdGhpcy52YWx1ZXMgPSBbXTtcbiAgICAgIH1cbiAgXG4gICAgICBfY3JlYXRlQ2xhc3MoV2Vha01hcCwgW3tcbiAgICAgICAga2V5OiAnZ2V0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMua2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLmtleXNbaV07XG4gICAgICAgICAgICBpZiAoaXRlbSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdzZXQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMua2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLmtleXNbaV07XG4gICAgICAgICAgICBpZiAoaXRlbSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgIHRoaXMudmFsdWVzW2ldID0gdmFsdWU7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmtleXMucHVzaChrZXkpO1xuICAgICAgICAgIHRoaXMudmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XSk7XG4gIFxuICAgICAgcmV0dXJuIFdlYWtNYXA7XG4gICAgfSgpO1xuICBcbiAgICAvLyBEdW1teSBNdXRhdGlvbk9ic2VydmVyLCB0byBhdm9pZCByYWlzaW5nIGV4Y2VwdGlvbnMuXG4gICAgdmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2Via2l0TXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuTW96TXV0YXRpb25PYnNlcnZlciB8fCAoX3RlbXAgPSBfY2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBNdXRhdGlvbk9ic2VydmVyKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTXV0YXRpb25PYnNlcnZlcik7XG4gIFxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUgIT09IG51bGwpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ011dGF0aW9uT2JzZXJ2ZXIgaXMgbm90IHN1cHBvcnRlZCBieSB5b3VyIGJyb3dzZXIuJyk7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdXT1cuanMgY2Fubm90IGRldGVjdCBkb20gbXV0YXRpb25zLCBwbGVhc2UgY2FsbCAuc3luYygpIGFmdGVyIGxvYWRpbmcgbmV3IGNvbnRlbnQuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgXG4gICAgICBfY3JlYXRlQ2xhc3MoTXV0YXRpb25PYnNlcnZlciwgW3tcbiAgICAgICAga2V5OiAnb2JzZXJ2ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvYnNlcnZlKCkge31cbiAgICAgIH1dKTtcbiAgXG4gICAgICByZXR1cm4gTXV0YXRpb25PYnNlcnZlcjtcbiAgICB9KCksIF9jbGFzcy5ub3RTdXBwb3J0ZWQgPSB0cnVlLCBfdGVtcCk7XG4gIFxuICAgIC8vIGdldENvbXB1dGVkU3R5bGUgc2hpbSwgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMTc5NzI5NFxuICAgIHZhciBnZXRDb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUgfHwgZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbCkge1xuICAgICAgdmFyIGdldENvbXB1dGVkU3R5bGVSWCA9IC8oXFwtKFthLXpdKXsxfSkvZztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGdldFByb3BlcnR5VmFsdWU6IGZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUocHJvcCkge1xuICAgICAgICAgIGlmIChwcm9wID09PSAnZmxvYXQnKSB7XG4gICAgICAgICAgICBwcm9wID0gJ3N0eWxlRmxvYXQnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZVJYLnRlc3QocHJvcCkpIHtcbiAgICAgICAgICAgIHByb3AucmVwbGFjZShnZXRDb21wdXRlZFN0eWxlUlgsIGZ1bmN0aW9uIChfLCBfY2hhcikge1xuICAgICAgICAgICAgICByZXR1cm4gX2NoYXIudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgY3VycmVudFN0eWxlID0gZWwuY3VycmVudFN0eWxlO1xuICBcbiAgICAgICAgICByZXR1cm4gKGN1cnJlbnRTdHlsZSAhPSBudWxsID8gY3VycmVudFN0eWxlW3Byb3BdIDogdm9pZCAwKSB8fCBudWxsO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gIFxuICAgIHZhciBXT1cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBXT1coKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XG4gIFxuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV09XKTtcbiAgXG4gICAgICAgIHRoaXMuZGVmYXVsdHMgPSB7XG4gICAgICAgICAgYm94Q2xhc3M6ICd3b3cnLFxuICAgICAgICAgIGFuaW1hdGVDbGFzczogJ2FuaW1hdGVkJyxcbiAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgbW9iaWxlOiB0cnVlLFxuICAgICAgICAgIGxpdmU6IHRydWUsXG4gICAgICAgICAgY2FsbGJhY2s6IG51bGwsXG4gICAgICAgICAgc2Nyb2xsQ29udGFpbmVyOiBudWxsLFxuICAgICAgICAgIHJlc2V0QW5pbWF0aW9uOiB0cnVlXG4gICAgICAgIH07XG4gIFxuICAgICAgICB0aGlzLmFuaW1hdGUgPSBmdW5jdGlvbiBhbmltYXRlRmFjdG9yeSgpIHtcbiAgICAgICAgICBpZiAoJ3JlcXVlc3RBbmltYXRpb25GcmFtZScgaW4gd2luZG93KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0oKTtcbiAgXG4gICAgICAgIHRoaXMudmVuZG9ycyA9IFsnbW96JywgJ3dlYmtpdCddO1xuICBcbiAgICAgICAgdGhpcy5zdGFydCA9IHRoaXMuc3RhcnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5yZXNldEFuaW1hdGlvbiA9IHRoaXMucmVzZXRBbmltYXRpb24uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zY3JvbGxIYW5kbGVyID0gdGhpcy5zY3JvbGxIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc2Nyb2xsQ2FsbGJhY2sgPSB0aGlzLnNjcm9sbENhbGxiYWNrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc2Nyb2xsZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGV4dGVuZChvcHRpb25zLCB0aGlzLmRlZmF1bHRzKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuc2Nyb2xsQ29udGFpbmVyICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLmNvbmZpZy5zY3JvbGxDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG9wdGlvbnMuc2Nyb2xsQ29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBNYXAgb2YgZWxlbWVudHMgdG8gYW5pbWF0aW9uIG5hbWVzOlxuICAgICAgICB0aGlzLmFuaW1hdGlvbk5hbWVDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG4gICAgICAgIHRoaXMud293RXZlbnQgPSBjcmVhdGVFdmVudCh0aGlzLmNvbmZpZy5ib3hDbGFzcyk7XG4gICAgICB9XG4gIFxuICAgICAgX2NyZWF0ZUNsYXNzKFdPVywgW3tcbiAgICAgICAga2V5OiAnaW5pdCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgIHRoaXMuZWxlbWVudCA9IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgICAgaWYgKGlzSW4oZG9jdW1lbnQucmVhZHlTdGF0ZSwgWydpbnRlcmFjdGl2ZScsICdjb21wbGV0ZSddKSkge1xuICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhZGRFdmVudChkb2N1bWVudCwgJ0RPTUNvbnRlbnRMb2FkZWQnLCB0aGlzLnN0YXJ0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5maW5pc2hlZCA9IFtdO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3N0YXJ0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gIFxuICAgICAgICAgIHRoaXMuc3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuYm94ZXMgPSBbXS5zbGljZS5jYWxsKHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHRoaXMuY29uZmlnLmJveENsYXNzKSk7XG4gICAgICAgICAgdGhpcy5hbGwgPSB0aGlzLmJveGVzLnNsaWNlKDApO1xuICAgICAgICAgIGlmICh0aGlzLmJveGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQoKSkge1xuICAgICAgICAgICAgICB0aGlzLnJlc2V0U3R5bGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ib3hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBib3ggPSB0aGlzLmJveGVzW2ldO1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlTdHlsZShib3gsIHRydWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCgpKSB7XG4gICAgICAgICAgICBhZGRFdmVudCh0aGlzLmNvbmZpZy5zY3JvbGxDb250YWluZXIgfHwgd2luZG93LCAnc2Nyb2xsJywgdGhpcy5zY3JvbGxIYW5kbGVyKTtcbiAgICAgICAgICAgIGFkZEV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuc2Nyb2xsSGFuZGxlcik7XG4gICAgICAgICAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwodGhpcy5zY3JvbGxDYWxsYmFjaywgNTApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy5jb25maWcubGl2ZSkge1xuICAgICAgICAgICAgdmFyIG11dCA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChyZWNvcmRzKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmVjb3Jkcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciByZWNvcmQgPSByZWNvcmRzW2pdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgcmVjb3JkLmFkZGVkTm9kZXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgIHZhciBub2RlID0gcmVjb3JkLmFkZGVkTm9kZXNba107XG4gICAgICAgICAgICAgICAgICBfdGhpcy5kb1N5bmMobm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG11dC5vYnNlcnZlKGRvY3VtZW50LmJvZHksIHtcbiAgICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICAgICAgICBzdWJ0cmVlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnc3RvcCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgICAgIHRoaXMuc3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgcmVtb3ZlRXZlbnQodGhpcy5jb25maWcuc2Nyb2xsQ29udGFpbmVyIHx8IHdpbmRvdywgJ3Njcm9sbCcsIHRoaXMuc2Nyb2xsSGFuZGxlcik7XG4gICAgICAgICAgcmVtb3ZlRXZlbnQod2luZG93LCAncmVzaXplJywgdGhpcy5zY3JvbGxIYW5kbGVyKTtcbiAgICAgICAgICBpZiAodGhpcy5pbnRlcnZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdzeW5jJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN5bmMoKSB7XG4gICAgICAgICAgaWYgKE11dGF0aW9uT2JzZXJ2ZXIubm90U3VwcG9ydGVkKSB7XG4gICAgICAgICAgICB0aGlzLmRvU3luYyh0aGlzLmVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdkb1N5bmMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZG9TeW5jKGVsZW1lbnQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICd1bmRlZmluZWQnIHx8IGVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudDtcbiAgICAgICAgICB2YXIgaXRlcmFibGUgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgdGhpcy5jb25maWcuYm94Q2xhc3MpO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlcmFibGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib3ggPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgIGlmICghaXNJbihib3gsIHRoaXMuYWxsKSkge1xuICAgICAgICAgICAgICB0aGlzLmJveGVzLnB1c2goYm94KTtcbiAgICAgICAgICAgICAgdGhpcy5hbGwucHVzaChib3gpO1xuICAgICAgICAgICAgICBpZiAodGhpcy5zdG9wcGVkIHx8IHRoaXMuZGlzYWJsZWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRTdHlsZSgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlTdHlsZShib3gsIHRydWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoaXMuc2Nyb2xsZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdzaG93JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNob3coYm94KSB7XG4gICAgICAgICAgdGhpcy5hcHBseVN0eWxlKGJveCk7XG4gICAgICAgICAgYm94LmNsYXNzTmFtZSA9IGJveC5jbGFzc05hbWUgKyAnICcgKyB0aGlzLmNvbmZpZy5hbmltYXRlQ2xhc3M7XG4gICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmNhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmNhbGxiYWNrKGJveCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVtaXRFdmVudChib3gsIHRoaXMud293RXZlbnQpO1xuICBcbiAgICAgICAgICBpZiAodGhpcy5jb25maWcucmVzZXRBbmltYXRpb24pIHtcbiAgICAgICAgICAgIGFkZEV2ZW50KGJveCwgJ2FuaW1hdGlvbmVuZCcsIHRoaXMucmVzZXRBbmltYXRpb24pO1xuICAgICAgICAgICAgYWRkRXZlbnQoYm94LCAnb2FuaW1hdGlvbmVuZCcsIHRoaXMucmVzZXRBbmltYXRpb24pO1xuICAgICAgICAgICAgYWRkRXZlbnQoYm94LCAnd2Via2l0QW5pbWF0aW9uRW5kJywgdGhpcy5yZXNldEFuaW1hdGlvbik7XG4gICAgICAgICAgICBhZGRFdmVudChib3gsICdNU0FuaW1hdGlvbkVuZCcsIHRoaXMucmVzZXRBbmltYXRpb24pO1xuICAgICAgICAgIH1cbiAgXG4gICAgICAgICAgcmV0dXJuIGJveDtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdhcHBseVN0eWxlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5U3R5bGUoYm94LCBoaWRkZW4pIHtcbiAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgXG4gICAgICAgICAgdmFyIGR1cmF0aW9uID0gYm94LmdldEF0dHJpYnV0ZSgnZGF0YS13b3ctZHVyYXRpb24nKTtcbiAgICAgICAgICB2YXIgZGVsYXkgPSBib3guZ2V0QXR0cmlidXRlKCdkYXRhLXdvdy1kZWxheScpO1xuICAgICAgICAgIHZhciBpdGVyYXRpb24gPSBib3guZ2V0QXR0cmlidXRlKCdkYXRhLXdvdy1pdGVyYXRpb24nKTtcbiAgXG4gICAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLmN1c3RvbVN0eWxlKGJveCwgaGlkZGVuLCBkdXJhdGlvbiwgZGVsYXksIGl0ZXJhdGlvbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVzZXRTdHlsZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldFN0eWxlKCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ib3hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJveCA9IHRoaXMuYm94ZXNbaV07XG4gICAgICAgICAgICBib3guc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdyZXNldEFuaW1hdGlvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldEFuaW1hdGlvbihldmVudCkge1xuICAgICAgICAgIGlmIChldmVudC50eXBlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZignYW5pbWF0aW9uZW5kJykgPj0gMCkge1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldCB8fCBldmVudC5zcmNFbGVtZW50O1xuICAgICAgICAgICAgdGFyZ2V0LmNsYXNzTmFtZSA9IHRhcmdldC5jbGFzc05hbWUucmVwbGFjZSh0aGlzLmNvbmZpZy5hbmltYXRlQ2xhc3MsICcnKS50cmltKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2N1c3RvbVN0eWxlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGN1c3RvbVN0eWxlKGJveCwgaGlkZGVuLCBkdXJhdGlvbiwgZGVsYXksIGl0ZXJhdGlvbikge1xuICAgICAgICAgIGlmIChoaWRkZW4pIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVBbmltYXRpb25OYW1lKGJveCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJveC5zdHlsZS52aXNpYmlsaXR5ID0gaGlkZGVuID8gJ2hpZGRlbicgOiAndmlzaWJsZSc7XG4gIFxuICAgICAgICAgIGlmIChkdXJhdGlvbikge1xuICAgICAgICAgICAgdGhpcy52ZW5kb3JTZXQoYm94LnN0eWxlLCB7IGFuaW1hdGlvbkR1cmF0aW9uOiBkdXJhdGlvbiB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGRlbGF5KSB7XG4gICAgICAgICAgICB0aGlzLnZlbmRvclNldChib3guc3R5bGUsIHsgYW5pbWF0aW9uRGVsYXk6IGRlbGF5IH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlcmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnZlbmRvclNldChib3guc3R5bGUsIHsgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IGl0ZXJhdGlvbiB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy52ZW5kb3JTZXQoYm94LnN0eWxlLCB7IGFuaW1hdGlvbk5hbWU6IGhpZGRlbiA/ICdub25lJyA6IHRoaXMuY2FjaGVkQW5pbWF0aW9uTmFtZShib3gpIH0pO1xuICBcbiAgICAgICAgICByZXR1cm4gYm94O1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3ZlbmRvclNldCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB2ZW5kb3JTZXQoZWxlbSwgcHJvcGVydGllcykge1xuICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gcHJvcGVydGllcykge1xuICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcHJvcGVydGllc1tuYW1lXTtcbiAgICAgICAgICAgICAgZWxlbVsnJyArIG5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy52ZW5kb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZlbmRvciA9IHRoaXMudmVuZG9yc1tpXTtcbiAgICAgICAgICAgICAgICBlbGVtWycnICsgdmVuZG9yICsgbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyKDEpXSA9IHZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3ZlbmRvckNTUycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB2ZW5kb3JDU1MoZWxlbSwgcHJvcGVydHkpIHtcbiAgICAgICAgICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW0pO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBzdHlsZS5nZXRQcm9wZXJ0eUNTU1ZhbHVlKHByb3BlcnR5KTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudmVuZG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHZlbmRvciA9IHRoaXMudmVuZG9yc1tpXTtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCB8fCBzdHlsZS5nZXRQcm9wZXJ0eUNTU1ZhbHVlKCctJyArIHZlbmRvciArICctJyArIHByb3BlcnR5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdhbmltYXRpb25OYW1lJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFuaW1hdGlvbk5hbWUoYm94KSB7XG4gICAgICAgICAgdmFyIGFOYW1lID0gdm9pZCAwO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhTmFtZSA9IHRoaXMudmVuZG9yQ1NTKGJveCwgJ2FuaW1hdGlvbi1uYW1lJykuY3NzVGV4dDtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gT3BlcmEsIGZhbGwgYmFjayB0byBwbGFpbiBwcm9wZXJ0eSB2YWx1ZVxuICAgICAgICAgICAgYU5hbWUgPSBnZXRDb21wdXRlZFN0eWxlKGJveCkuZ2V0UHJvcGVydHlWYWx1ZSgnYW5pbWF0aW9uLW5hbWUnKTtcbiAgICAgICAgICB9XG4gIFxuICAgICAgICAgIGlmIChhTmFtZSA9PT0gJ25vbmUnKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7IC8vIFNWRy9GaXJlZm94LCB1bmFibGUgdG8gZ2V0IGFuaW1hdGlvbiBuYW1lP1xuICAgICAgICAgIH1cbiAgXG4gICAgICAgICAgcmV0dXJuIGFOYW1lO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2NhY2hlQW5pbWF0aW9uTmFtZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjYWNoZUFuaW1hdGlvbk5hbWUoYm94KSB7XG4gICAgICAgICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9OTIxODM0XG4gICAgICAgICAgLy8gYm94LmRhdGFzZXQgaXMgbm90IHN1cHBvcnRlZCBmb3IgU1ZHIGVsZW1lbnRzIGluIEZpcmVmb3hcbiAgICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRpb25OYW1lQ2FjaGUuc2V0KGJveCwgdGhpcy5hbmltYXRpb25OYW1lKGJveCkpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2NhY2hlZEFuaW1hdGlvbk5hbWUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2FjaGVkQW5pbWF0aW9uTmFtZShib3gpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRpb25OYW1lQ2FjaGUuZ2V0KGJveCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnc2Nyb2xsSGFuZGxlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzY3JvbGxIYW5kbGVyKCkge1xuICAgICAgICAgIHRoaXMuc2Nyb2xsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3Njcm9sbENhbGxiYWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNjcm9sbENhbGxiYWNrKCkge1xuICAgICAgICAgIGlmICh0aGlzLnNjcm9sbGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbGVkID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJveGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIHZhciBib3ggPSB0aGlzLmJveGVzW2ldO1xuICAgICAgICAgICAgICBpZiAoYm94KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNWaXNpYmxlKGJveCkpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyhib3gpO1xuICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChib3gpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJveGVzID0gcmVzdWx0cztcbiAgICAgICAgICAgIGlmICghdGhpcy5ib3hlcy5sZW5ndGggJiYgIXRoaXMuY29uZmlnLmxpdmUpIHtcbiAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ29mZnNldFRvcCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvZmZzZXRUb3AoZWxlbWVudCkge1xuICAgICAgICAgIC8vIFNWRyBlbGVtZW50cyBkb24ndCBoYXZlIGFuIG9mZnNldFRvcCBpbiBGaXJlZm94LlxuICAgICAgICAgIC8vIFRoaXMgd2lsbCB1c2UgdGhlaXIgbmVhcmVzdCBwYXJlbnQgdGhhdCBoYXMgYW4gb2Zmc2V0VG9wLlxuICAgICAgICAgIC8vIEFsc28sIHVzaW5nICgnb2Zmc2V0VG9wJyBvZiBlbGVtZW50KSBjYXVzZXMgYW4gZXhjZXB0aW9uIGluIEZpcmVmb3guXG4gICAgICAgICAgd2hpbGUgKGVsZW1lbnQub2Zmc2V0VG9wID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB0b3AgPSBlbGVtZW50Lm9mZnNldFRvcDtcbiAgICAgICAgICB3aGlsZSAoZWxlbWVudC5vZmZzZXRQYXJlbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudDtcbiAgICAgICAgICAgIHRvcCArPSBlbGVtZW50Lm9mZnNldFRvcDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRvcDtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdpc1Zpc2libGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNWaXNpYmxlKGJveCkge1xuICAgICAgICAgIHZhciBvZmZzZXQgPSBib3guZ2V0QXR0cmlidXRlKCdkYXRhLXdvdy1vZmZzZXQnKSB8fCB0aGlzLmNvbmZpZy5vZmZzZXQ7XG4gICAgICAgICAgdmFyIHZpZXdUb3AgPSB0aGlzLmNvbmZpZy5zY3JvbGxDb250YWluZXIgJiYgdGhpcy5jb25maWcuc2Nyb2xsQ29udGFpbmVyLnNjcm9sbFRvcCB8fCB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICAgICAgdmFyIHZpZXdCb3R0b20gPSB2aWV3VG9wICsgTWF0aC5taW4odGhpcy5lbGVtZW50LmNsaWVudEhlaWdodCwgZ2V0SW5uZXJIZWlnaHQoKSkgLSBvZmZzZXQ7XG4gICAgICAgICAgdmFyIHRvcCA9IHRoaXMub2Zmc2V0VG9wKGJveCk7XG4gICAgICAgICAgdmFyIGJvdHRvbSA9IHRvcCArIGJveC5jbGllbnRIZWlnaHQ7XG4gIFxuICAgICAgICAgIHJldHVybiB0b3AgPD0gdmlld0JvdHRvbSAmJiBib3R0b20gPj0gdmlld1RvcDtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdkaXNhYmxlZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlZCgpIHtcbiAgICAgICAgICByZXR1cm4gIXRoaXMuY29uZmlnLm1vYmlsZSAmJiBpc01vYmlsZShuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuICBcbiAgICAgIHJldHVybiBXT1c7XG4gICAgfSgpO1xuICBcbiAgICBleHBvcnRzLmRlZmF1bHQgPSBXT1c7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4gIH0pO1xuLyohIEBsaWNlbnNlIFNjcm9sbFJldmVhbCB2NC4wLjVcblxuXHRDb3B5cmlnaHQgMjAxOCBGaXNzc2lvbiBMTEMuXG5cblx0TGljZW5zZWQgdW5kZXIgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIDMuMCBmb3Jcblx0Y29tcGF0aWJsZSBvcGVuIHNvdXJjZSBwcm9qZWN0cyBhbmQgbm9uLWNvbW1lcmNpYWwgdXNlLlxuXG5cdEZvciBjb21tZXJjaWFsIHNpdGVzLCB0aGVtZXMsIHByb2plY3RzLCBhbmQgYXBwbGljYXRpb25zLFxuXHRrZWVwIHlvdXIgc291cmNlIGNvZGUgcHJpdmF0ZS9wcm9wcmlldGFyeSBieSBwdXJjaGFzaW5nXG5cdGEgY29tbWVyY2lhbCBsaWNlbnNlIGZyb20gaHR0cHM6Ly9zY3JvbGxyZXZlYWxqcy5vcmcvXG4qL1xudmFyIFNjcm9sbFJldmVhbD1mdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciByPXtkZWxheTowLGRpc3RhbmNlOlwiMFwiLGR1cmF0aW9uOjYwMCxlYXNpbmc6XCJjdWJpYy1iZXppZXIoMC41LCAwLCAwLCAxKVwiLGludGVydmFsOjAsb3BhY2l0eTowLG9yaWdpbjpcImJvdHRvbVwiLHJvdGF0ZTp7eDowLHk6MCx6OjB9LHNjYWxlOjEsY2xlYW51cDohMSxjb250YWluZXI6ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGRlc2t0b3A6ITAsbW9iaWxlOiEwLHJlc2V0OiExLHVzZURlbGF5OlwiYWx3YXlzXCIsdmlld0ZhY3RvcjowLHZpZXdPZmZzZXQ6e3RvcDowLHJpZ2h0OjAsYm90dG9tOjAsbGVmdDowfSxhZnRlclJlc2V0OmZ1bmN0aW9uKCl7fSxhZnRlclJldmVhbDpmdW5jdGlvbigpe30sYmVmb3JlUmVzZXQ6ZnVuY3Rpb24oKXt9LGJlZm9yZVJldmVhbDpmdW5jdGlvbigpe319O3ZhciBuPXtzdWNjZXNzOmZ1bmN0aW9uKCl7ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJzclwiKSxkb2N1bWVudC5ib2R5P2RvY3VtZW50LmJvZHkuc3R5bGUuaGVpZ2h0PVwiMTAwJVwiOmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsZnVuY3Rpb24oKXtkb2N1bWVudC5ib2R5LnN0eWxlLmhlaWdodD1cIjEwMCVcIn0pfSxmYWlsdXJlOmZ1bmN0aW9uKCl7cmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwic3JcIikse2NsZWFuOmZ1bmN0aW9uKCl7fSxkZXN0cm95OmZ1bmN0aW9uKCl7fSxyZXZlYWw6ZnVuY3Rpb24oKXt9LHN5bmM6ZnVuY3Rpb24oKXt9LGdldCBub29wKCl7cmV0dXJuITB9fX19O2Z1bmN0aW9uIG8oZSl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdy5Ob2RlP2UgaW5zdGFuY2VvZiB3aW5kb3cuTm9kZTpudWxsIT09ZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLm5vZGVUeXBlJiZcInN0cmluZ1wiPT10eXBlb2YgZS5ub2RlTmFtZX1mdW5jdGlvbiB1KGUsdCl7aWYodm9pZCAwPT09dCYmKHQ9ZG9jdW1lbnQpLGUgaW5zdGFuY2VvZiBBcnJheSlyZXR1cm4gZS5maWx0ZXIobyk7aWYobyhlKSlyZXR1cm5bZV07aWYobj1lLGk9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG4pLFwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cuTm9kZUxpc3Q/biBpbnN0YW5jZW9mIHdpbmRvdy5Ob2RlTGlzdDpudWxsIT09biYmXCJvYmplY3RcIj09dHlwZW9mIG4mJlwibnVtYmVyXCI9PXR5cGVvZiBuLmxlbmd0aCYmL15cXFtvYmplY3QgKEhUTUxDb2xsZWN0aW9ufE5vZGVMaXN0fE9iamVjdClcXF0kLy50ZXN0KGkpJiYoMD09PW4ubGVuZ3RofHxvKG5bMF0pKSlyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZSk7dmFyIG4saTtpZihcInN0cmluZ1wiPT10eXBlb2YgZSl0cnl7dmFyIHI9dC5xdWVyeVNlbGVjdG9yQWxsKGUpO3JldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChyKX1jYXRjaChlKXtyZXR1cm5bXX1yZXR1cm5bXX1mdW5jdGlvbiBzKGUpe3JldHVybiBudWxsIT09ZSYmZSBpbnN0YW5jZW9mIE9iamVjdCYmKGUuY29uc3RydWN0b3I9PT1PYmplY3R8fFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkpfWZ1bmN0aW9uIGYobixpKXtpZihzKG4pKXJldHVybiBPYmplY3Qua2V5cyhuKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBpKG5bZV0sZSxuKX0pO2lmKG4gaW5zdGFuY2VvZiBBcnJheSlyZXR1cm4gbi5mb3JFYWNoKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGkoZSx0LG4pfSk7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIGVpdGhlciBhbiBhcnJheSBvciBvYmplY3QgbGl0ZXJhbC5cIil9ZnVuY3Rpb24gaChlKXtmb3IodmFyIHQ9W10sbj1hcmd1bWVudHMubGVuZ3RoLTE7MDxuLS07KXRbbl09YXJndW1lbnRzW24rMV07aWYodGhpcy5jb25zdHJ1Y3Rvci5kZWJ1ZyYmY29uc29sZSl7dmFyIGk9XCIlY1Njcm9sbFJldmVhbDogXCIrZTt0LmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGkrPVwiXFxuIOKAlCBcIitlfSksY29uc29sZS5sb2coaSxcImNvbG9yOiAjZWE2NTRiO1wiKX19ZnVuY3Rpb24gdCgpe3ZhciBuPXRoaXMsaT17YWN0aXZlOltdLHN0YWxlOltdfSx0PXthY3RpdmU6W10sc3RhbGU6W119LHI9e2FjdGl2ZTpbXSxzdGFsZTpbXX07dHJ5e2YodShcIltkYXRhLXNyLWlkXVwiKSxmdW5jdGlvbihlKXt2YXIgdD1wYXJzZUludChlLmdldEF0dHJpYnV0ZShcImRhdGEtc3ItaWRcIikpO2kuYWN0aXZlLnB1c2godCl9KX1jYXRjaChlKXt0aHJvdyBlfWYodGhpcy5zdG9yZS5lbGVtZW50cyxmdW5jdGlvbihlKXstMT09PWkuYWN0aXZlLmluZGV4T2YoZS5pZCkmJmkuc3RhbGUucHVzaChlLmlkKX0pLGYoaS5zdGFsZSxmdW5jdGlvbihlKXtyZXR1cm4gZGVsZXRlIG4uc3RvcmUuZWxlbWVudHNbZV19KSxmKHRoaXMuc3RvcmUuZWxlbWVudHMsZnVuY3Rpb24oZSl7LTE9PT1yLmFjdGl2ZS5pbmRleE9mKGUuY29udGFpbmVySWQpJiZyLmFjdGl2ZS5wdXNoKGUuY29udGFpbmVySWQpLGUuaGFzT3duUHJvcGVydHkoXCJzZXF1ZW5jZVwiKSYmLTE9PT10LmFjdGl2ZS5pbmRleE9mKGUuc2VxdWVuY2UuaWQpJiZ0LmFjdGl2ZS5wdXNoKGUuc2VxdWVuY2UuaWQpfSksZih0aGlzLnN0b3JlLmNvbnRhaW5lcnMsZnVuY3Rpb24oZSl7LTE9PT1yLmFjdGl2ZS5pbmRleE9mKGUuaWQpJiZyLnN0YWxlLnB1c2goZS5pZCl9KSxmKHIuc3RhbGUsZnVuY3Rpb24oZSl7dmFyIHQ9bi5zdG9yZS5jb250YWluZXJzW2VdLm5vZGU7dC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsbi5kZWxlZ2F0ZSksdC5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsbi5kZWxlZ2F0ZSksZGVsZXRlIG4uc3RvcmUuY29udGFpbmVyc1tlXX0pLGYodGhpcy5zdG9yZS5zZXF1ZW5jZXMsZnVuY3Rpb24oZSl7LTE9PT10LmFjdGl2ZS5pbmRleE9mKGUuaWQpJiZ0LnN0YWxlLnB1c2goZS5pZCl9KSxmKHQuc3RhbGUsZnVuY3Rpb24oZSl7cmV0dXJuIGRlbGV0ZSBuLnN0b3JlLnNlcXVlbmNlc1tlXX0pfWZ1bmN0aW9uIHAoZSl7dmFyIGkscj10aGlzO3RyeXtmKHUoZSksZnVuY3Rpb24oZSl7dmFyIHQ9ZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNyLWlkXCIpO2lmKG51bGwhPT10KXtpPSEwO3ZhciBuPXIuc3RvcmUuZWxlbWVudHNbdF07bi5jYWxsYmFja1RpbWVyJiZ3aW5kb3cuY2xlYXJUaW1lb3V0KG4uY2FsbGJhY2tUaW1lci5jbG9jayksZS5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLG4uc3R5bGVzLmlubGluZS5nZW5lcmF0ZWQpLGUucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1zci1pZFwiKSxkZWxldGUgci5zdG9yZS5lbGVtZW50c1t0XX19KX1jYXRjaChlKXtyZXR1cm4gaC5jYWxsKHRoaXMsXCJDbGVhbiBmYWlsZWQuXCIsZS5tZXNzYWdlKX1pZihpKXRyeXt0LmNhbGwodGhpcyl9Y2F0Y2goZSl7cmV0dXJuIGguY2FsbCh0aGlzLFwiQ2xlYW4gZmFpbGVkLlwiLGUubWVzc2FnZSl9fWZ1bmN0aW9uIE4oZSl7aWYoZS5jb25zdHJ1Y3RvciE9PUFycmF5KXRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBhcnJheS5cIik7aWYoMTY9PT1lLmxlbmd0aClyZXR1cm4gZTtpZig2IT09ZS5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJFeHBlY3RlZCBhcnJheSB3aXRoIGVpdGhlciA2IG9yIDE2IHZhbHVlcy5cIik7dmFyIHQ9eigpO3JldHVybiB0WzBdPWVbMF0sdFsxXT1lWzFdLHRbNF09ZVsyXSx0WzVdPWVbM10sdFsxMl09ZVs0XSx0WzEzXT1lWzVdLHR9ZnVuY3Rpb24geigpe2Zvcih2YXIgZT1bXSx0PTA7dDwxNjt0KyspdCU1PT0wP2UucHVzaCgxKTplLnB1c2goMCk7cmV0dXJuIGV9ZnVuY3Rpb24gRihlLHQpe2Zvcih2YXIgbj1OKGUpLGk9Tih0KSxyPVtdLG89MDtvPDQ7bysrKWZvcih2YXIgcz1bbltvXSxuW28rNF0sbltvKzhdLG5bbysxMl1dLGE9MDthPDQ7YSsrKXt2YXIgYz00KmEsbD1baVtjXSxpW2MrMV0saVtjKzJdLGlbYyszXV0sZD1zWzBdKmxbMF0rc1sxXSpsWzFdK3NbMl0qbFsyXStzWzNdKmxbM107cltvK2NdPWR9cmV0dXJuIHJ9ZnVuY3Rpb24gRChlLHQpe3ZhciBuPXooKTtyZXR1cm4gblswXT1lLG5bNV09XCJudW1iZXJcIj09dHlwZW9mIHQ/dDplLG59dmFyIFM9ZnVuY3Rpb24oKXt2YXIgbj17fSxpPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZTtmdW5jdGlvbiBlKGUsdCl7aWYodm9pZCAwPT09dCYmKHQ9aSksZSYmXCJzdHJpbmdcIj09dHlwZW9mIGUpe2lmKG5bZV0pcmV0dXJuIG5bZV07aWYoXCJzdHJpbmdcIj09dHlwZW9mIHRbZV0pcmV0dXJuIG5bZV09ZTtpZihcInN0cmluZ1wiPT10eXBlb2YgdFtcIi13ZWJraXQtXCIrZV0pcmV0dXJuIG5bZV09XCItd2Via2l0LVwiK2U7dGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1VuYWJsZSB0byBmaW5kIFwiJytlKydcIiBzdHlsZSBwcm9wZXJ0eS4nKX10aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYSBzdHJpbmcuXCIpfXJldHVybiBlLmNsZWFyQ2FjaGU9ZnVuY3Rpb24oKXtyZXR1cm4gbj17fX0sZX0oKTtmdW5jdGlvbiBtKGUpe3ZhciB0PXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGUubm9kZSksbj10LnBvc2l0aW9uLGk9ZS5jb25maWcscj17fSxvPShlLm5vZGUuZ2V0QXR0cmlidXRlKFwic3R5bGVcIil8fFwiXCIpLm1hdGNoKC9bXFx3LV0rXFxzKjpcXHMqW147XStcXHMqL2dpKXx8W107ci5jb21wdXRlZD1vP28ubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLnRyaW0oKX0pLmpvaW4oXCI7IFwiKStcIjtcIjpcIlwiLHIuZ2VuZXJhdGVkPW8uc29tZShmdW5jdGlvbihlKXtyZXR1cm4gZS5tYXRjaCgvdmlzaWJpbGl0eVxccz86XFxzP3Zpc2libGUvaSl9KT9yLmNvbXB1dGVkOm8uY29uY2F0KFtcInZpc2liaWxpdHk6IHZpc2libGVcIl0pLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS50cmltKCl9KS5qb2luKFwiOyBcIikrXCI7XCI7dmFyIHMsYSxjLGwsZCx1LGYsaCxwLG0seSx2LGcsYj1wYXJzZUZsb2F0KHQub3BhY2l0eSksdz1pc05hTihwYXJzZUZsb2F0KGkub3BhY2l0eSkpP3BhcnNlRmxvYXQodC5vcGFjaXR5KTpwYXJzZUZsb2F0KGkub3BhY2l0eSksRT17Y29tcHV0ZWQ6YiE9PXc/XCJvcGFjaXR5OiBcIitiK1wiO1wiOlwiXCIsZ2VuZXJhdGVkOmIhPT13P1wib3BhY2l0eTogXCIrdytcIjtcIjpcIlwifSxqPVtdO2lmKHBhcnNlRmxvYXQoaS5kaXN0YW5jZSkpe3ZhciBUPVwidG9wXCI9PT1pLm9yaWdpbnx8XCJib3R0b21cIj09PWkub3JpZ2luP1wiWVwiOlwiWFwiLGs9aS5kaXN0YW5jZTtcInRvcFwiIT09aS5vcmlnaW4mJlwibGVmdFwiIT09aS5vcmlnaW58fChrPS9eLS8udGVzdChrKT9rLnN1YnN0cigxKTpcIi1cIitrKTt2YXIgTz1rLm1hdGNoKC8oXi0/XFxkK1xcLj9cXGQ/KXwoZW0kfHB4JHwlJCkvZykseD1PWzBdO3N3aXRjaChPWzFdKXtjYXNlXCJlbVwiOms9cGFyc2VJbnQodC5mb250U2l6ZSkqeDticmVhaztjYXNlXCJweFwiOms9eDticmVhaztjYXNlXCIlXCI6az1cIllcIj09PVQ/ZS5ub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCp4LzEwMDplLm5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgqeC8xMDA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVucmVjb2duaXplZCBvciBtaXNzaW5nIGRpc3RhbmNlIHVuaXQuXCIpfVwiWVwiPT09VD9qLnB1c2goKGM9aywobD16KCkpWzEzXT1jLGwpKTpqLnB1c2goKHM9aywoYT16KCkpWzEyXT1zLGEpKX1pLnJvdGF0ZS54JiZqLnB1c2goKGQ9aS5yb3RhdGUueCx1PU1hdGguUEkvMTgwKmQsKGY9eigpKVs1XT1mWzEwXT1NYXRoLmNvcyh1KSxmWzZdPWZbOV09TWF0aC5zaW4odSksZls5XSo9LTEsZikpLGkucm90YXRlLnkmJmoucHVzaCgoaD1pLnJvdGF0ZS55LHA9TWF0aC5QSS8xODAqaCwobT16KCkpWzBdPW1bMTBdPU1hdGguY29zKHApLG1bMl09bVs4XT1NYXRoLnNpbihwKSxtWzJdKj0tMSxtKSksaS5yb3RhdGUueiYmai5wdXNoKCh5PWkucm90YXRlLnosdj1NYXRoLlBJLzE4MCp5LChnPXooKSlbMF09Z1s1XT1NYXRoLmNvcyh2KSxnWzFdPWdbNF09TWF0aC5zaW4odiksZ1s0XSo9LTEsZykpLDEhPT1pLnNjYWxlJiYoMD09PWkuc2NhbGU/ai5wdXNoKEQoMmUtNCkpOmoucHVzaChEKGkuc2NhbGUpKSk7dmFyIEE9e307aWYoai5sZW5ndGgpe0EucHJvcGVydHk9UyhcInRyYW5zZm9ybVwiKSxBLmNvbXB1dGVkPXtyYXc6dFtBLnByb3BlcnR5XSxtYXRyaXg6ZnVuY3Rpb24oZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe3ZhciB0PWUubWF0Y2goL21hdHJpeCgzZCk/XFwoKFteKV0rKVxcKS8pO2lmKHQpcmV0dXJuIE4odFsyXS5zcGxpdChcIiwgXCIpLm1hcChwYXJzZUZsb2F0KSl9cmV0dXJuIHooKX0odFtBLnByb3BlcnR5XSl9LGoudW5zaGlmdChBLmNvbXB1dGVkLm1hdHJpeCk7dmFyIFI9ai5yZWR1Y2UoRik7QS5nZW5lcmF0ZWQ9e2luaXRpYWw6QS5wcm9wZXJ0eStcIjogbWF0cml4M2QoXCIrUi5qb2luKFwiLCBcIikrXCIpO1wiLGZpbmFsOkEucHJvcGVydHkrXCI6IG1hdHJpeDNkKFwiK0EuY29tcHV0ZWQubWF0cml4LmpvaW4oXCIsIFwiKStcIik7XCJ9fWVsc2UgQS5nZW5lcmF0ZWQ9e2luaXRpYWw6XCJcIixmaW5hbDpcIlwifTt2YXIgcT17fTtpZihFLmdlbmVyYXRlZHx8QS5nZW5lcmF0ZWQuaW5pdGlhbCl7cS5wcm9wZXJ0eT1TKFwidHJhbnNpdGlvblwiKSxxLmNvbXB1dGVkPXRbcS5wcm9wZXJ0eV0scS5mcmFnbWVudHM9W107dmFyIFA9aS5kZWxheSxMPWkuZHVyYXRpb24sTT1pLmVhc2luZztFLmdlbmVyYXRlZCYmcS5mcmFnbWVudHMucHVzaCh7ZGVsYXllZDpcIm9wYWNpdHkgXCIrTC8xZTMrXCJzIFwiK00rXCIgXCIrUC8xZTMrXCJzXCIsaW5zdGFudDpcIm9wYWNpdHkgXCIrTC8xZTMrXCJzIFwiK00rXCIgMHNcIn0pLEEuZ2VuZXJhdGVkLmluaXRpYWwmJnEuZnJhZ21lbnRzLnB1c2goe2RlbGF5ZWQ6QS5wcm9wZXJ0eStcIiBcIitMLzFlMytcInMgXCIrTStcIiBcIitQLzFlMytcInNcIixpbnN0YW50OkEucHJvcGVydHkrXCIgXCIrTC8xZTMrXCJzIFwiK00rXCIgMHNcIn0pLHEuY29tcHV0ZWQmJiFxLmNvbXB1dGVkLm1hdGNoKC9hbGwgMHMvKSYmcS5mcmFnbWVudHMudW5zaGlmdCh7ZGVsYXllZDpxLmNvbXB1dGVkLGluc3RhbnQ6cS5jb21wdXRlZH0pO3ZhciBJPXEuZnJhZ21lbnRzLnJlZHVjZShmdW5jdGlvbihlLHQsbil7cmV0dXJuIGUuZGVsYXllZCs9MD09PW4/dC5kZWxheWVkOlwiLCBcIit0LmRlbGF5ZWQsZS5pbnN0YW50Kz0wPT09bj90Lmluc3RhbnQ6XCIsIFwiK3QuaW5zdGFudCxlfSx7ZGVsYXllZDpcIlwiLGluc3RhbnQ6XCJcIn0pO3EuZ2VuZXJhdGVkPXtkZWxheWVkOnEucHJvcGVydHkrXCI6IFwiK0kuZGVsYXllZCtcIjtcIixpbnN0YW50OnEucHJvcGVydHkrXCI6IFwiK0kuaW5zdGFudCtcIjtcIn19ZWxzZSBxLmdlbmVyYXRlZD17ZGVsYXllZDpcIlwiLGluc3RhbnQ6XCJcIn07cmV0dXJue2lubGluZTpyLG9wYWNpdHk6RSxwb3NpdGlvbjpuLHRyYW5zZm9ybTpBLHRyYW5zaXRpb246cX19ZnVuY3Rpb24gYyhlLHQpe3ZvaWQgMD09PXQmJih0PXt9KTt2YXIgbj10LnByaXN0aW5lfHx0aGlzLnByaXN0aW5lLGk9XCJhbHdheXNcIj09PWUuY29uZmlnLnVzZURlbGF5fHxcIm9ubG9hZFwiPT09ZS5jb25maWcudXNlRGVsYXkmJm58fFwib25jZVwiPT09ZS5jb25maWcudXNlRGVsYXkmJiFlLnNlZW4scj1lLnZpc2libGUmJiFlLnJldmVhbGVkLG89IWUudmlzaWJsZSYmZS5yZXZlYWxlZCYmZS5jb25maWcucmVzZXQ7cmV0dXJuIHQucmV2ZWFsfHxyP2Z1bmN0aW9uKGUsdCl7dmFyIG49W2Uuc3R5bGVzLmlubGluZS5nZW5lcmF0ZWQsZS5zdHlsZXMub3BhY2l0eS5jb21wdXRlZCxlLnN0eWxlcy50cmFuc2Zvcm0uZ2VuZXJhdGVkLmZpbmFsXTt0P24ucHVzaChlLnN0eWxlcy50cmFuc2l0aW9uLmdlbmVyYXRlZC5kZWxheWVkKTpuLnB1c2goZS5zdHlsZXMudHJhbnNpdGlvbi5nZW5lcmF0ZWQuaW5zdGFudCk7ZS5yZXZlYWxlZD1lLnNlZW49ITAsZS5ub2RlLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsbi5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuXCJcIiE9PWV9KS5qb2luKFwiIFwiKSksYS5jYWxsKHRoaXMsZSx0KX0uY2FsbCh0aGlzLGUsaSk6dC5yZXNldHx8bz9mdW5jdGlvbihlKXt2YXIgdD1bZS5zdHlsZXMuaW5saW5lLmdlbmVyYXRlZCxlLnN0eWxlcy5vcGFjaXR5LmdlbmVyYXRlZCxlLnN0eWxlcy50cmFuc2Zvcm0uZ2VuZXJhdGVkLmluaXRpYWwsZS5zdHlsZXMudHJhbnNpdGlvbi5nZW5lcmF0ZWQuaW5zdGFudF07ZS5yZXZlYWxlZD0hMSxlLm5vZGUuc2V0QXR0cmlidXRlKFwic3R5bGVcIix0LmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm5cIlwiIT09ZX0pLmpvaW4oXCIgXCIpKSxhLmNhbGwodGhpcyxlKX0uY2FsbCh0aGlzLGUpOnZvaWQgMH1mdW5jdGlvbiBhKGUsdCl7dmFyIG49dGhpcyxpPXQ/ZS5jb25maWcuZHVyYXRpb24rZS5jb25maWcuZGVsYXk6ZS5jb25maWcuZHVyYXRpb24scj1lLnJldmVhbGVkP2UuY29uZmlnLmJlZm9yZVJldmVhbDplLmNvbmZpZy5iZWZvcmVSZXNldCxvPWUucmV2ZWFsZWQ/ZS5jb25maWcuYWZ0ZXJSZXZlYWw6ZS5jb25maWcuYWZ0ZXJSZXNldCxzPTA7ZS5jYWxsYmFja1RpbWVyJiYocz1EYXRlLm5vdygpLWUuY2FsbGJhY2tUaW1lci5zdGFydCx3aW5kb3cuY2xlYXJUaW1lb3V0KGUuY2FsbGJhY2tUaW1lci5jbG9jaykpLHIoZS5ub2RlKSxlLmNhbGxiYWNrVGltZXI9e3N0YXJ0OkRhdGUubm93KCksY2xvY2s6d2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtvKGUubm9kZSksZS5jYWxsYmFja1RpbWVyPW51bGwsZS5yZXZlYWxlZCYmIWUuY29uZmlnLnJlc2V0JiZlLmNvbmZpZy5jbGVhbnVwJiZwLmNhbGwobixlLm5vZGUpfSxpLXMpfX12YXIgZSx5PShlPTAsZnVuY3Rpb24oKXtyZXR1cm4gZSsrfSk7ZnVuY3Rpb24gbChlLHQpe2lmKHZvaWQgMD09PXQmJih0PXRoaXMucHJpc3RpbmUpLCFlLnZpc2libGUmJmUucmV2ZWFsZWQmJmUuY29uZmlnLnJlc2V0KXJldHVybiBjLmNhbGwodGhpcyxlLHtyZXNldDohMH0pO3ZhciBuPXRoaXMuc3RvcmUuc2VxdWVuY2VzW2Uuc2VxdWVuY2UuaWRdLGk9ZS5zZXF1ZW5jZS5pbmRleDtpZihuKXt2YXIgcj1uZXcgZChuLFwidmlzaWJsZVwiLHRoaXMuc3RvcmUpLG89bmV3IGQobixcInJldmVhbGVkXCIsdGhpcy5zdG9yZSk7aWYobi5tb2RlbHM9e3Zpc2libGU6cixyZXZlYWxlZDpvfSwhby5ib2R5Lmxlbmd0aCl7dmFyIHM9bi5tZW1iZXJzW3IuYm9keVswXV0sYT10aGlzLnN0b3JlLmVsZW1lbnRzW3NdO2lmKGEpcmV0dXJuIGcuY2FsbCh0aGlzLG4sci5ib2R5WzBdLC0xLHQpLGcuY2FsbCh0aGlzLG4sci5ib2R5WzBdLDEsdCksYy5jYWxsKHRoaXMsYSx7cmV2ZWFsOiEwLHByaXN0aW5lOnR9KX1pZighbi5ibG9ja2VkLmhlYWQmJmk9PT1bXS5jb25jYXQoby5oZWFkKS5wb3AoKSYmaT49W10uY29uY2F0KHIuYm9keSkuc2hpZnQoKSlyZXR1cm4gZy5jYWxsKHRoaXMsbixpLC0xLHQpLGMuY2FsbCh0aGlzLGUse3JldmVhbDohMCxwcmlzdGluZTp0fSk7aWYoIW4uYmxvY2tlZC5mb290JiZpPT09W10uY29uY2F0KG8uZm9vdCkuc2hpZnQoKSYmaTw9W10uY29uY2F0KHIuYm9keSkucG9wKCkpcmV0dXJuIGcuY2FsbCh0aGlzLG4saSwxLHQpLGMuY2FsbCh0aGlzLGUse3JldmVhbDohMCxwcmlzdGluZTp0fSl9fWZ1bmN0aW9uIHYoZSl7dmFyIHQ9TWF0aC5hYnMoZSk7aWYoaXNOYU4odCkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIHNlcXVlbmNlIGludGVydmFsLlwiKTt0aGlzLmlkPXkoKSx0aGlzLmludGVydmFsPU1hdGgubWF4KHQsMTYpLHRoaXMubWVtYmVycz1bXSx0aGlzLm1vZGVscz17fSx0aGlzLmJsb2NrZWQ9e2hlYWQ6ITEsZm9vdDohMX19ZnVuY3Rpb24gZChlLGkscil7dmFyIG89dGhpczt0aGlzLmhlYWQ9W10sdGhpcy5ib2R5PVtdLHRoaXMuZm9vdD1bXSxmKGUubWVtYmVycyxmdW5jdGlvbihlLHQpe3ZhciBuPXIuZWxlbWVudHNbZV07biYmbltpXSYmby5ib2R5LnB1c2godCl9KSx0aGlzLmJvZHkubGVuZ3RoJiZmKGUubWVtYmVycyxmdW5jdGlvbihlLHQpe3ZhciBuPXIuZWxlbWVudHNbZV07biYmIW5baV0mJih0PG8uYm9keVswXT9vLmhlYWQucHVzaCh0KTpvLmZvb3QucHVzaCh0KSl9KX1mdW5jdGlvbiBnKGUsdCxuLGkpe3ZhciByPXRoaXMsbz1bXCJoZWFkXCIsbnVsbCxcImZvb3RcIl1bMStuXSxzPWUubWVtYmVyc1t0K25dLGE9dGhpcy5zdG9yZS5lbGVtZW50c1tzXTtlLmJsb2NrZWRbb109ITAsc2V0VGltZW91dChmdW5jdGlvbigpe2UuYmxvY2tlZFtvXT0hMSxhJiZsLmNhbGwocixhLGkpfSxlLmludGVydmFsKX1mdW5jdGlvbiBiKCl7dmFyIG49dGhpczt0LmNhbGwodGhpcyksZih0aGlzLnN0b3JlLmVsZW1lbnRzLGZ1bmN0aW9uKGUpe3ZhciB0PVtlLnN0eWxlcy5pbmxpbmUuZ2VuZXJhdGVkXTtlLnZpc2libGU/KHQucHVzaChlLnN0eWxlcy5vcGFjaXR5LmNvbXB1dGVkKSx0LnB1c2goZS5zdHlsZXMudHJhbnNmb3JtLmdlbmVyYXRlZC5maW5hbCksZS5yZXZlYWxlZD0hMCk6KHQucHVzaChlLnN0eWxlcy5vcGFjaXR5LmdlbmVyYXRlZCksdC5wdXNoKGUuc3R5bGVzLnRyYW5zZm9ybS5nZW5lcmF0ZWQuaW5pdGlhbCksZS5yZXZlYWxlZD0hMSksZS5ub2RlLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsdC5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuXCJcIiE9PWV9KS5qb2luKFwiIFwiKSl9KSxmKHRoaXMuc3RvcmUuY29udGFpbmVycyxmdW5jdGlvbihlKXt2YXIgdD1lLm5vZGU9PT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ/d2luZG93OmUubm9kZTt0LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIixuLmRlbGVnYXRlKSx0LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixuLmRlbGVnYXRlKX0pLHRoaXMuZGVsZWdhdGUoKSx0aGlzLmluaXRUaW1lb3V0PW51bGx9ZnVuY3Rpb24gdyhlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9bmF2aWdhdG9yLnVzZXJBZ2VudCksL0FuZHJvaWR8aVBob25lfGlQYWR8aVBvZC9pLnRlc3QoZSl9ZnVuY3Rpb24gRShuKXtmb3IodmFyIGU9W10sdD1hcmd1bWVudHMubGVuZ3RoLTE7MDx0LS07KWVbdF09YXJndW1lbnRzW3QrMV07aWYocyhuKSlyZXR1cm4gZihlLGZ1bmN0aW9uKGUpe2YoZSxmdW5jdGlvbihlLHQpe3MoZSk/KG5bdF0mJnMoblt0XSl8fChuW3RdPXt9KSxFKG5bdF0sZSkpOm5bdF09ZX0pfSksbjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGFyZ2V0IG11c3QgYmUgYW4gb2JqZWN0IGxpdGVyYWwuXCIpfWZ1bmN0aW9uIGkoZSxhLHQpe3ZhciBjPXRoaXM7dm9pZCAwPT09YSYmKGE9e30pLHZvaWQgMD09PXQmJih0PSExKTt2YXIgbCxkPVtdLG49YS5pbnRlcnZhbHx8ci5pbnRlcnZhbDt0cnl7biYmKGw9bmV3IHYobikpO3ZhciBpPXUoZSk7aWYoIWkubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcmV2ZWFsIHRhcmdldC5cIik7ZihpLnJlZHVjZShmdW5jdGlvbihlLHQpe3ZhciBuPXt9LGk9dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNyLWlkXCIpO2k/KEUobixjLnN0b3JlLmVsZW1lbnRzW2ldKSxuLm5vZGUuc2V0QXR0cmlidXRlKFwic3R5bGVcIixuLnN0eWxlcy5pbmxpbmUuY29tcHV0ZWQpKToobi5pZD15KCksbi5ub2RlPXQsbi5zZWVuPSExLG4ucmV2ZWFsZWQ9ITEsbi52aXNpYmxlPSExKTt2YXIgcj1FKHt9LG4uY29uZmlnfHxjLmRlZmF1bHRzLGEpO2lmKCFyLm1vYmlsZSYmdygpfHwhci5kZXNrdG9wJiYhdygpKXJldHVybiBpJiZwLmNhbGwoYyxuKSxlO3ZhciBvLHM9dShyLmNvbnRhaW5lcilbMF07aWYoIXMpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb250YWluZXIuXCIpO3JldHVybiBzLmNvbnRhaW5zKHQpJiYobnVsbD09PShvPWZ1bmN0aW9uKHQpe3ZhciBlPVtdLG49YXJndW1lbnRzLmxlbmd0aC0xO2Zvcig7MDxuLS07KWVbbl09YXJndW1lbnRzW24rMV07dmFyIGk9bnVsbDtyZXR1cm4gZihlLGZ1bmN0aW9uKGUpe2YoZSxmdW5jdGlvbihlKXtudWxsPT09aSYmZS5ub2RlPT09dCYmKGk9ZS5pZCl9KX0pLGl9KHMsZCxjLnN0b3JlLmNvbnRhaW5lcnMpKSYmKG89eSgpLGQucHVzaCh7aWQ6byxub2RlOnN9KSksbi5jb25maWc9cixuLmNvbnRhaW5lcklkPW8sbi5zdHlsZXM9bShuKSxsJiYobi5zZXF1ZW5jZT17aWQ6bC5pZCxpbmRleDpsLm1lbWJlcnMubGVuZ3RofSxsLm1lbWJlcnMucHVzaChuLmlkKSksZS5wdXNoKG4pKSxlfSxbXSksZnVuY3Rpb24oZSl7KGMuc3RvcmUuZWxlbWVudHNbZS5pZF09ZSkubm9kZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNyLWlkXCIsZS5pZCl9KX1jYXRjaChlKXtyZXR1cm4gaC5jYWxsKHRoaXMsXCJSZXZlYWwgZmFpbGVkLlwiLGUubWVzc2FnZSl9ZihkLGZ1bmN0aW9uKGUpe2Muc3RvcmUuY29udGFpbmVyc1tlLmlkXT17aWQ6ZS5pZCxub2RlOmUubm9kZX19KSxsJiYodGhpcy5zdG9yZS5zZXF1ZW5jZXNbbC5pZF09bCksITAhPT10JiYodGhpcy5zdG9yZS5oaXN0b3J5LnB1c2goe3RhcmdldDplLG9wdGlvbnM6YX0pLHRoaXMuaW5pdFRpbWVvdXQmJndpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5pbml0VGltZW91dCksdGhpcy5pbml0VGltZW91dD13aW5kb3cuc2V0VGltZW91dChiLmJpbmQodGhpcyksMCkpfXZhciBqLFQ9TWF0aC5zaWdufHxmdW5jdGlvbihlKXtyZXR1cm4oMDxlKS0oZTwwKXx8K2V9LGs9KGo9RGF0ZS5ub3coKSxmdW5jdGlvbihlKXt2YXIgdD1EYXRlLm5vdygpOzE2PHQtaj9lKGo9dCk6c2V0VGltZW91dChmdW5jdGlvbigpe3JldHVybiBrKGUpfSwwKX0pLE89d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZXx8d2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZXx8d2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZXx8aztmdW5jdGlvbiB4KGUsdCl7Zm9yKHZhciBuPXQ/ZS5ub2RlLmNsaWVudEhlaWdodDplLm5vZGUub2Zmc2V0SGVpZ2h0LGk9dD9lLm5vZGUuY2xpZW50V2lkdGg6ZS5ub2RlLm9mZnNldFdpZHRoLHI9MCxvPTAscz1lLm5vZGU7aXNOYU4ocy5vZmZzZXRUb3ApfHwocis9cy5vZmZzZXRUb3ApLGlzTmFOKHMub2Zmc2V0TGVmdCl8fChvKz1zLm9mZnNldExlZnQpLHM9cy5vZmZzZXRQYXJlbnQ7KTtyZXR1cm57Ym91bmRzOnt0b3A6cixyaWdodDpvK2ksYm90dG9tOnIrbixsZWZ0Om99LGhlaWdodDpuLHdpZHRoOml9fWZ1bmN0aW9uIEEoZSx0KXt2YXIgaT10aGlzO3ZvaWQgMD09PWUmJihlPXt0eXBlOlwiaW5pdFwifSksdm9pZCAwPT09dCYmKHQ9dGhpcy5zdG9yZS5lbGVtZW50cyksTyhmdW5jdGlvbigpe3ZhciBuPVwiaW5pdFwiPT09ZS50eXBlfHxcInJlc2l6ZVwiPT09ZS50eXBlO2YoaS5zdG9yZS5jb250YWluZXJzLGZ1bmN0aW9uKGUpe24mJihlLmdlb21ldHJ5PXguY2FsbChpLGUsITApKTt2YXIgdD1mdW5jdGlvbihlKXt2YXIgdCxuO3JldHVybiBuPWUubm9kZT09PWRvY3VtZW50LmRvY3VtZW50RWxlbWVudD8odD13aW5kb3cucGFnZVlPZmZzZXQsd2luZG93LnBhZ2VYT2Zmc2V0KToodD1lLm5vZGUuc2Nyb2xsVG9wLGUubm9kZS5zY3JvbGxMZWZ0KSx7dG9wOnQsbGVmdDpufX0uY2FsbChpLGUpO2Uuc2Nyb2xsJiYoZS5kaXJlY3Rpb249e3g6VCh0LmxlZnQtZS5zY3JvbGwubGVmdCkseTpUKHQudG9wLWUuc2Nyb2xsLnRvcCl9KSxlLnNjcm9sbD10fSksZih0LGZ1bmN0aW9uKGUpe24mJihlLmdlb21ldHJ5PXguY2FsbChpLGUpKSxlLnZpc2libGU9ZnVuY3Rpb24oZSl7dm9pZCAwPT09ZSYmKGU9e30pO3ZhciB0PXRoaXMuc3RvcmUuY29udGFpbmVyc1tlLmNvbnRhaW5lcklkXTtpZih0KXt2YXIgbj1NYXRoLm1heCgwLE1hdGgubWluKDEsZS5jb25maWcudmlld0ZhY3RvcikpLGk9ZS5jb25maWcudmlld09mZnNldCxyPWUuZ2VvbWV0cnkuYm91bmRzLnRvcCtlLmdlb21ldHJ5LmhlaWdodCpuLG89ZS5nZW9tZXRyeS5ib3VuZHMucmlnaHQtZS5nZW9tZXRyeS53aWR0aCpuLHM9ZS5nZW9tZXRyeS5ib3VuZHMuYm90dG9tLWUuZ2VvbWV0cnkuaGVpZ2h0Km4sYT1lLmdlb21ldHJ5LmJvdW5kcy5sZWZ0K2UuZ2VvbWV0cnkud2lkdGgqbixjPXQuZ2VvbWV0cnkuYm91bmRzLnRvcCt0LnNjcm9sbC50b3AraS50b3AsbD10Lmdlb21ldHJ5LmJvdW5kcy5yaWdodCt0LnNjcm9sbC5sZWZ0LWkucmlnaHQsZD10Lmdlb21ldHJ5LmJvdW5kcy5ib3R0b20rdC5zY3JvbGwudG9wLWkuYm90dG9tLHU9dC5nZW9tZXRyeS5ib3VuZHMubGVmdCt0LnNjcm9sbC5sZWZ0K2kubGVmdDtyZXR1cm4gcjxkJiZ1PG8mJmM8cyYmYTxsfHxcImZpeGVkXCI9PT1lLnN0eWxlcy5wb3NpdGlvbn19LmNhbGwoaSxlKX0pLGYodCxmdW5jdGlvbihlKXtlLnNlcXVlbmNlP2wuY2FsbChpLGUpOmMuY2FsbChpLGUpfSksaS5wcmlzdGluZT0hMX0pfXZhciBSLHEsUCxMLE0sSSxDLFcsWT1cIjQuMC41XCI7ZnVuY3Rpb24gJChlKXt2YXIgdDtpZih2b2lkIDA9PT1lJiYoZT17fSksdm9pZCAwPT09dGhpc3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpIT09JC5wcm90b3R5cGUpcmV0dXJuIG5ldyAkKGUpO2lmKCEkLmlzU3VwcG9ydGVkKCkpcmV0dXJuIGguY2FsbCh0aGlzLFwiSW5zdGFudGlhdGlvbiBmYWlsZWQuXCIsXCJUaGlzIGJyb3dzZXIgaXMgbm90IHN1cHBvcnRlZC5cIiksbi5mYWlsdXJlKCk7dHJ5e3Q9RSh7fSxJfHxyLGUpfWNhdGNoKGUpe3JldHVybiBoLmNhbGwodGhpcyxcIkludmFsaWQgY29uZmlndXJhdGlvbi5cIixlLm1lc3NhZ2UpLG4uZmFpbHVyZSgpfXRyeXtpZighdSh0LmNvbnRhaW5lcilbMF0pdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb250YWluZXIuXCIpfWNhdGNoKGUpe3JldHVybiBoLmNhbGwodGhpcyxlLm1lc3NhZ2UpLG4uZmFpbHVyZSgpfXJldHVybiEoST10KS5tb2JpbGUmJncoKXx8IUkuZGVza3RvcCYmIXcoKT8oaC5jYWxsKHRoaXMsXCJUaGlzIGRldmljZSBpcyBkaXNhYmxlZC5cIixcImRlc2t0b3A6IFwiK0kuZGVza3RvcCxcIm1vYmlsZTogXCIrSS5tb2JpbGUpLG4uZmFpbHVyZSgpKToobi5zdWNjZXNzKCksdGhpcy5zdG9yZT17Y29udGFpbmVyczp7fSxlbGVtZW50czp7fSxoaXN0b3J5OltdLHNlcXVlbmNlczp7fX0sdGhpcy5wcmlzdGluZT0hMCxSPVJ8fEEuYmluZCh0aGlzKSxxPXF8fGZ1bmN0aW9uKCl7dmFyIG49dGhpcztmKHRoaXMuc3RvcmUuZWxlbWVudHMsZnVuY3Rpb24oZSl7ZS5ub2RlLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsZS5zdHlsZXMuaW5saW5lLmdlbmVyYXRlZCksZS5ub2RlLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtc3ItaWRcIil9KSxmKHRoaXMuc3RvcmUuY29udGFpbmVycyxmdW5jdGlvbihlKXt2YXIgdD1lLm5vZGU9PT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ/d2luZG93OmUubm9kZTt0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIixuLmRlbGVnYXRlKSx0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixuLmRlbGVnYXRlKX0pLHRoaXMuc3RvcmU9e2NvbnRhaW5lcnM6e30sZWxlbWVudHM6e30saGlzdG9yeTpbXSxzZXF1ZW5jZXM6e319fS5iaW5kKHRoaXMpLFA9UHx8aS5iaW5kKHRoaXMpLEw9THx8cC5iaW5kKHRoaXMpLE09TXx8ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2YodGhpcy5zdG9yZS5oaXN0b3J5LGZ1bmN0aW9uKGUpe2kuY2FsbCh0LGUudGFyZ2V0LGUub3B0aW9ucywhMCl9KSxiLmNhbGwodGhpcyl9LmJpbmQodGhpcyksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJkZWxlZ2F0ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gUn19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImRlc3Ryb3lcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHF9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJyZXZlYWxcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJjbGVhblwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gTH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInN5bmNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIE19fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJkZWZhdWx0c1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gSX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInZlcnNpb25cIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJub29wXCIse2dldDpmdW5jdGlvbigpe3JldHVybiExfX0pLFd8fChXPXRoaXMpKX1yZXR1cm4gJC5pc1N1cHBvcnRlZD1mdW5jdGlvbigpe3JldHVybihcInRyYW5zZm9ybVwiaW4odD1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpfHxcIldlYmtpdFRyYW5zZm9ybVwiaW4gdCkmJihcInRyYW5zaXRpb25cImluKGU9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKXx8XCJXZWJraXRUcmFuc2l0aW9uXCJpbiBlKTt2YXIgZSx0fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoJCxcImRlYnVnXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBDfHwhMX0sc2V0OmZ1bmN0aW9uKGUpe3JldHVybiBDPVwiYm9vbGVhblwiPT10eXBlb2YgZT9lOkN9fSksJCgpLCR9KCk7XG5cblxuXG4vKlxuICogQ3VzdG9tXG4gKi9cbiQoIGRvY3VtZW50ICkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgXG4gICAgJCgnLnRvZ2dsZScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgJCgnLmNvbnRhaW5lcnInKS5zdG9wKCkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgIH0pO1xuICAgICBcbiAgICAkKCcuY2xvc2UnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICQoJy5jb250YWluZXJyJykuc3RvcCgpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICB9KTtcblxuICBTY3JvbGxSZXZlYWwoKS5yZXZlYWwoJy5sb2dpbicse2RlbGF5OiA3MDB9KTtcbiAgU2Nyb2xsUmV2ZWFsKCkucmV2ZWFsKCcubG9nbycse2RlbGF5OiA3MDAsIGRpc3RhbmNlOiAnNDAlJywgb3JpZ2luOiAndG9wJ30pO1xuICBTY3JvbGxSZXZlYWwoKS5yZXZlYWwoJy5zY2FsZVVwJywgeyBkdXJhdGlvbjogMjYwMH0pO1xuICBTY3JvbGxSZXZlYWwoKS5yZXZlYWwoJy5yZXZlbE1haW5zaXRlSW5mbycsIHsgZGVsYXk6IDUwMH0pO1xuICBcbiAgXG4gIHZhciBzbGlkZVVwID0ge1xuICAgIGRpc3RhbmNlOiAnMTUwJScsXG4gICAgb3JpZ2luOiAnYm90dG9tJyxcbiAgICBvcGFjaXR5OiAwLFxuICAgIGRlbGF5OiA4MDBcbiAgfTtcbiAgXG4gIHZhciBzbGlkZVVwMiA9IHtcbiAgICBkaXN0YW5jZTogJzEwMCUnLFxuICAgIG9yaWdpbjogJ2JvdHRvbScsXG4gICAgb3BhY2l0eTogMCxcbiAgICBkZWxheTogMTAwMFxuICB9O1xuICBcbiAgdmFyIHNsaWRlVXAzID0ge1xuICAgIGRpc3RhbmNlOiAnNjAlJyxcbiAgICBvcmlnaW46ICdib3R0b20nLFxuICAgIG9wYWNpdHk6IDAsXG4gICAgZGVsYXk6IDEyMDBcbiAgfTtcbiAgXG4gIHZhciBzbGlkZXJpZ2h0ID0ge1xuICAgIGRpc3RhbmNlOiAnMTAlJyxcbiAgICBvcmlnaW46ICdyaWdodCcsXG4gICAgb3BhY2l0eTogMCxcbiAgICBkdXJhdGlvbjogMTAwMCxcbiAgICBkZWxheTogMzAwXG4gIH07XG4gIFxuICBTY3JvbGxSZXZlYWwoKS5yZXZlYWwoJy5yZXZlbE1haW5zaXRlSW5mbzEnLCBzbGlkZVVwKTtcbiAgU2Nyb2xsUmV2ZWFsKCkucmV2ZWFsKCcucmV2ZWxNYWluc2l0ZUluZm8yJywgc2xpZGVVcDIpO1xuICBTY3JvbGxSZXZlYWwoKS5yZXZlYWwoJy5yZXZlbE1haW5zaXRlSW5mbzMnLCBzbGlkZVVwMyk7XG4gIFNjcm9sbFJldmVhbCgpLnJldmVhbCgnLm1haWxQaWN0dXJlaW1nJywgc2xpZGVyaWdodCk7XG4gIFxuICBcbn0pO1xuICBcbiAgLy8gLS0tLS0tLS0gT2xkICgpIFxuZnVuY3Rpb24gbXlGdW5jdGlvbigpIHtcbiAgdmFyIHggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhcmQxXCIpO1xuICB2YXIgeSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FyZDJcIik7XG4gIGlmICh4LnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiICYgeS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIikge1xuICAgIHguc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICB4LnN0eWxlLmhlaWdodCA9IFwiYW5pbWF0ZSBib3VuY2VcIjtcbiAgICB5LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gIH0gZWxzZSB7XG4gICAgeC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgeS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvc2VMb2dpbkFueXdoZXJlKCl7XG4gIHZhciB4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYXJkMVwiKTtcbiAgdmFyIHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhcmQyXCIpO1xuICBpZiAoeC5zdHlsZS5kaXNwbGF5ID09IFwiYmxvY2tcIil7XG4gICAgeC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgeS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gIH0gZWxzZSB7XG5cbiAgfVxufVxuXG4vLyBmdW5jdGlvbiBteUZ1bmN0aW9uKCkge1xuLy8gICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhcmQxXCIpLmNsYXNzTGlzdC50b2dnbGUoXCJhY3RpdmVcIik7XG4vLyAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FyZDJcIikuY2xhc3NMaXN0LnRvZ2dsZShcImFjdGl2ZVwiKTtcbi8vIH1cblxuXG4vLyB3aW5kb3cub25jbGljayA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4vLyAgIGlmICghZXZlbnQudGFyZ2V0Lm1hdGNoZXMoJy5sb2dpbkJ1dHRvbicpKSB7XG4vLyAgICAgaWYgKCFldmVudC50YXJnZXQubWF0Y2hlcygnLmNvbnRhaW5lcnInKSkge1xuLy8gICAgIHZhciBkcm9wZG93bnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiY2FyZFwiKTtcbi8vICAgICB2YXIgaTtcbi8vICAgICBmb3IgKGkgPSAwOyBpIDwgZHJvcGRvd25zLmxlbmd0aDsgaSsrKSB7XG4vLyAgICAgICB2YXIgb3BlbkRyb3Bkb3duID0gZHJvcGRvd25zW2ldO1xuLy8gICAgICAgaWYgKG9wZW5Ecm9wZG93bi5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XG4vLyAgICAgICAgIG9wZW5Ecm9wZG93bi5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbi8vICAgICAgIH1cbi8vICAgICB9XG4vLyAgIH1cbi8vIH1cbi8vIH0iXX0=
